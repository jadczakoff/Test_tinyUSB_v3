
Test_tinyUSB_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007844  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007af0  08007af0  00022028  2**0
                  CONTENTS
  4 .ARM          00000008  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007af8  08007af8  00022028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007af8  08007af8  00017af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007afc  08007afc  00017afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002028  20000000  08007b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  20002028  08009b28  00022028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a2c  08009b28  00022a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001223e  00000000  00000000  00022058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003439  00000000  00000000  00034296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000376d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00038430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f80  00000000  00000000  00039128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011198  00000000  00000000  000520a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094894  00000000  00000000  00063240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7ad4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003604  00000000  00000000  000f7b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20002028 	.word	0x20002028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080079c4 	.word	0x080079c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000202c 	.word	0x2000202c
 80001d4:	080079c4 	.word	0x080079c4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_GPIO_Init+0x4c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <MX_GPIO_Init+0x4c>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_GPIO_Init+0x4c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_GPIO_Init+0x4c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <MX_GPIO_Init+0x4c>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_GPIO_Init+0x4c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800

0800053c <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8000540:	2000      	movs	r0, #0
 8000542:	f000 fb81 	bl	8000c48 <tud_cdc_n_available>
 8000546:	4603      	mov	r3, r0
}
 8000548:	4618      	mov	r0, r3
 800054a:	bd80      	pop	{r7, pc}

0800054c <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	2000      	movs	r0, #0
 800055c:	f000 fb8c 	bl	8000c78 <tud_cdc_n_read>
 8000560:	4603      	mov	r3, r0
}
 8000562:	4618      	mov	r0, r3
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <cdc_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void cdc_task(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b092      	sub	sp, #72	; 0x48
 800056e:	af00      	add	r7, sp, #0
     // connected and there are data available
     if ( tud_cdc_available() )
 8000570:	f7ff ffe4 	bl	800053c <tud_cdc_available>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d005      	beq.n	8000586 <cdc_task+0x1c>
     {
       // read datas
       char buf[64];
       uint32_t count = tud_cdc_read(buf, sizeof(buf));
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ffe4 	bl	800054c <tud_cdc_read>
 8000584:	6478      	str	r0, [r7, #68]	; 0x44
       //(void) count;
       //tud_cdc_write(buf, count);
       //tud_cdc_write_flush();
     }
}
 8000586:	bf00      	nop
 8000588:	3748      	adds	r7, #72	; 0x48
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f005 fe15 	bl	80061c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f80f 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f7ff ffa7 	bl	80004ec <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800059e:	f000 fa65 	bl	8000a6c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  tusb_init();
 80005a2:	f005 fcd5 	bl	8005f50 <tusb_init>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 80005a6:	2100      	movs	r1, #0
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f002 feb6 	bl	800331c <tud_task_ext>
}
 80005b0:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tud_task();
	  cdc_task();
 80005b2:	f7ff ffda 	bl	800056a <cdc_task>
	  tud_task();
 80005b6:	e7f6      	b.n	80005a6 <main+0x18>

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f007 f9f4 	bl	80079b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <SystemClock_Config+0xc8>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <SystemClock_Config+0xcc>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800062c:	2360      	movs	r3, #96	; 0x60
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f006 fa09 	bl	8006a54 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 f81e 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2103      	movs	r1, #3
 8000668:	4618      	mov	r0, r3
 800066a:	f006 fc6b 	bl	8006f44 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 f808 	bl	8000688 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <tud_msc_inquiry_cb>:
};

// Invoked when received SCSI_CMD_INQUIRY
// Application fill vendor id, product id and revision with string up to 8, 16, 4 characters respectively
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4])
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b08d      	sub	sp, #52	; 0x34
 8000698:	af00      	add	r7, sp, #0
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4603      	mov	r3, r0
 80006a2:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  const char vid[] = "TinyUSB";
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <tud_msc_inquiry_cb+0x80>)
 80006a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ae:	e883 0003 	stmia.w	r3, {r0, r1}
  const char pid[] = "Mass Storage";
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <tud_msc_inquiry_cb+0x84>)
 80006b4:	f107 0418 	add.w	r4, r7, #24
 80006b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ba:	c407      	stmia	r4!, {r0, r1, r2}
 80006bc:	7023      	strb	r3, [r4, #0]
  const char rev[] = "1.0";
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <tud_msc_inquiry_cb+0x88>)
 80006c0:	617b      	str	r3, [r7, #20]

  memcpy(vendor_id  , vid, strlen(vid));
 80006c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fd86 	bl	80001d8 <strlen>
 80006cc:	4602      	mov	r2, r0
 80006ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d2:	4619      	mov	r1, r3
 80006d4:	68b8      	ldr	r0, [r7, #8]
 80006d6:	f007 f945 	bl	8007964 <memcpy>
  memcpy(product_id , pid, strlen(pid));
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fd7a 	bl	80001d8 <strlen>
 80006e4:	4602      	mov	r2, r0
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	4619      	mov	r1, r3
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f007 f939 	bl	8007964 <memcpy>
  memcpy(product_rev, rev, strlen(rev));
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fd6e 	bl	80001d8 <strlen>
 80006fc:	4602      	mov	r2, r0
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f007 f92d 	bl	8007964 <memcpy>
}
 800070a:	bf00      	nop
 800070c:	3734      	adds	r7, #52	; 0x34
 800070e:	46bd      	mov	sp, r7
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	bf00      	nop
 8000714:	080079dc 	.word	0x080079dc
 8000718:	080079e4 	.word	0x080079e4
 800071c:	00302e31 	.word	0x00302e31

08000720 <tud_msc_test_unit_ready_cb>:

// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  (void) lun;

  // RAM disk is ready until ejected
  if (ejected) {
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <tud_msc_test_unit_ready_cb+0x2c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d007      	beq.n	8000742 <tud_msc_test_unit_ready_cb+0x22>
    // Additional Sense 3A-00 is NOT_FOUND
    tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3a, 0x00);
 8000732:	79f8      	ldrb	r0, [r7, #7]
 8000734:	2300      	movs	r3, #0
 8000736:	223a      	movs	r2, #58	; 0x3a
 8000738:	2102      	movs	r1, #2
 800073a:	f000 ff9b 	bl	8001674 <tud_msc_set_sense>
    return false;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <tud_msc_test_unit_ready_cb+0x24>
  }

  return true;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20002044 	.word	0x20002044

08000750 <tud_msc_capacity_cb>:

// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  *block_count = DISK_BLOCK_NUM;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2210      	movs	r2, #16
 8000762:	601a      	str	r2, [r3, #0]
  *block_size  = DISK_BLOCK_SIZE;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076a:	801a      	strh	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <tud_msc_start_stop_cb>:

// Invoked when received Start Stop Unit command
// - Start = 0 : stopped power mode, if load_eject = 1 : unload disk storage
// - Start = 1 : active mode, if load_eject = 1 : load disk storage
bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject)
{
 8000778:	b490      	push	{r4, r7}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4604      	mov	r4, r0
 8000780:	4608      	mov	r0, r1
 8000782:	4611      	mov	r1, r2
 8000784:	461a      	mov	r2, r3
 8000786:	4623      	mov	r3, r4
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	4603      	mov	r3, r0
 800078c:	71bb      	strb	r3, [r7, #6]
 800078e:	460b      	mov	r3, r1
 8000790:	717b      	strb	r3, [r7, #5]
 8000792:	4613      	mov	r3, r2
 8000794:	713b      	strb	r3, [r7, #4]
  (void) lun;
  (void) power_condition;

  if ( load_eject )
 8000796:	793b      	ldrb	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d005      	beq.n	80007a8 <tud_msc_start_stop_cb+0x30>
  {
    if (start)
 800079c:	797b      	ldrb	r3, [r7, #5]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <tud_msc_start_stop_cb+0x30>
    {
      // load disk storage
    }else
    {
      // unload disk storage
      ejected = true;
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <tud_msc_start_stop_cb+0x3c>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
    }
  }

  return true;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc90      	pop	{r4, r7}
 80007b2:	4770      	bx	lr
 80007b4:	20002044 	.word	0x20002044

080007b8 <tud_msc_read10_cb>:

// Callback invoked when received READ10 command.
// Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  // out of ramdisk
  if ( lba >= DISK_BLOCK_NUM ) return -1;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b0f      	cmp	r3, #15
 80007cc:	d902      	bls.n	80007d4 <tud_msc_read10_cb+0x1c>
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	e00c      	b.n	80007ee <tud_msc_read10_cb+0x36>

  uint8_t const* addr = msc_disk[lba] + offset;
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	025b      	lsls	r3, r3, #9
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <tud_msc_read10_cb+0x40>)
 80007da:	441a      	add	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	617b      	str	r3, [r7, #20]
  memcpy(buffer, addr, bufsize);
 80007e2:	6a3a      	ldr	r2, [r7, #32]
 80007e4:	6979      	ldr	r1, [r7, #20]
 80007e6:	6838      	ldr	r0, [r7, #0]
 80007e8:	f007 f8bc 	bl	8007964 <memcpy>

  return (int32_t) bufsize;
 80007ec:	6a3b      	ldr	r3, [r7, #32]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000

080007fc <tud_msc_is_writable_cb>:

bool tud_msc_is_writable_cb (uint8_t lun)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  (void) lun;

#ifdef CFG_EXAMPLE_MSC_READONLY
  return false;
#else
  return true;
 8000806:	2301      	movs	r3, #1
#endif
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <tud_msc_write10_cb>:

// Callback invoked when received WRITE10 command.
// Process data in buffer to disk's storage and return number of written bytes
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  // out of ramdisk
  if ( lba >= DISK_BLOCK_NUM ) return -1;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b0f      	cmp	r3, #15
 8000828:	d902      	bls.n	8000830 <tud_msc_write10_cb+0x1c>
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	e00c      	b.n	800084a <tud_msc_write10_cb+0x36>

#ifndef CFG_EXAMPLE_MSC_READONLY
  uint8_t* addr = msc_disk[lba] + offset;
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	025b      	lsls	r3, r3, #9
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <tud_msc_write10_cb+0x40>)
 8000836:	441a      	add	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	617b      	str	r3, [r7, #20]
  memcpy(addr, buffer, bufsize);
 800083e:	6a3a      	ldr	r2, [r7, #32]
 8000840:	6839      	ldr	r1, [r7, #0]
 8000842:	6978      	ldr	r0, [r7, #20]
 8000844:	f007 f88e 	bl	8007964 <memcpy>
#else
  (void) lba; (void) offset; (void) buffer;
#endif

  return (int32_t) bufsize;
 8000848:	6a3b      	ldr	r3, [r7, #32]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000

08000858 <tud_msc_scsi_cb>:

// Callback invoked when received an SCSI command not in built-in list below
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	461a      	mov	r2, r3
 8000864:	4603      	mov	r3, r0
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	4613      	mov	r3, r2
 800086a:	81bb      	strh	r3, [r7, #12]
  // read10 & write10 has their own callback and MUST not be handled here

  void const* response = NULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  int32_t resplen = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]

  // most scsi handled is input
  bool in_xfer = true;
 8000874:	2301      	movs	r3, #1
 8000876:	75fb      	strb	r3, [r7, #23]

  switch (scsi_cmd[0])
  {
    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8000878:	7bf8      	ldrb	r0, [r7, #15]
 800087a:	2300      	movs	r3, #0
 800087c:	2220      	movs	r2, #32
 800087e:	2105      	movs	r1, #5
 8000880:	f000 fef8 	bl	8001674 <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	61fb      	str	r3, [r7, #28]
    break;
 800088a:	bf00      	nop
  }

  // return resplen must not larger than bufsize
  if ( resplen > bufsize ) resplen = bufsize;
 800088c:	89bb      	ldrh	r3, [r7, #12]
 800088e:	69fa      	ldr	r2, [r7, #28]
 8000890:	429a      	cmp	r2, r3
 8000892:	dd01      	ble.n	8000898 <tud_msc_scsi_cb+0x40>
 8000894:	89bb      	ldrh	r3, [r7, #12]
 8000896:	61fb      	str	r3, [r7, #28]

  if ( response && (resplen > 0) )
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00b      	beq.n	80008b6 <tud_msc_scsi_cb+0x5e>
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	dd08      	ble.n	80008b6 <tud_msc_scsi_cb+0x5e>
  {
    if(in_xfer)
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d005      	beq.n	80008b6 <tud_msc_scsi_cb+0x5e>
    {
      memcpy(buffer, response, (size_t) resplen);
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	461a      	mov	r2, r3
 80008ae:	69b9      	ldr	r1, [r7, #24]
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f007 f857 	bl	8007964 <memcpy>
    {
      // SCSI output
    }
  }

  return (int32_t) resplen;
 80008b6:	69fb      	ldr	r3, [r7, #28]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f005 fc82 	bl	8006264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
    tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8000968:	2000      	movs	r0, #0
 800096a:	f005 f9a3 	bl	8005cb4 <dcd_int_handler>
    return;
 800096e:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <tud_descriptor_device_cb+0x10>)
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	08007a44 	.word	0x08007a44

080009ac <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 80009b6:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	08007a58 	.word	0x08007a58

080009c8 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	4613      	mov	r3, r2
 80009d6:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d108      	bne.n	80009f0 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <tud_descriptor_string_cb+0x9c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <tud_descriptor_string_cb+0xa0>)
 80009e8:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e027      	b.n	8000a40 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b05      	cmp	r3, #5
 80009f4:	d901      	bls.n	80009fa <tud_descriptor_string_cb+0x32>
 80009f6:	2300      	movs	r3, #0
 80009f8:	e030      	b.n	8000a5c <tud_descriptor_string_cb+0x94>

    const char* str = string_desc_arr[index];
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <tud_descriptor_string_cb+0x9c>)
 80009fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a02:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = (uint8_t) strlen(str);
 8000a04:	68b8      	ldr	r0, [r7, #8]
 8000a06:	f7ff fbe7 	bl	80001d8 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	2b1f      	cmp	r3, #31
 8000a12:	d901      	bls.n	8000a18 <tud_descriptor_string_cb+0x50>
 8000a14:	231f      	movs	r3, #31
 8000a16:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73bb      	strb	r3, [r7, #14]
 8000a1c:	e00c      	b.n	8000a38 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	4413      	add	r3, r2
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b291      	uxth	r1, r2
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <tud_descriptor_string_cb+0xa0>)
 8000a2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8000a32:	7bbb      	ldrb	r3, [r7, #14]
 8000a34:	3301      	adds	r3, #1
 8000a36:	73bb      	strb	r3, [r7, #14]
 8000a38:	7bba      	ldrb	r2, [r7, #14]
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d3ee      	bcc.n	8000a1e <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	3301      	adds	r3, #1
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <tud_descriptor_string_cb+0xa0>)
 8000a58:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8000a5a:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <tud_descriptor_string_cb+0xa0>)
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20002004 	.word	0x20002004
 8000a68:	20002048 	.word	0x20002048

08000a6c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab0:	f005 feb2 	bl	8006818 <HAL_PCD_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aba:	f7ff fde5 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20002088 	.word	0x20002088

08000ac8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ae8:	d13a      	bne.n	8000b60 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <HAL_PCD_MspInit+0xa0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <HAL_PCD_MspInit+0xa0>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <HAL_PCD_MspInit+0xa0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b18:	230a      	movs	r3, #10
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4812      	ldr	r0, [pc, #72]	; (8000b6c <HAL_PCD_MspInit+0xa4>)
 8000b24:	f005 fcf4 	bl	8006510 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_PCD_MspInit+0xa0>)
 8000b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_PCD_MspInit+0xa0>)
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b32:	6353      	str	r3, [r2, #52]	; 0x34
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_PCD_MspInit+0xa0>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <HAL_PCD_MspInit+0xa0>)
 8000b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b42:	6453      	str	r3, [r2, #68]	; 0x44
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_PCD_MspInit+0xa0>)
 8000b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2043      	movs	r0, #67	; 0x43
 8000b56:	f005 fca4 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b5a:	2043      	movs	r0, #67	; 0x43
 8000b5c:	f005 fcbd 	bl	80064da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	; (8000bbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9a:	f7ff feeb 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f006 febd 	bl	800791c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fcf4 	bl	800058e <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20002028 	.word	0x20002028
  ldr r2, =_sidata
 8000bb4:	08007b00 	.word	0x08007b00
  ldr r2, =_sbss
 8000bb8:	20002028 	.word	0x20002028
  ldr r4, =_ebss
 8000bbc:	20002a2c 	.word	0x20002a2c

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>

08000bc2 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3310      	adds	r3, #16
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 f9f6 	bl	8002fc4 <tu_fifo_remaining>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 8000bdc:	89bb      	ldrh	r3, [r7, #12]
 8000bde:	2b3f      	cmp	r3, #63	; 0x3f
 8000be0:	d801      	bhi.n	8000be6 <_prep_out_transaction+0x24>
 8000be2:	2300      	movs	r3, #0
 8000be4:	e02b      	b.n	8000c3e <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	78da      	ldrb	r2, [r3, #3]
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fc0c 	bl	800440c <usbd_edpt_claim>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f083 0301 	eor.w	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <_prep_out_transaction+0x42>
 8000c00:	2300      	movs	r3, #0
 8000c02:	e01c      	b.n	8000c3e <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3310      	adds	r3, #16
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 f9db 	bl	8002fc4 <tu_fifo_remaining>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8000c12:	89bb      	ldrh	r3, [r7, #12]
 8000c14:	2b3f      	cmp	r3, #63	; 0x3f
 8000c16:	d90a      	bls.n	8000c2e <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	78d9      	ldrb	r1, [r3, #3]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8000c22:	7bf8      	ldrb	r0, [r7, #15]
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	f003 fc45 	bl	80044b4 <usbd_edpt_xfer>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	e007      	b.n	8000c3e <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	78da      	ldrb	r2, [r3, #3]
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 fc12 	bl	8004460 <usbd_edpt_release>

    return false;
 8000c3c:	2300      	movs	r3, #0
  }
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	3310      	adds	r3, #16
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <tud_cdc_n_available+0x2c>)
 8000c60:	4413      	add	r3, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 f97d 	bl	8002f62 <tu_fifo_count>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20002594 	.word	0x20002594

08000c78 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000c8c:	fb02 f303 	mul.w	r3, r2, r3
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <tud_cdc_n_read+0x44>)
 8000c92:	4413      	add	r3, r2
 8000c94:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3310      	adds	r3, #16
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	b292      	uxth	r2, r2
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 f9c5 	bl	8003030 <tu_fifo_read_n>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff89 	bl	8000bc2 <_prep_out_transaction>
  return num_read;
 8000cb0:	693b      	ldr	r3, [r7, #16]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20002594 	.word	0x20002594

08000cc0 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000cd0:	fb02 f303 	mul.w	r3, r2, r3
 8000cd4:	4a36      	ldr	r2, [pc, #216]	; (8000db0 <tud_cdc_n_write_flush+0xf0>)
 8000cd6:	4413      	add	r3, r2
 8000cd8:	617b      	str	r3, [r7, #20]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 8000cda:	f002 fa93 	bl	8003204 <tud_mounted>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d009      	beq.n	8000cf8 <tud_cdc_n_write_flush+0x38>
 8000ce4:	f002 faa0 	bl	8003228 <tud_suspended>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f083 0301 	eor.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <tud_cdc_n_write_flush+0x38>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <tud_cdc_n_write_flush+0x3a>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 8000d00:	f083 0301 	eor.w	r3, r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <tud_cdc_n_write_flush+0x4e>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e04c      	b.n	8000da8 <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3324      	adds	r3, #36	; 0x24
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 f925 	bl	8002f62 <tu_fifo_count>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <tud_cdc_n_write_flush+0x62>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e042      	b.n	8000da8 <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	789a      	ldrb	r2, [r3, #2]
 8000d2a:	7cfb      	ldrb	r3, [r7, #19]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fb6c 	bl	800440c <usbd_edpt_claim>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f083 0301 	eor.w	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <tud_cdc_n_write_flush+0x84>
 8000d40:	2300      	movs	r3, #0
 8000d42:	e031      	b.n	8000da8 <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	33f8      	adds	r3, #248	; 0xf8
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	4619      	mov	r1, r3
 8000d52:	f002 f96d 	bl	8003030 <tu_fifo_read_n>
 8000d56:	4603      	mov	r3, r0
 8000d58:	823b      	strh	r3, [r7, #16]

  if ( count )
 8000d5a:	8a3b      	ldrh	r3, [r7, #16]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d01b      	beq.n	8000d98 <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	7899      	ldrb	r1, [r3, #2]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8000d6a:	8a3b      	ldrh	r3, [r7, #16]
 8000d6c:	7cf8      	ldrb	r0, [r7, #19]
 8000d6e:	f003 fba1 	bl	80044b4 <usbd_edpt_xfer>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f083 0301 	eor.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00a      	beq.n	8000d94 <tud_cdc_n_write_flush+0xd4>
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <tud_cdc_n_write_flush+0xf4>)
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d000      	beq.n	8000d90 <tud_cdc_n_write_flush+0xd0>
 8000d8e:	be00      	bkpt	0x0000
 8000d90:	2300      	movs	r3, #0
 8000d92:	e009      	b.n	8000da8 <tud_cdc_n_write_flush+0xe8>
    return count;
 8000d94:	8a3b      	ldrh	r3, [r7, #16]
 8000d96:	e007      	b.n	8000da8 <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	789a      	ldrb	r2, [r3, #2]
 8000d9c:	7cfb      	ldrb	r3, [r7, #19]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fb5d 	bl	8004460 <usbd_edpt_release>
    return 0;
 8000da6:	2300      	movs	r3, #0
  }
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20002594 	.word	0x20002594
 8000db4:	e000edf0 	.word	0xe000edf0

08000db8 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8000dbe:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4824      	ldr	r0, [pc, #144]	; (8000e58 <cdcd_init+0xa0>)
 8000dc6:	f006 fdf5 	bl	80079b4 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	71fb      	strb	r3, [r7, #7]
 8000dce:	e03b      	b.n	8000e48 <cdcd_init+0x90>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <cdcd_init+0xa0>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	22ff      	movs	r2, #255	; 0xff
 8000de4:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000df2:	f443 4342 	orr.w	r3, r3, #49664	; 0xc200
 8000df6:	80d3      	strh	r3, [r2, #6]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	8113      	strh	r3, [r2, #8]
    p_cdc->line_coding.stop_bits = 0;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2200      	movs	r2, #0
 8000e04:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2208      	movs	r2, #8
 8000e10:	731a      	strb	r2, [r3, #12]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f103 0010 	add.w	r0, r3, #16
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000e1e:	2300      	movs	r3, #0
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	f001 fc2b 	bl	8002680 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8000e36:	2301      	movs	r3, #1
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	f001 fc1f 	bl	8002680 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	3301      	adds	r3, #1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0c0      	beq.n	8000dd0 <cdcd_init+0x18>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
#endif
  }
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20002594 	.word	0x20002594

08000e5c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e01f      	b.n	8000eac <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <cdcd_reset+0x60>)
 8000e78:	4413      	add	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8000e7c:	2205      	movs	r2, #5
 8000e7e:	2100      	movs	r1, #0
 8000e80:	68b8      	ldr	r0, [r7, #8]
 8000e82:	f006 fd97 	bl	80079b4 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	3310      	adds	r3, #16
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 f953 	bl	8003136 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	3324      	adds	r3, #36	; 0x24
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 f94e 	bl	8003136 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	3324      	adds	r3, #36	; 0x24
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 f968 	bl	8003176 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0dc      	beq.n	8000e6c <cdcd_reset+0x10>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20002594 	.word	0x20002594

08000ec0 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09a      	sub	sp, #104	; 0x68
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	795b      	ldrb	r3, [r3, #5]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d103      	bne.n	8000ee0 <cdcd_open+0x20>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	799b      	ldrb	r3, [r3, #6]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d001      	beq.n	8000ee4 <cdcd_open+0x24>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e0e1      	b.n	80010a8 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8000eee:	e01a      	b.n	8000f26 <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8000ef0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000ef4:	4a6e      	ldr	r2, [pc, #440]	; (80010b0 <cdcd_open+0x1f0>)
 8000ef6:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000efa:	fb01 f303 	mul.w	r3, r1, r3
 8000efe:	4413      	add	r3, r2
 8000f00:	3302      	adds	r3, #2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d109      	bne.n	8000f1c <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8000f08:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f0c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	4a66      	ldr	r2, [pc, #408]	; (80010b0 <cdcd_open+0x1f0>)
 8000f16:	4413      	add	r3, r2
 8000f18:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8000f1a:	e008      	b.n	8000f2e <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8000f1c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f20:	3301      	adds	r3, #1
 8000f22:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8000f26:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0e0      	beq.n	8000ef0 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8000f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10a      	bne.n	8000f4a <cdcd_open+0x8a>
 8000f34:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <cdcd_open+0x1f4>)
 8000f36:	647b      	str	r3, [r7, #68]	; 0x44
 8000f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d000      	beq.n	8000f46 <cdcd_open+0x86>
 8000f44:	be00      	bkpt	0x0000
 8000f46:	2300      	movs	r3, #0
 8000f48:	e0ae      	b.n	80010a8 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	789a      	ldrb	r2, [r3, #2]
 8000f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f50:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8000f52:	2309      	movs	r3, #9
 8000f54:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	643b      	str	r3, [r7, #64]	; 0x40
//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8000f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8000f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f68:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8000f6a:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8000f6c:	e013      	b.n	8000f96 <cdcd_open+0xd6>
 8000f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8000f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f74:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000f7c:	4413      	add	r3, r2
 8000f7e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8000f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f84:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8000f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8000f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f92:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8000f94:	657b      	str	r3, [r7, #84]	; 0x54
 8000f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8000f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8000fa0:	2b24      	cmp	r3, #36	; 0x24
 8000fa2:	d104      	bne.n	8000fae <cdcd_open+0xee>
 8000fa4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8000fa8:	88bb      	ldrh	r3, [r7, #4]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d9df      	bls.n	8000f6e <cdcd_open+0xae>
 8000fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	d12f      	bne.n	800101c <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8000fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fbe:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f003 f9dd 	bl	8004384 <usbd_edpt_open>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00a      	beq.n	8000fec <cdcd_open+0x12c>
 8000fd6:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <cdcd_open+0x1f4>)
 8000fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d000      	beq.n	8000fe8 <cdcd_open+0x128>
 8000fe6:	be00      	bkpt	0x0000
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e05d      	b.n	80010a8 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8000fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fee:	789a      	ldrb	r2, [r3, #2]
 8000ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ff2:	705a      	strb	r2, [r3, #1]
 8000ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff6:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001002:	4413      	add	r3, r2
 8001004:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 800101a:	657b      	str	r3, [r7, #84]	; 0x54
 800101c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800101e:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	3301      	adds	r3, #1
 8001024:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8001026:	2b04      	cmp	r3, #4
 8001028:	d139      	bne.n	800109e <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 800102a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800102c:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d135      	bne.n	800109e <cdcd_open+0x1de>
 8001032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001034:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 800103a:	b29a      	uxth	r2, r3
 800103c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001040:	4413      	add	r3, r2
 8001042:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001048:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8001058:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 800105a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800105c:	3303      	adds	r3, #3
 800105e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001060:	3202      	adds	r2, #2
 8001062:	79f8      	ldrb	r0, [r7, #7]
 8001064:	9201      	str	r2, [sp, #4]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2302      	movs	r3, #2
 800106a:	2202      	movs	r2, #2
 800106c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800106e:	f003 f921 	bl	80042b4 <usbd_open_edpt_pair>
 8001072:	4603      	mov	r3, r0
 8001074:	f083 0301 	eor.w	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00a      	beq.n	8001094 <cdcd_open+0x1d4>
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <cdcd_open+0x1f4>)
 8001080:	64bb      	str	r3, [r7, #72]	; 0x48
 8001082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d000      	beq.n	8001090 <cdcd_open+0x1d0>
 800108e:	be00      	bkpt	0x0000
 8001090:	2300      	movs	r3, #0
 8001092:	e009      	b.n	80010a8 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8001094:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001098:	330e      	adds	r3, #14
 800109a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 800109e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80010a0:	f7ff fd8f 	bl	8000bc2 <_prep_out_transaction>

  return drv_len;
 80010a4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3760      	adds	r7, #96	; 0x60
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20002594 	.word	0x20002594
 80010b4:	e000edf0 	.word	0xe000edf0

080010b8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	603a      	str	r2, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	460b      	mov	r3, r1
 80010c6:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b20      	cmp	r3, #32
 80010d4:	d001      	beq.n	80010da <cdcd_control_xfer_cb+0x22>
 80010d6:	2300      	movs	r3, #0
 80010d8:	e0cc      	b.n	8001274 <cdcd_control_xfer_cb+0x1bc>

  uint8_t itf = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 80010e0:	4b66      	ldr	r3, [pc, #408]	; (800127c <cdcd_control_xfer_cb+0x1c4>)
 80010e2:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 80010e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <cdcd_control_xfer_cb+0x38>
 80010ec:	2300      	movs	r3, #0
 80010ee:	e0c1      	b.n	8001274 <cdcd_control_xfer_cb+0x1bc>

    if ( p_cdc->itf_num == request->wIndex ) break;
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	889b      	ldrh	r3, [r3, #4]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d009      	beq.n	8001114 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8001100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001104:	3301      	adds	r3, #1
 8001106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001110:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8001112:	e7e7      	b.n	80010e4 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8001114:	bf00      	nop
  }

  switch ( request->bRequest )
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	3b20      	subs	r3, #32
 800111c:	2b03      	cmp	r3, #3
 800111e:	f200 809f 	bhi.w	8001260 <cdcd_control_xfer_cb+0x1a8>
 8001122:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <cdcd_control_xfer_cb+0x70>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	08001139 	.word	0x08001139
 800112c:	08001171 	.word	0x08001171
 8001130:	08001187 	.word	0x08001187
 8001134:	0800122f 	.word	0x0800122f
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d107      	bne.n	800114e <cdcd_control_xfer_cb+0x96>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	1d9a      	adds	r2, r3, #6
 8001142:	79f8      	ldrb	r0, [r7, #7]
 8001144:	2307      	movs	r3, #7
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	f003 fb98 	bl	800487c <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 800114c:	e08a      	b.n	8001264 <cdcd_control_xfer_cb+0x1ac>
      else if ( stage == CONTROL_STAGE_ACK)
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	2b03      	cmp	r3, #3
 8001152:	f040 8087 	bne.w	8001264 <cdcd_control_xfer_cb+0x1ac>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8001156:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <cdcd_control_xfer_cb+0x1c8>)
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 8083 	beq.w	8001264 <cdcd_control_xfer_cb+0x1ac>
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	1d9a      	adds	r2, r3, #6
 8001162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f3af 8000 	nop.w
    break;
 800116e:	e079      	b.n	8001264 <cdcd_control_xfer_cb+0x1ac>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8001170:	79bb      	ldrb	r3, [r7, #6]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d178      	bne.n	8001268 <cdcd_control_xfer_cb+0x1b0>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	1d9a      	adds	r2, r3, #6
 800117a:	79f8      	ldrb	r0, [r7, #7]
 800117c:	2307      	movs	r3, #7
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	f003 fb7c 	bl	800487c <tud_control_xfer>
      }
    break;
 8001184:	e070      	b.n	8001268 <cdcd_control_xfer_cb+0x1b0>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d105      	bne.n	8001198 <cdcd_control_xfer_cb+0xe0>
      {
        tud_control_status(rhport, request);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	6839      	ldr	r1, [r7, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f003 fb15 	bl	80047c0 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8001196:	e069      	b.n	800126c <cdcd_control_xfer_cb+0x1b4>
      else if (stage == CONTROL_STAGE_ACK)
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d166      	bne.n	800126c <cdcd_control_xfer_cb+0x1b4>
        bool const dtr = tu_bit_test(request->wValue, 0);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	885b      	ldrh	r3, [r3, #2]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	fa22 f303 	lsr.w	r3, r2, r3
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	885b      	ldrh	r3, [r3, #2]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	2301      	movs	r3, #1
 80011cc:	75fb      	strb	r3, [r7, #23]
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf14      	ite	ne
 80011de:	2301      	movne	r3, #1
 80011e0:	2300      	moveq	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	885b      	ldrh	r3, [r3, #2]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80011f8:	7ffb      	ldrb	r3, [r7, #31]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf14      	ite	ne
 80011fe:	2301      	movne	r3, #1
 8001200:	2300      	moveq	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4619      	mov	r1, r3
 8001212:	4610      	mov	r0, r2
 8001214:	f001 ffaf 	bl	8003176 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <cdcd_control_xfer_cb+0x1cc>)
 800121a:	2b00      	cmp	r3, #0
 800121c:	d026      	beq.n	800126c <cdcd_control_xfer_cb+0x1b4>
 800121e:	7fba      	ldrb	r2, [r7, #30]
 8001220:	7ff9      	ldrb	r1, [r7, #31]
 8001222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001226:	4618      	mov	r0, r3
 8001228:	f3af 8000 	nop.w
    break;
 800122c:	e01e      	b.n	800126c <cdcd_control_xfer_cb+0x1b4>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d105      	bne.n	8001240 <cdcd_control_xfer_cb+0x188>
      {
        tud_control_status(rhport, request);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fac1 	bl	80047c0 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 800123e:	e017      	b.n	8001270 <cdcd_control_xfer_cb+0x1b8>
      else if (stage == CONTROL_STAGE_ACK)
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d114      	bne.n	8001270 <cdcd_control_xfer_cb+0x1b8>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <cdcd_control_xfer_cb+0x1d0>)
 8001248:	2b00      	cmp	r3, #0
 800124a:	d011      	beq.n	8001270 <cdcd_control_xfer_cb+0x1b8>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	885b      	ldrh	r3, [r3, #2]
 8001250:	b29a      	uxth	r2, r3
 8001252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f3af 8000 	nop.w
    break;
 800125e:	e007      	b.n	8001270 <cdcd_control_xfer_cb+0x1b8>

    default: return false; // stall unsupported request
 8001260:	2300      	movs	r3, #0
 8001262:	e007      	b.n	8001274 <cdcd_control_xfer_cb+0x1bc>
    break;
 8001264:	bf00      	nop
 8001266:	e004      	b.n	8001272 <cdcd_control_xfer_cb+0x1ba>
    break;
 8001268:	bf00      	nop
 800126a:	e002      	b.n	8001272 <cdcd_control_xfer_cb+0x1ba>
    break;
 800126c:	bf00      	nop
 800126e:	e000      	b.n	8001272 <cdcd_control_xfer_cb+0x1ba>
    break;
 8001270:	bf00      	nop
  }

  return true;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20002594 	.word	0x20002594
	...

0800128c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	460b      	mov	r3, r1
 800129a:	71bb      	strb	r3, [r7, #6]
 800129c:	4613      	mov	r3, r2
 800129e:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	75fb      	strb	r3, [r7, #23]
 80012a4:	e014      	b.n	80012d0 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <cdcd_xfer_cb+0x178>)
 80012b2:	4413      	add	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	78db      	ldrb	r3, [r3, #3]
 80012ba:	79ba      	ldrb	r2, [r7, #6]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d00a      	beq.n	80012d6 <cdcd_xfer_cb+0x4a>
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	79ba      	ldrb	r2, [r7, #6]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d005      	beq.n	80012d6 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	3301      	adds	r3, #1
 80012ce:	75fb      	strb	r3, [r7, #23]
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0e7      	beq.n	80012a6 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00a      	beq.n	80012f2 <cdcd_xfer_cb+0x66>
 80012dc:	4b4a      	ldr	r3, [pc, #296]	; (8001408 <cdcd_xfer_cb+0x17c>)
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d000      	beq.n	80012ee <cdcd_xfer_cb+0x62>
 80012ec:	be00      	bkpt	0x0000
 80012ee:	2300      	movs	r3, #0
 80012f0:	e084      	b.n	80013fc <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	78db      	ldrb	r3, [r3, #3]
 80012f6:	79ba      	ldrb	r2, [r7, #6]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d14a      	bne.n	8001392 <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, (uint16_t) xferred_bytes);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f103 0010 	add.w	r0, r3, #16
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	33b8      	adds	r3, #184	; 0xb8
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	b292      	uxth	r2, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f001 feef 	bl	80030ee <tu_fifo_write_n>
    
    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8001310:	4b3e      	ldr	r3, [pc, #248]	; (800140c <cdcd_xfer_cb+0x180>)
 8001312:	2b00      	cmp	r3, #0
 8001314:	d028      	beq.n	8001368 <cdcd_xfer_cb+0xdc>
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	795b      	ldrb	r3, [r3, #5]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d024      	beq.n	8001368 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e01d      	b.n	8001360 <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	795a      	ldrb	r2, [r3, #5]
 8001328:	6939      	ldr	r1, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	440b      	add	r3, r1
 800132e:	33b8      	adds	r3, #184	; 0xb8
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d111      	bne.n	800135a <cdcd_xfer_cb+0xce>
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	3310      	adds	r3, #16
 800133a:	4618      	mov	r0, r3
 800133c:	f001 fe2f 	bl	8002f9e <tu_fifo_empty>
 8001340:	4603      	mov	r3, r0
 8001342:	f083 0301 	eor.w	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	795a      	ldrb	r2, [r3, #5]
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d3dd      	bcc.n	8001324 <cdcd_xfer_cb+0x98>
        }
      }
    }
    
    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <cdcd_xfer_cb+0x184>)
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00e      	beq.n	800138c <cdcd_xfer_cb+0x100>
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	3310      	adds	r3, #16
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fe13 	bl	8002f9e <tu_fifo_empty>
 8001378:	4603      	mov	r3, r0
 800137a:	f083 0301 	eor.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <cdcd_xfer_cb+0x100>
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	4618      	mov	r0, r3
 8001388:	f3af 8000 	nop.w
    
    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 800138c:	6938      	ldr	r0, [r7, #16]
 800138e:	f7ff fc18 	bl	8000bc2 <_prep_out_transaction>
  }
  
  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	789b      	ldrb	r3, [r3, #2]
 8001396:	79ba      	ldrb	r2, [r7, #6]
 8001398:	429a      	cmp	r2, r3
 800139a:	d12e      	bne.n	80013fa <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <cdcd_xfer_cb+0x188>)
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <cdcd_xfer_cb+0x11e>
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fc87 	bl	8000cc0 <tud_cdc_n_write_flush>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d120      	bne.n	80013fa <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	3324      	adds	r3, #36	; 0x24
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 fdd0 	bl	8002f62 <tu_fifo_count>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d118      	bne.n	80013fa <cdcd_xfer_cb+0x16e>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d015      	beq.n	80013fa <cdcd_xfer_cb+0x16e>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d110      	bne.n	80013fa <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	789a      	ldrb	r2, [r3, #2]
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 f813 	bl	800440c <usbd_edpt_claim>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	7899      	ldrb	r1, [r3, #2]
 80013f0:	79f8      	ldrb	r0, [r7, #7]
 80013f2:	2300      	movs	r3, #0
 80013f4:	2200      	movs	r2, #0
 80013f6:	f003 f85d 	bl	80044b4 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20002594 	.word	0x20002594
 8001408:	e000edf0 	.word	0xe000edf0
	...

08001418 <send_csw>:
{
  return tu_bit_test(dir, 7);
}

static inline bool send_csw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  // Data residue is always = host expect - actual transferred
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142c:	1ad2      	subs	r2, r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28

  p_msc->stage = MSC_STAGE_STATUS_SENT;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2203      	movs	r2, #3
 8001436:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f103 0220 	add.w	r2, r3, #32
 8001446:	79f8      	ldrb	r0, [r7, #7]
 8001448:	230d      	movs	r3, #13
 800144a:	f003 f833 	bl	80044b4 <usbd_edpt_xfer>
 800144e:	4603      	mov	r3, r0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <prepare_cbw>:

static inline bool prepare_cbw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  p_msc->stage = MSC_STAGE_CMD;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	79f8      	ldrb	r0, [r7, #7]
 8001476:	231f      	movs	r3, #31
 8001478:	f003 f81c 	bl	80044b4 <usbd_edpt_xfer>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <fail_scsi_op>:

static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b088      	sub	sp, #32
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	6039      	str	r1, [r7, #0]
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	4613      	mov	r3, r2
 8001494:	71bb      	strb	r3, [r7, #6]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	61fb      	str	r3, [r7, #28]
  msc_csw_t       * p_csw = &p_msc->csw;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3320      	adds	r3, #32
 800149e:	61bb      	str	r3, [r7, #24]

  p_csw->status       = status;
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	79ba      	ldrb	r2, [r7, #6]
 80014a4:	731a      	strb	r2, [r3, #12]
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	1ad2      	subs	r2, r2, r3
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	609a      	str	r2, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  // failed but sense key is not set: default to Illegal Request
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <fail_scsi_op+0x4e>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	7b58      	ldrb	r0, [r3, #13]
 80014ca:	2300      	movs	r3, #0
 80014cc:	2220      	movs	r2, #32
 80014ce:	2105      	movs	r1, #5
 80014d0:	f000 f8d0 	bl	8001674 <tud_msc_set_sense>

  // If there is data stage and not yet complete, stall it
  if ( p_cbw->total_bytes && p_csw->data_residue )
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d028      	beq.n	800152e <fail_scsi_op+0xa8>
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d024      	beq.n	800152e <fail_scsi_op+0xa8>
  {
    if ( is_data_in(p_cbw->dir) )
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	7b1b      	ldrb	r3, [r3, #12]
 80014e8:	75fb      	strb	r3, [r7, #23]
  return tu_bit_test(dir, 7);
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	2307      	movs	r3, #7
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	fa22 f303 	lsr.w	r3, r2, r3
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf14      	ite	ne
 8001502:	2301      	movne	r3, #1
 8001504:	2300      	moveq	r3, #0
 8001506:	b2db      	uxtb	r3, r3
    if ( is_data_in(p_cbw->dir) )
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <fail_scsi_op+0x98>
    {
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f870 	bl	80045fc <usbd_edpt_stall>
    else
    {
      usbd_edpt_stall(rhport, p_msc->ep_out);
    }
  }
}
 800151c:	e007      	b.n	800152e <fail_scsi_op+0xa8>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f003 f867 	bl	80045fc <usbd_edpt_stall>
}
 800152e:	bf00      	nop
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <rdwr10_get_lba>:

static inline uint32_t rdwr10_get_lba(uint8_t const command[])
{
 8001536:	b480      	push	{r7}
 8001538:	b085      	sub	sp, #20
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  // use offsetof to avoid pointer to the odd/unaligned address
  uint32_t const lba = tu_unaligned_read32(command + offsetof(scsi_write10_t, lba));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3302      	adds	r3, #2
 8001542:	60bb      	str	r3, [r7, #8]


#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]

  // lba is in Big Endian
  return tu_ntohl(lba);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	ba1b      	rev	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <rdwr10_get_blockcount>:

static inline uint16_t rdwr10_get_blockcount(msc_cbw_t const* cbw)
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  uint16_t const block_count = tu_unaligned_read16(cbw->command + offsetof(scsi_write10_t, block_count));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	330f      	adds	r3, #15
 8001566:	3307      	adds	r3, #7
 8001568:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	81fb      	strh	r3, [r7, #14]
  return tu_ntohs(block_count);
 8001570:	89fb      	ldrh	r3, [r7, #14]
 8001572:	ba5b      	rev16	r3, r3
 8001574:	b29b      	uxth	r3, r3
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <rdwr10_get_blocksize>:

static inline uint16_t rdwr10_get_blocksize(msc_cbw_t const* cbw)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  // first extract block count in the command
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffe5 	bl	800155a <rdwr10_get_blockcount>
 8001590:	4603      	mov	r3, r0
 8001592:	81fb      	strh	r3, [r7, #14]

  // invalid block count
  if (block_count == 0) return 0;
 8001594:	89fb      	ldrh	r3, [r7, #14]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <rdwr10_get_blocksize+0x1c>
 800159a:	2300      	movs	r3, #0
 800159c:	e005      	b.n	80015aa <rdwr10_get_blocksize+0x28>

  return (uint16_t) (cbw->total_bytes / block_count);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a8:	b29b      	uxth	r3, r3
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <rdwr10_validate_cmd>:

uint8_t rdwr10_validate_cmd(msc_cbw_t const* cbw)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b088      	sub	sp, #32
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  uint8_t status = MSC_CSW_STATUS_PASSED;
 80015ba:	2300      	movs	r3, #0
 80015bc:	77fb      	strb	r3, [r7, #31]
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffcb 	bl	800155a <rdwr10_get_blockcount>
 80015c4:	4603      	mov	r3, r0
 80015c6:	83bb      	strh	r3, [r7, #28]

  if ( cbw->total_bytes == 0 )
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <rdwr10_validate_cmd+0x2a>
  {
    if ( block_count )
 80015d0:	8bbb      	ldrh	r3, [r7, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d048      	beq.n	8001668 <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 2 (Hn < Di) or case 3 (Hn < Do) \r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80015d6:	2302      	movs	r3, #2
 80015d8:	77fb      	strb	r3, [r7, #31]
 80015da:	e045      	b.n	8001668 <rdwr10_validate_cmd+0xb6>
    {
      // no data transfer, only exist in complaint test suite
    }
  }else
  {
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7bdb      	ldrb	r3, [r3, #15]
 80015e0:	2b28      	cmp	r3, #40	; 0x28
 80015e2:	d119      	bne.n	8001618 <rdwr10_validate_cmd+0x66>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7b1b      	ldrb	r3, [r3, #12]
 80015e8:	76fb      	strb	r3, [r7, #27]
  return tu_bit_test(dir, 7);
 80015ea:	7efb      	ldrb	r3, [r7, #27]
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	2307      	movs	r3, #7
 80015f0:	74fb      	strb	r3, [r7, #19]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80015f2:	7cfb      	ldrb	r3, [r7, #19]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf14      	ite	ne
 8001602:	2301      	movne	r3, #1
 8001604:	2300      	moveq	r3, #0
 8001606:	b2db      	uxtb	r3, r3
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 8001608:	f083 0301 	eor.w	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <rdwr10_validate_cmd+0x66>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 10 (Ho <> Di)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8001612:	2302      	movs	r3, #2
 8001614:	77fb      	strb	r3, [r7, #31]
 8001616:	e027      	b.n	8001668 <rdwr10_validate_cmd+0xb6>
    }
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7bdb      	ldrb	r3, [r3, #15]
 800161c:	2b2a      	cmp	r3, #42	; 0x2a
 800161e:	d116      	bne.n	800164e <rdwr10_validate_cmd+0x9c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7b1b      	ldrb	r3, [r3, #12]
 8001624:	74bb      	strb	r3, [r7, #18]
  return tu_bit_test(dir, 7);
 8001626:	7cbb      	ldrb	r3, [r7, #18]
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	2307      	movs	r3, #7
 800162c:	72fb      	strb	r3, [r7, #11]
 800162e:	7afb      	ldrb	r3, [r7, #11]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	bf14      	ite	ne
 800163e:	2301      	movne	r3, #1
 8001640:	2300      	moveq	r3, #0
 8001642:	b2db      	uxtb	r3, r3
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <rdwr10_validate_cmd+0x9c>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 8 (Hi <> Do)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8001648:	2302      	movs	r3, #2
 800164a:	77fb      	strb	r3, [r7, #31]
 800164c:	e00c      	b.n	8001668 <rdwr10_validate_cmd+0xb6>
    }
    else if ( 0 == block_count )
 800164e:	8bbb      	ldrh	r3, [r7, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <rdwr10_validate_cmd+0xa8>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 4 Hi > Dn (READ10) or case 9 Ho > Dn (WRITE10) \r\n");
      status =  MSC_CSW_STATUS_FAILED;
 8001654:	2301      	movs	r3, #1
 8001656:	77fb      	strb	r3, [r7, #31]
 8001658:	e006      	b.n	8001668 <rdwr10_validate_cmd+0xb6>
    }
    else if ( cbw->total_bytes / block_count == 0 )
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	8bbb      	ldrh	r3, [r7, #28]
 8001660:	429a      	cmp	r2, r3
 8001662:	d201      	bcs.n	8001668 <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG(MSC_DEBUG, " Computed block size = 0. SCSI case 7 Hi < Di (READ10) or case 13 Ho < Do (WRIT10)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8001664:	2302      	movs	r3, #2
 8001666:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8001668:	7ffb      	ldrb	r3, [r7, #31]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <tud_msc_set_sense>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
 8001674:	b490      	push	{r4, r7}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4604      	mov	r4, r0
 800167c:	4608      	mov	r0, r1
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	4623      	mov	r3, r4
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	4603      	mov	r3, r0
 8001688:	71bb      	strb	r3, [r7, #6]
 800168a:	460b      	mov	r3, r1
 800168c:	717b      	strb	r3, [r7, #5]
 800168e:	4613      	mov	r3, r2
 8001690:	713b      	strb	r3, [r7, #4]
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <tud_msc_set_sense+0x44>)
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <tud_msc_set_sense+0x44>)
 800169c:	797b      	ldrb	r3, [r7, #5]
 800169e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <tud_msc_set_sense+0x44>)
 80016a4:	793b      	ldrb	r3, [r7, #4]
 80016a6:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e

  return true;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc90      	pop	{r4, r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200026cc 	.word	0x200026cc

080016bc <set_sense_medium_not_present>:

static inline void set_sense_medium_not_present(uint8_t lun)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  // default sense is NOT READY, MEDIUM NOT PRESENT
  tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3A, 0x00);
 80016c6:	79f8      	ldrb	r0, [r7, #7]
 80016c8:	2300      	movs	r3, #0
 80016ca:	223a      	movs	r2, #58	; 0x3a
 80016cc:	2102      	movs	r1, #2
 80016ce:	f7ff ffd1 	bl	8001674 <tud_msc_set_sense>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <mscd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void mscd_init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 80016e0:	2240      	movs	r2, #64	; 0x40
 80016e2:	2100      	movs	r1, #0
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <mscd_init+0x14>)
 80016e6:	f006 f965 	bl	80079b4 <memset>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200026cc 	.word	0x200026cc

080016f4 <mscd_reset>:

void mscd_reset(uint8_t rhport)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	2100      	movs	r1, #0
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <mscd_reset+0x1c>)
 8001704:	f006 f956 	bl	80079b4 <memset>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200026cc 	.word	0x200026cc

08001714 <mscd_open>:

uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af02      	add	r7, sp, #8
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
 8001720:	4613      	mov	r3, r2
 8001722:	80bb      	strh	r3, [r7, #4]
  // only support SCSI's BOT protocol
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	795b      	ldrb	r3, [r3, #5]
 8001728:	2b08      	cmp	r3, #8
 800172a:	d107      	bne.n	800173c <mscd_open+0x28>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	799b      	ldrb	r3, [r3, #6]
 8001730:	2b06      	cmp	r3, #6
 8001732:	d103      	bne.n	800173c <mscd_open+0x28>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	79db      	ldrb	r3, [r3, #7]
 8001738:	2b50      	cmp	r3, #80	; 0x50
 800173a:	d001      	beq.n	8001740 <mscd_open+0x2c>
 800173c:	2300      	movs	r3, #0
 800173e:	e053      	b.n	80017e8 <mscd_open+0xd4>
            MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
            MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol, 0);

  // msc driver length is fixed
  uint16_t const drv_len = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 8001740:	2317      	movs	r3, #23
 8001742:	84fb      	strh	r3, [r7, #38]	; 0x26

  // Max length must be at least 1 interface + 2 endpoints
  TU_ASSERT(max_len >= drv_len, 0);
 8001744:	88ba      	ldrh	r2, [r7, #4]
 8001746:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001748:	429a      	cmp	r2, r3
 800174a:	d20a      	bcs.n	8001762 <mscd_open+0x4e>
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <mscd_open+0xdc>)
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d000      	beq.n	800175e <mscd_open+0x4a>
 800175c:	be00      	bkpt	0x0000
 800175e:	2300      	movs	r3, #0
 8001760:	e042      	b.n	80017e8 <mscd_open+0xd4>

  mscd_interface_t * p_msc = &_mscd_itf;
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <mscd_open+0xe0>)
 8001764:	623b      	str	r3, [r7, #32]
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	789a      	ldrb	r2, [r3, #2]
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1899      	adds	r1, r3, r2

  // Open endpoint pair
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	332f      	adds	r3, #47	; 0x2f
 8001786:	6a3a      	ldr	r2, [r7, #32]
 8001788:	322e      	adds	r2, #46	; 0x2e
 800178a:	79f8      	ldrb	r0, [r7, #7]
 800178c:	9201      	str	r2, [sp, #4]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2302      	movs	r3, #2
 8001792:	2202      	movs	r2, #2
 8001794:	f002 fd8e 	bl	80042b4 <usbd_open_edpt_pair>
 8001798:	4603      	mov	r3, r0
 800179a:	f083 0301 	eor.w	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00a      	beq.n	80017ba <mscd_open+0xa6>
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <mscd_open+0xdc>)
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d000      	beq.n	80017b6 <mscd_open+0xa2>
 80017b4:	be00      	bkpt	0x0000
 80017b6:	2300      	movs	r3, #0
 80017b8:	e016      	b.n	80017e8 <mscd_open+0xd4>

  // Prepare for Command Block Wrapper
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	6a39      	ldr	r1, [r7, #32]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe4a 	bl	8001458 <prepare_cbw>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f083 0301 	eor.w	r3, r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00a      	beq.n	80017e6 <mscd_open+0xd2>
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <mscd_open+0xdc>)
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d000      	beq.n	80017e2 <mscd_open+0xce>
 80017e0:	be00      	bkpt	0x0000
 80017e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e4:	e000      	b.n	80017e8 <mscd_open+0xd4>

  return drv_len;
 80017e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	e000edf0 	.word	0xe000edf0
 80017f4:	200026cc 	.word	0x200026cc

080017f8 <proc_bot_reset>:

static void proc_bot_reset(mscd_interface_t* p_msc)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  p_msc->stage       = MSC_STAGE_CMD;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  p_msc->total_len   = 0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
  p_msc->xferred_len = 0;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	639a      	str	r2, [r3, #56]	; 0x38

  p_msc->sense_key           = 0;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  p_msc->add_sense_code      = 0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  p_msc->add_sense_qualifier = 0;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <mscd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	603a      	str	r2, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
 8001844:	460b      	mov	r3, r1
 8001846:	71bb      	strb	r3, [r7, #6]
  // nothing to do with DATA & ACK stage
  if (stage != CONTROL_STAGE_SETUP) return true;
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d001      	beq.n	8001852 <mscd_control_xfer_cb+0x1a>
 800184e:	2301      	movs	r3, #1
 8001850:	e0e6      	b.n	8001a20 <mscd_control_xfer_cb+0x1e8>

  mscd_interface_t* p_msc = &_mscd_itf;
 8001852:	4b75      	ldr	r3, [pc, #468]	; (8001a28 <mscd_control_xfer_cb+0x1f0>)
 8001854:	61fb      	str	r3, [r7, #28]

  // Clear Endpoint Feature (stall) for recovery
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	f040 8090 	bne.w	8001986 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	b2db      	uxtb	r3, r3
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8001870:	2b02      	cmp	r3, #2
 8001872:	f040 8088 	bne.w	8001986 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	785b      	ldrb	r3, [r3, #1]
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 800187a:	2b01      	cmp	r3, #1
 800187c:	f040 8083 	bne.w	8001986 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_FEATURE_EDPT_HALT == request->wValue )
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	885b      	ldrh	r3, [r3, #2]
 8001884:	b29b      	uxth	r3, r3
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8001886:	2b00      	cmp	r3, #0
 8001888:	d17d      	bne.n	8001986 <mscd_control_xfer_cb+0x14e>
  {
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	889b      	ldrh	r3, [r3, #4]
 800188e:	b29b      	uxth	r3, r3
 8001890:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	76fb      	strb	r3, [r7, #27]

    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d106      	bne.n	80018b0 <mscd_control_xfer_cb+0x78>
    {
      // reset recovery is required to recover from this stage
      // Clear Stall request cannot resolve this -> continue to stall endpoint
      usbd_edpt_stall(rhport, ep_addr);
 80018a2:	7efa      	ldrb	r2, [r7, #27]
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 fea7 	bl	80045fc <usbd_edpt_stall>
 80018ae:	e068      	b.n	8001982 <mscd_control_xfer_cb+0x14a>
    }
    else
    {
      if ( ep_addr == p_msc->ep_in )
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80018b6:	7efa      	ldrb	r2, [r7, #27]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d11a      	bne.n	80018f2 <mscd_control_xfer_cb+0xba>
      {
        if ( p_msc->stage == MSC_STAGE_STATUS )
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d15d      	bne.n	8001982 <mscd_control_xfer_cb+0x14a>
        {
          // resume sending SCSI status if we are in this stage previously before stalled
          TU_ASSERT( send_csw(rhport, p_msc) );
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	69f9      	ldr	r1, [r7, #28]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fda4 	bl	8001418 <send_csw>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f083 0301 	eor.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d052      	beq.n	8001982 <mscd_control_xfer_cb+0x14a>
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <mscd_control_xfer_cb+0x1f4>)
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d000      	beq.n	80018ee <mscd_control_xfer_cb+0xb6>
 80018ec:	be00      	bkpt	0x0000
 80018ee:	2300      	movs	r3, #0
 80018f0:	e096      	b.n	8001a20 <mscd_control_xfer_cb+0x1e8>
        }
      }
      else if ( ep_addr == p_msc->ep_out )
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80018f8:	7efa      	ldrb	r2, [r7, #27]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d141      	bne.n	8001982 <mscd_control_xfer_cb+0x14a>
      {
        if ( p_msc->stage == MSC_STAGE_CMD )
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001904:	2b00      	cmp	r3, #0
 8001906:	d13c      	bne.n	8001982 <mscd_control_xfer_cb+0x14a>
        {
          // part of reset recovery (probably due to invalid CBW) -> prepare for new command
          // Note: skip if already queued previously
          if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	737b      	strb	r3, [r7, #13]
 8001912:	4613      	mov	r3, r2
 8001914:	733b      	strb	r3, [r7, #12]

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 8001916:	7b3a      	ldrb	r2, [r7, #12]
 8001918:	7b7b      	ldrb	r3, [r7, #13]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fe3f 	bl	80045a0 <usbd_edpt_busy>
 8001922:	4603      	mov	r3, r0
 8001924:	f083 0301 	eor.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00d      	beq.n	800194a <mscd_control_xfer_cb+0x112>
 800192e:	7b3a      	ldrb	r2, [r7, #12]
 8001930:	7b7b      	ldrb	r3, [r7, #13]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f002 fef9 	bl	800472c <usbd_edpt_stalled>
 800193a:	4603      	mov	r3, r0
 800193c:	f083 0301 	eor.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <mscd_control_xfer_cb+0x112>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <mscd_control_xfer_cb+0x114>
 800194a:	2300      	movs	r3, #0
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d015      	beq.n	8001982 <mscd_control_xfer_cb+0x14a>
          {
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	69f9      	ldr	r1, [r7, #28]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fd7c 	bl	8001458 <prepare_cbw>
 8001960:	4603      	mov	r3, r0
 8001962:	f083 0301 	eor.w	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00a      	beq.n	8001982 <mscd_control_xfer_cb+0x14a>
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <mscd_control_xfer_cb+0x1f4>)
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d000      	beq.n	800197e <mscd_control_xfer_cb+0x146>
 800197c:	be00      	bkpt	0x0000
 800197e:	2300      	movs	r3, #0
 8001980:	e04e      	b.n	8001a20 <mscd_control_xfer_cb+0x1e8>
          }
        }
      }
    }

    return true;
 8001982:	2301      	movs	r3, #1
 8001984:	e04c      	b.n	8001a20 <mscd_control_xfer_cb+0x1e8>
  }

  // From this point only handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b20      	cmp	r3, #32
 8001992:	d001      	beq.n	8001998 <mscd_control_xfer_cb+0x160>
 8001994:	2300      	movs	r3, #0
 8001996:	e043      	b.n	8001a20 <mscd_control_xfer_cb+0x1e8>

  switch ( request->bRequest )
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	2bfe      	cmp	r3, #254	; 0xfe
 800199e:	d016      	beq.n	80019ce <mscd_control_xfer_cb+0x196>
 80019a0:	2bff      	cmp	r3, #255	; 0xff
 80019a2:	d13a      	bne.n	8001a1a <mscd_control_xfer_cb+0x1e2>
  {
    case MSC_REQ_RESET:
      TU_LOG(MSC_DEBUG, "  MSC BOT Reset\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	885b      	ldrh	r3, [r3, #2]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d104      	bne.n	80019b8 <mscd_control_xfer_cb+0x180>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	88db      	ldrh	r3, [r3, #6]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <mscd_control_xfer_cb+0x184>
 80019b8:	2300      	movs	r3, #0
 80019ba:	e031      	b.n	8001a20 <mscd_control_xfer_cb+0x1e8>

      // driver state reset
      proc_bot_reset(p_msc);
 80019bc:	69f8      	ldr	r0, [r7, #28]
 80019be:	f7ff ff1b 	bl	80017f8 <proc_bot_reset>

      tud_control_status(rhport, request);
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fefa 	bl	80047c0 <tud_control_status>
    break;
 80019cc:	e027      	b.n	8001a1e <mscd_control_xfer_cb+0x1e6>

    case MSC_REQ_GET_MAX_LUN:
    {
      TU_LOG(MSC_DEBUG, "  MSC Get Max Lun\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	885b      	ldrh	r3, [r3, #2]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d104      	bne.n	80019e2 <mscd_control_xfer_cb+0x1aa>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	88db      	ldrh	r3, [r3, #6]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <mscd_control_xfer_cb+0x1ae>
 80019e2:	2300      	movs	r3, #0
 80019e4:	e01c      	b.n	8001a20 <mscd_control_xfer_cb+0x1e8>

      uint8_t maxlun = 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	72fb      	strb	r3, [r7, #11]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <mscd_control_xfer_cb+0x1f8>)
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <mscd_control_xfer_cb+0x1c0>
 80019f0:	f3af 8000 	nop.w
 80019f4:	4603      	mov	r3, r0
 80019f6:	72fb      	strb	r3, [r7, #11]
      TU_VERIFY(maxlun);
 80019f8:	7afb      	ldrb	r3, [r7, #11]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <mscd_control_xfer_cb+0x1ca>
 80019fe:	2300      	movs	r3, #0
 8001a00:	e00e      	b.n	8001a20 <mscd_control_xfer_cb+0x1e8>

      // MAX LUN is minus 1 by specs
      maxlun--;
 8001a02:	7afb      	ldrb	r3, [r7, #11]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	72fb      	strb	r3, [r7, #11]

      tud_control_xfer(rhport, request, &maxlun, 1);
 8001a0a:	f107 020b 	add.w	r2, r7, #11
 8001a0e:	79f8      	ldrb	r0, [r7, #7]
 8001a10:	2301      	movs	r3, #1
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	f002 ff32 	bl	800487c <tud_control_xfer>
    }
    break;
 8001a18:	e001      	b.n	8001a1e <mscd_control_xfer_cb+0x1e6>

    default: return false; // stall unsupported request
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <mscd_control_xfer_cb+0x1e8>
  }

  return true;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200026cc 	.word	0x200026cc
 8001a2c:	e000edf0 	.word	0xe000edf0
 8001a30:	00000000 	.word	0x00000000

08001a34 <mscd_xfer_cb>:

bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b098      	sub	sp, #96	; 0x60
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	460b      	mov	r3, r1
 8001a42:	71bb      	strb	r3, [r7, #6]
 8001a44:	4613      	mov	r3, r2
 8001a46:	717b      	strb	r3, [r7, #5]
  (void) event;

  mscd_interface_t* p_msc = &_mscd_itf;
 8001a48:	4b95      	ldr	r3, [pc, #596]	; (8001ca0 <mscd_xfer_cb+0x26c>)
 8001a4a:	65bb      	str	r3, [r7, #88]	; 0x58
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8001a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a4e:	657b      	str	r3, [r7, #84]	; 0x54
  msc_csw_t       * p_csw = &p_msc->csw;
 8001a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a52:	3320      	adds	r3, #32
 8001a54:	653b      	str	r3, [r7, #80]	; 0x50

  switch (p_msc->stage)
 8001a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	f200 8207 	bhi.w	8001e70 <mscd_xfer_cb+0x43c>
 8001a62:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <mscd_xfer_cb+0x34>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001d05 	.word	0x08001d05
 8001a70:	08001e71 	.word	0x08001e71
 8001a74:	08001ddf 	.word	0x08001ddf
  {
    case MSC_STAGE_CMD:
      //------------- new CBW received -------------//
      // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
      if(ep_addr != p_msc->ep_out) return true;
 8001a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a7e:	79ba      	ldrb	r2, [r7, #6]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <mscd_xfer_cb+0x54>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e247      	b.n	8001f18 <mscd_xfer_cb+0x4e4>

      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b1f      	cmp	r3, #31
 8001a8c:	d104      	bne.n	8001a98 <mscd_xfer_cb+0x64>
 8001a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a84      	ldr	r2, [pc, #528]	; (8001ca4 <mscd_xfer_cb+0x270>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d015      	beq.n	8001ac4 <mscd_xfer_cb+0x90>
      {
        TU_LOG(MSC_DEBUG, "  SCSI CBW is not valid\r\n");

        // BOT 6.6.1 If CBW is not valid stall both endpoints until reset recovery
        p_msc->stage = MSC_STAGE_NEED_RESET;
 8001a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        // invalid CBW stall both endpoints
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8001aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aa2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fda6 	bl	80045fc <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 8001ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ab2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fd9e 	bl	80045fc <usbd_edpt_stall>

        return false;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e229      	b.n	8001f18 <mscd_xfer_cb+0x4e4>
      }

      TU_LOG(MSC_DEBUG, "  SCSI Command [Lun%u]: %s\r\n", p_cbw->lun, tu_lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
      //TU_LOG_MEM(MSC_DEBUG, p_cbw, xferred_bytes, 2);

      p_csw->signature    = MSC_CSW_SIGNATURE;
 8001ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8001ad4:	705a      	strb	r2, [r3, #1]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8001adc:	709a      	strb	r2, [r3, #2]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8001ae4:	70da      	strb	r2, [r3, #3]
      p_csw->tag          = p_cbw->tag;
 8001ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aec:	605a      	str	r2, [r3, #4]
      p_csw->data_residue = 0;
 8001aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af0:	2200      	movs	r2, #0
 8001af2:	721a      	strb	r2, [r3, #8]
 8001af4:	2200      	movs	r2, #0
 8001af6:	725a      	strb	r2, [r3, #9]
 8001af8:	2200      	movs	r2, #0
 8001afa:	729a      	strb	r2, [r3, #10]
 8001afc:	2200      	movs	r2, #0
 8001afe:	72da      	strb	r2, [r3, #11]
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 8001b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b02:	2200      	movs	r2, #0
 8001b04:	731a      	strb	r2, [r3, #12]

      /*------------- Parse command and prepare DATA -------------*/
      p_msc->stage = MSC_STAGE_DATA;
 8001b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 8001b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34
      p_msc->xferred_len = 0;
 8001b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b18:	2200      	movs	r2, #0
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38

      // Read10 or Write10
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1e:	7bdb      	ldrb	r3, [r3, #15]
 8001b20:	2b28      	cmp	r3, #40	; 0x28
 8001b22:	d003      	beq.n	8001b2c <mscd_xfer_cb+0xf8>
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	7bdb      	ldrb	r3, [r3, #15]
 8001b28:	2b2a      	cmp	r3, #42	; 0x2a
 8001b2a:	d12a      	bne.n	8001b82 <mscd_xfer_cb+0x14e>
      {
        uint8_t const status = rdwr10_validate_cmd(p_cbw);
 8001b2c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001b2e:	f7ff fd40 	bl	80015b2 <rdwr10_validate_cmd>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if ( status != MSC_CSW_STATUS_PASSED)
 8001b38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <mscd_xfer_cb+0x11c>
        {
          fail_scsi_op(rhport, p_msc, status);
 8001b40:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fc9c 	bl	8001486 <fail_scsi_op>
      {
 8001b4e:	e0d8      	b.n	8001d02 <mscd_xfer_cb+0x2ce>
        }else if ( p_cbw->total_bytes )
 8001b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00f      	beq.n	8001b78 <mscd_xfer_cb+0x144>
        {
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8001b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5a:	7bdb      	ldrb	r3, [r3, #15]
 8001b5c:	2b28      	cmp	r3, #40	; 0x28
 8001b5e:	d105      	bne.n	8001b6c <mscd_xfer_cb+0x138>
          {
            proc_read10_cmd(rhport, p_msc);
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fbfb 	bl	8002360 <proc_read10_cmd>
      {
 8001b6a:	e0ca      	b.n	8001d02 <mscd_xfer_cb+0x2ce>
          }else
          {
            proc_write10_cmd(rhport, p_msc);
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fc89 	bl	8002488 <proc_write10_cmd>
      {
 8001b76:	e0c4      	b.n	8001d02 <mscd_xfer_cb+0x2ce>
          }
        }else
        {
          // no data transfer, only exist in complaint test suite
          p_msc->stage = MSC_STAGE_STATUS;
 8001b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      {
 8001b80:	e0bf      	b.n	8001d02 <mscd_xfer_cb+0x2ce>
      else
      {
        // For other SCSI commands
        // 1. OUT : queue transfer (invoke app callback after done)
        // 2. IN & Zero: Process if is built-in, else Invoke app callback. Skip DATA if zero length
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8001b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d042      	beq.n	8001c10 <mscd_xfer_cb+0x1dc>
 8001b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8c:	7b1b      	ldrb	r3, [r3, #12]
 8001b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  return tu_bit_test(dir, 7);
 8001b92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b98:	2307      	movs	r3, #7
 8001b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8001b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf14      	ite	ne
 8001bb0:	2301      	movne	r3, #1
 8001bb2:	2300      	moveq	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8001bb6:	f083 0301 	eor.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d027      	beq.n	8001c10 <mscd_xfer_cb+0x1dc>
        {
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc8:	d906      	bls.n	8001bd8 <mscd_xfer_cb+0x1a4>
          {
            TU_LOG(MSC_DEBUG, "  SCSI reject non READ10/WRITE10 with large data\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fc58 	bl	8001486 <fail_scsi_op>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8001bd6:	e093      	b.n	8001d00 <mscd_xfer_cb+0x2cc>
          }else
          {
            // Didn't check for case 9 (Ho > Dn), which requires examining scsi command first
            // but it is OK to just receive data then responded with failed status
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 8001bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bda:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8001bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	79f8      	ldrb	r0, [r7, #7]
 8001be6:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <mscd_xfer_cb+0x274>)
 8001be8:	f002 fc64 	bl	80044b4 <usbd_edpt_xfer>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f083 0301 	eor.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8083 	beq.w	8001d00 <mscd_xfer_cb+0x2cc>
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <mscd_xfer_cb+0x278>)
 8001bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8001bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d000      	beq.n	8001c0c <mscd_xfer_cb+0x1d8>
 8001c0a:	be00      	bkpt	0x0000
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e183      	b.n	8001f18 <mscd_xfer_cb+0x4e4>
          }
        }else
        {
          // First process if it is a built-in commands
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 8001c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c12:	7b58      	ldrb	r0, [r3, #13]
 8001c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c16:	f103 010f 	add.w	r1, r3, #15
 8001c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <mscd_xfer_cb+0x274>)
 8001c20:	f000 f988 	bl	8001f34 <proc_builtin_scsi>
 8001c24:	65f8      	str	r0, [r7, #92]	; 0x5c

          // Invoke user callback if not built-in
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 8001c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da10      	bge.n	8001c4e <mscd_xfer_cb+0x21a>
 8001c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10b      	bne.n	8001c4e <mscd_xfer_cb+0x21a>
          {
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8001c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c38:	7b58      	ldrb	r0, [r3, #13]
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	f103 010f 	add.w	r1, r3, #15
 8001c40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <mscd_xfer_cb+0x274>)
 8001c48:	f7fe fe06 	bl	8000858 <tud_msc_scsi_cb>
 8001c4c:	65f8      	str	r0, [r7, #92]	; 0x5c
          }

          if ( resplen < 0 )
 8001c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	da06      	bge.n	8001c62 <mscd_xfer_cb+0x22e>
          {
            // unsupported command
            TU_LOG(MSC_DEBUG, "  SCSI unsupported or failed command\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	2201      	movs	r2, #1
 8001c58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fc13 	bl	8001486 <fail_scsi_op>
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
            }
          }
        }
      }
    break;
 8001c60:	e108      	b.n	8001e74 <mscd_xfer_cb+0x440>
          else if (resplen == 0)
 8001c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10f      	bne.n	8001c88 <mscd_xfer_cb+0x254>
            if (p_cbw->total_bytes)
 8001c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <mscd_xfer_cb+0x24a>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2201      	movs	r2, #1
 8001c74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fc05 	bl	8001486 <fail_scsi_op>
    break;
 8001c7c:	e0fa      	b.n	8001e74 <mscd_xfer_cb+0x440>
              p_msc->stage = MSC_STAGE_STATUS;
 8001c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c80:	2202      	movs	r2, #2
 8001c82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 8001c86:	e0f5      	b.n	8001e74 <mscd_xfer_cb+0x440>
            if ( p_cbw->total_bytes == 0 )
 8001c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10f      	bne.n	8001cb0 <mscd_xfer_cb+0x27c>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2201      	movs	r2, #1
 8001c94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fbf5 	bl	8001486 <fail_scsi_op>
    break;
 8001c9c:	e0ea      	b.n	8001e74 <mscd_xfer_cb+0x440>
 8001c9e:	bf00      	nop
 8001ca0:	200026cc 	.word	0x200026cc
 8001ca4:	43425355 	.word	0x43425355
 8001ca8:	2000270c 	.word	0x2000270c
 8001cac:	e000edf0 	.word	0xe000edf0
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 8001cb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	627a      	str	r2, [r7, #36]	; 0x24
 8001cb8:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8001cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	bf28      	it	cs
 8001cc2:	461a      	movcs	r2, r3
 8001cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 8001cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cca:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8001cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	79f8      	ldrb	r0, [r7, #7]
 8001cd6:	4a92      	ldr	r2, [pc, #584]	; (8001f20 <mscd_xfer_cb+0x4ec>)
 8001cd8:	f002 fbec 	bl	80044b4 <usbd_edpt_xfer>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f083 0301 	eor.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80c5 	beq.w	8001e74 <mscd_xfer_cb+0x440>
 8001cea:	4b8e      	ldr	r3, [pc, #568]	; (8001f24 <mscd_xfer_cb+0x4f0>)
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d000      	beq.n	8001cfc <mscd_xfer_cb+0x2c8>
 8001cfa:	be00      	bkpt	0x0000
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e10b      	b.n	8001f18 <mscd_xfer_cb+0x4e4>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8001d00:	bf00      	nop
    break;
 8001d02:	e0b7      	b.n	8001e74 <mscd_xfer_cb+0x440>

    case MSC_STAGE_DATA:
      TU_LOG(MSC_DEBUG, "  SCSI Data [Lun%u]\r\n", p_cbw->lun);
      //TU_LOG_MEM(MSC_DEBUG, _mscd_buf, xferred_bytes, 2);

      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	7bdb      	ldrb	r3, [r3, #15]
 8001d08:	2b28      	cmp	r3, #40	; 0x28
 8001d0a:	d116      	bne.n	8001d3a <mscd_xfer_cb+0x306>
      {
        p_msc->xferred_len += xferred_bytes;
 8001d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	441a      	add	r2, r3
 8001d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d16:	639a      	str	r2, [r3, #56]	; 0x38

        if ( p_msc->xferred_len >= p_msc->total_len )
 8001d18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d304      	bcc.n	8001d2e <mscd_xfer_cb+0x2fa>
        {
          // Data Stage is complete
          p_msc->stage = MSC_STAGE_STATUS;
 8001d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        {
          // This scenario with command that take more than one transfer is already rejected at Command stage
          TU_BREAKPOINT();
        }
      }
    break;
 8001d2c:	e0a4      	b.n	8001e78 <mscd_xfer_cb+0x444>
          proc_read10_cmd(rhport, p_msc);
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fb14 	bl	8002360 <proc_read10_cmd>
    break;
 8001d38:	e09e      	b.n	8001e78 <mscd_xfer_cb+0x444>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3c:	7bdb      	ldrb	r3, [r3, #15]
 8001d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8001d40:	d106      	bne.n	8001d50 <mscd_xfer_cb+0x31c>
        proc_write10_new_data(rhport, p_msc, xferred_bytes);
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fbf5 	bl	8002538 <proc_write10_new_data>
    break;
 8001d4e:	e093      	b.n	8001e78 <mscd_xfer_cb+0x444>
        p_msc->xferred_len += xferred_bytes;
 8001d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	441a      	add	r2, r3
 8001d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5e:	7b1b      	ldrb	r3, [r3, #12]
 8001d60:	77fb      	strb	r3, [r7, #31]
  return tu_bit_test(dir, 7);
 8001d62:	7ffb      	ldrb	r3, [r7, #31]
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	2307      	movs	r3, #7
 8001d68:	75fb      	strb	r3, [r7, #23]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf14      	ite	ne
 8001d7a:	2301      	movne	r3, #1
 8001d7c:	2300      	moveq	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
        if ( !is_data_in(p_cbw->dir) )
 8001d80:	f083 0301 	eor.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d014      	beq.n	8001db4 <mscd_xfer_cb+0x380>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8001d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8c:	7b58      	ldrb	r0, [r3, #13]
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d90:	f103 010f 	add.w	r1, r3, #15
 8001d94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4a61      	ldr	r2, [pc, #388]	; (8001f20 <mscd_xfer_cb+0x4ec>)
 8001d9c:	f7fe fd5c 	bl	8000858 <tud_msc_scsi_cb>
 8001da0:	64b8      	str	r0, [r7, #72]	; 0x48
          if ( cb_result < 0 )
 8001da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	da05      	bge.n	8001db4 <mscd_xfer_cb+0x380>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	2201      	movs	r2, #1
 8001dac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fb69 	bl	8001486 <fail_scsi_op>
        if ( p_msc->xferred_len >= p_msc->total_len )
 8001db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d304      	bcc.n	8001dca <mscd_xfer_cb+0x396>
          p_msc->stage = MSC_STAGE_STATUS;
 8001dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 8001dc8:	e056      	b.n	8001e78 <mscd_xfer_cb+0x444>
          TU_BREAKPOINT();
 8001dca:	4b56      	ldr	r3, [pc, #344]	; (8001f24 <mscd_xfer_cb+0x4f0>)
 8001dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8001dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d04e      	beq.n	8001e78 <mscd_xfer_cb+0x444>
 8001dda:	be00      	bkpt	0x0000
    break;
 8001ddc:	e04c      	b.n	8001e78 <mscd_xfer_cb+0x444>
      // processed immediately after this switch, supposedly to be empty
    break;

    case MSC_STAGE_STATUS_SENT:
      // Wait for the Status phase to complete
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 8001dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001de4:	79ba      	ldrb	r2, [r7, #6]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d148      	bne.n	8001e7c <mscd_xfer_cb+0x448>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b0d      	cmp	r3, #13
 8001dee:	d145      	bne.n	8001e7c <mscd_xfer_cb+0x448>
        // TU_LOG_MEM(MSC_DEBUG, p_csw, xferred_bytes, 2);

        // Invoke complete callback if defined
        // Note: There is racing issue with samd51 + qspi flash testing with arduino
        // if complete_cb() is invoked after queuing the status.
        switch(p_cbw->command[0])
 8001df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df2:	7bdb      	ldrb	r3, [r3, #15]
 8001df4:	2b28      	cmp	r3, #40	; 0x28
 8001df6:	d002      	beq.n	8001dfe <mscd_xfer_cb+0x3ca>
 8001df8:	2b2a      	cmp	r3, #42	; 0x2a
 8001dfa:	d009      	beq.n	8001e10 <mscd_xfer_cb+0x3dc>
 8001dfc:	e011      	b.n	8001e22 <mscd_xfer_cb+0x3ee>
        {
          case SCSI_CMD_READ_10:
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <mscd_xfer_cb+0x4f4>)
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01a      	beq.n	8001e3a <mscd_xfer_cb+0x406>
 8001e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e06:	7b5b      	ldrb	r3, [r3, #13]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f3af 8000 	nop.w
          break;
 8001e0e:	e014      	b.n	8001e3a <mscd_xfer_cb+0x406>

          case SCSI_CMD_WRITE_10:
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 8001e10:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <mscd_xfer_cb+0x4f8>)
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d013      	beq.n	8001e3e <mscd_xfer_cb+0x40a>
 8001e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e18:	7b5b      	ldrb	r3, [r3, #13]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f3af 8000 	nop.w
          break;
 8001e20:	e00d      	b.n	8001e3e <mscd_xfer_cb+0x40a>

          default:
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <mscd_xfer_cb+0x4fc>)
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00c      	beq.n	8001e42 <mscd_xfer_cb+0x40e>
 8001e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2a:	7b5a      	ldrb	r2, [r3, #13]
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2e:	330f      	adds	r3, #15
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f3af 8000 	nop.w
          break;
 8001e38:	e003      	b.n	8001e42 <mscd_xfer_cb+0x40e>
          break;
 8001e3a:	bf00      	nop
 8001e3c:	e002      	b.n	8001e44 <mscd_xfer_cb+0x410>
          break;
 8001e3e:	bf00      	nop
 8001e40:	e000      	b.n	8001e44 <mscd_xfer_cb+0x410>
          break;
 8001e42:	bf00      	nop
        }

        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fb05 	bl	8001458 <prepare_cbw>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f083 0301 	eor.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d010      	beq.n	8001e7c <mscd_xfer_cb+0x448>
 8001e5a:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <mscd_xfer_cb+0x4f0>)
 8001e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d000      	beq.n	8001e6c <mscd_xfer_cb+0x438>
 8001e6a:	be00      	bkpt	0x0000
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e053      	b.n	8001f18 <mscd_xfer_cb+0x4e4>
        // Any xfer ended here is consider unknown error, ignore it
        TU_LOG1("  Warning expect SCSI Status but received unknown data\r\n");
      }
    break;

    default : break;
 8001e70:	bf00      	nop
 8001e72:	e004      	b.n	8001e7e <mscd_xfer_cb+0x44a>
    break;
 8001e74:	bf00      	nop
 8001e76:	e002      	b.n	8001e7e <mscd_xfer_cb+0x44a>
    break;
 8001e78:	bf00      	nop
 8001e7a:	e000      	b.n	8001e7e <mscd_xfer_cb+0x44a>
    break;
 8001e7c:	bf00      	nop
  }

  if ( p_msc->stage == MSC_STAGE_STATUS )
 8001e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d146      	bne.n	8001f16 <mscd_xfer_cb+0x4e2>
  {
    // skip status if epin is currently stalled, will do it when received Clear Stall request
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 8001e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e8a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 fc4a 	bl	800472c <usbd_edpt_stalled>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d038      	beq.n	8001f16 <mscd_xfer_cb+0x4e2>
    {
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d91c      	bls.n	8001eea <mscd_xfer_cb+0x4b6>
 8001eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb2:	7b1b      	ldrb	r3, [r3, #12]
 8001eb4:	75bb      	strb	r3, [r7, #22]
  return tu_bit_test(dir, 7);
 8001eb6:	7dbb      	ldrb	r3, [r7, #22]
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	2307      	movs	r3, #7
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <mscd_xfer_cb+0x4b6>
      {
        // 6.7 The 13 Cases: case 5 (Hi > Di): STALL before status
        // TU_LOG(MSC_DEBUG, "  SCSI case 5 (Hi > Di): %lu > %lu\r\n", p_cbw->total_bytes, p_msc->xferred_len);
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8001ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eda:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fb8a 	bl	80045fc <usbd_edpt_stall>
 8001ee8:	e015      	b.n	8001f16 <mscd_xfer_cb+0x4e2>
      }else
      {
        TU_ASSERT( send_csw(rhport, p_msc) );
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fa92 	bl	8001418 <send_csw>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f083 0301 	eor.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <mscd_xfer_cb+0x4e2>
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <mscd_xfer_cb+0x4f0>)
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
 8001f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d000      	beq.n	8001f12 <mscd_xfer_cb+0x4de>
 8001f10:	be00      	bkpt	0x0000
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <mscd_xfer_cb+0x4e4>
      send_csw(rhport, p_msc);
    }
    #endif
  }

  return true;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3760      	adds	r7, #96	; 0x60
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000270c 	.word	0x2000270c
 8001f24:	e000edf0 	.word	0xe000edf0
	...

08001f34 <proc_builtin_scsi>:
 *------------------------------------------------------------------*/

// return response's length (copied to buffer). Negative if it is not an built-in command or indicate Failed status (CSW)
// In case of a failed status, sense key must be set for reason of failure
static int32_t proc_builtin_scsi(uint8_t lun, uint8_t const scsi_cmd[16], uint8_t* buffer, uint32_t bufsize)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b0a3      	sub	sp, #140	; 0x8c
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
  (void) bufsize; // TODO refractor later
  int32_t resplen;

  mscd_interface_t* p_msc = &_mscd_itf;
 8001f44:	4bb4      	ldr	r3, [pc, #720]	; (8002218 <proc_builtin_scsi+0x2e4>)
 8001f46:	67fb      	str	r3, [r7, #124]	; 0x7c

  switch ( scsi_cmd[0] )
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b25      	cmp	r3, #37	; 0x25
 8001f4e:	f200 81f4 	bhi.w	800233a <proc_builtin_scsi+0x406>
 8001f52:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <proc_builtin_scsi+0x24>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001ff1 	.word	0x08001ff1
 8001f5c:	0800233b 	.word	0x0800233b
 8001f60:	0800233b 	.word	0x0800233b
 8001f64:	080022a3 	.word	0x080022a3
 8001f68:	0800233b 	.word	0x0800233b
 8001f6c:	0800233b 	.word	0x0800233b
 8001f70:	0800233b 	.word	0x0800233b
 8001f74:	0800233b 	.word	0x0800233b
 8001f78:	0800233b 	.word	0x0800233b
 8001f7c:	0800233b 	.word	0x0800233b
 8001f80:	0800233b 	.word	0x0800233b
 8001f84:	0800233b 	.word	0x0800233b
 8001f88:	0800233b 	.word	0x0800233b
 8001f8c:	0800233b 	.word	0x0800233b
 8001f90:	0800233b 	.word	0x0800233b
 8001f94:	0800233b 	.word	0x0800233b
 8001f98:	0800233b 	.word	0x0800233b
 8001f9c:	0800233b 	.word	0x0800233b
 8001fa0:	08002187 	.word	0x08002187
 8001fa4:	0800233b 	.word	0x0800233b
 8001fa8:	0800233b 	.word	0x0800233b
 8001fac:	0800233b 	.word	0x0800233b
 8001fb0:	0800233b 	.word	0x0800233b
 8001fb4:	0800233b 	.word	0x0800233b
 8001fb8:	0800233b 	.word	0x0800233b
 8001fbc:	0800233b 	.word	0x0800233b
 8001fc0:	08002221 	.word	0x08002221
 8001fc4:	0800202b 	.word	0x0800202b
 8001fc8:	0800233b 	.word	0x0800233b
 8001fcc:	0800233b 	.word	0x0800233b
 8001fd0:	0800233b 	.word	0x0800233b
 8001fd4:	0800233b 	.word	0x0800233b
 8001fd8:	0800233b 	.word	0x0800233b
 8001fdc:	0800233b 	.word	0x0800233b
 8001fe0:	0800233b 	.word	0x0800233b
 8001fe4:	08002109 	.word	0x08002109
 8001fe8:	0800233b 	.word	0x0800233b
 8001fec:	080020a3 	.word	0x080020a3
  {
    case SCSI_CMD_TEST_UNIT_READY:
      resplen = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      if ( !tud_msc_test_unit_ready_cb(lun) )
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fb91 	bl	8000720 <tud_msc_test_unit_ready_cb>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f083 0301 	eor.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 819c 	beq.w	8002344 <proc_builtin_scsi+0x410>
      {
        // Failed status response
        resplen = - 1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
 8002010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8002014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 8192 	bne.w	8002344 <proc_builtin_scsi+0x410>
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fb4a 	bl	80016bc <set_sense_medium_not_present>
      }
    break;
 8002028:	e18c      	b.n	8002344 <proc_builtin_scsi+0x410>

    case SCSI_CMD_START_STOP_UNIT:
      resplen = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      if (tud_msc_start_stop_cb)
 8002030:	4b7a      	ldr	r3, [pc, #488]	; (800221c <proc_builtin_scsi+0x2e8>)
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8188 	beq.w	8002348 <proc_builtin_scsi+0x414>
      {
        scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	677b      	str	r3, [r7, #116]	; 0x74
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 800203c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203e:	791b      	ldrb	r3, [r3, #4]
 8002040:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002044:	b2db      	uxtb	r3, r3
 8002046:	4619      	mov	r1, r3
 8002048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204a:	791b      	ldrb	r3, [r3, #4]
 800204c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2da      	uxtb	r2, r3
 800205c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800205e:	791b      	ldrb	r3, [r3, #4]
 8002060:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	7bf8      	ldrb	r0, [r7, #15]
 8002072:	f7fe fb81 	bl	8000778 <tud_msc_start_stop_cb>
 8002076:	4603      	mov	r3, r0
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8162 	beq.w	8002348 <proc_builtin_scsi+0x414>
        {
          // Failed status response
          resplen = - 1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
 8002088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

          // set default sense if not set by callback
          if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800208c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800208e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 8158 	bne.w	8002348 <proc_builtin_scsi+0x414>
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fb0e 	bl	80016bc <set_sense_medium_not_present>
        }
      }
    break;
 80020a0:	e152      	b.n	8002348 <proc_builtin_scsi+0x414>
    {
      uint32_t block_count;
      uint32_t block_size;
      uint16_t block_size_u16;

      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 80020a2:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 80020a6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fb4f 	bl	8000750 <tud_msc_capacity_cb>
      block_size = (uint32_t) block_size_u16;
 80020b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80020b6:	67bb      	str	r3, [r7, #120]	; 0x78

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 80020b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <proc_builtin_scsi+0x190>
 80020be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <proc_builtin_scsi+0x1ac>
      {
        resplen = -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
 80020c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 80020cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d117      	bne.n	8002106 <proc_builtin_scsi+0x1d2>
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff faef 	bl	80016bc <set_sense_medium_not_present>
 80020de:	e012      	b.n	8002106 <proc_builtin_scsi+0x1d2>
      }else
      {
        scsi_read_capacity10_resp_t read_capa10;

        read_capa10.last_lba   = tu_htonl(block_count-1);
 80020e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e2:	3b01      	subs	r3, #1
 80020e4:	ba1b      	rev	r3, r3
 80020e6:	667b      	str	r3, [r7, #100]	; 0x64
        read_capa10.block_size = tu_htonl(block_size);
 80020e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ea:	ba1b      	rev	r3, r3
 80020ec:	66bb      	str	r3, [r7, #104]	; 0x68

        resplen = sizeof(read_capa10);
 80020ee:	2308      	movs	r3, #8
 80020f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        memcpy(buffer, &read_capa10, (size_t) resplen);
 80020f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020fc:	4619      	mov	r1, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f005 fc30 	bl	8007964 <memcpy>
      }
    }
    break;
 8002104:	e121      	b.n	800234a <proc_builtin_scsi+0x416>
 8002106:	e120      	b.n	800234a <proc_builtin_scsi+0x416>

    case SCSI_CMD_READ_FORMAT_CAPACITY:
    {
      scsi_read_format_capacity_data_t read_fmt_capa =
 8002108:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	2308      	movs	r3, #8
 8002116:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800211a:	2302      	movs	r3, #2
 800211c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
      };

      uint32_t block_count;
      uint16_t block_size;

      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8002120:	f107 0252 	add.w	r2, r7, #82	; 0x52
 8002124:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fb10 	bl	8000750 <tud_msc_capacity_cb>

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8002130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <proc_builtin_scsi+0x20a>
 8002136:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10d      	bne.n	800215a <proc_builtin_scsi+0x226>
      {
        resplen = -1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8002146:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d119      	bne.n	8002184 <proc_builtin_scsi+0x250>
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fab2 	bl	80016bc <set_sense_medium_not_present>
 8002158:	e014      	b.n	8002184 <proc_builtin_scsi+0x250>
      }else
      {
        read_fmt_capa.block_num = tu_htonl(block_count);
 800215a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215c:	ba1b      	rev	r3, r3
 800215e:	65fb      	str	r3, [r7, #92]	; 0x5c
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 8002160:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002164:	ba5b      	rev16	r3, r3
 8002166:	b29b      	uxth	r3, r3
 8002168:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        resplen = sizeof(read_fmt_capa);
 800216c:	230c      	movs	r3, #12
 800216e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        memcpy(buffer, &read_fmt_capa, (size_t) resplen);
 8002172:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800217a:	4619      	mov	r1, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f005 fbf1 	bl	8007964 <memcpy>
      }
    }
    break;
 8002182:	e0e2      	b.n	800234a <proc_builtin_scsi+0x416>
 8002184:	e0e1      	b.n	800234a <proc_builtin_scsi+0x416>

    case SCSI_CMD_INQUIRY:
    {
      scsi_inquiry_resp_t inquiry_rsp =
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	2224      	movs	r2, #36	; 0x24
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f005 fc10 	bl	80079b4 <memset>
 8002194:	7d7b      	ldrb	r3, [r7, #21]
 8002196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800219a:	757b      	strb	r3, [r7, #21]
 800219c:	2302      	movs	r3, #2
 800219e:	75bb      	strb	r3, [r7, #22]
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f362 0303 	bfi	r3, r2, #0, #4
 80021a8:	75fb      	strb	r3, [r7, #23]
 80021aa:	231f      	movs	r3, #31
 80021ac:	763b      	strb	r3, [r7, #24]
          .response_data_format = 2,
          .additional_length    = sizeof(scsi_inquiry_resp_t) - 5,
      };

      // vendor_id, product_id, product_rev is space padded string
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	3308      	adds	r3, #8
 80021b4:	2208      	movs	r2, #8
 80021b6:	2120      	movs	r1, #32
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 fbfb 	bl	80079b4 <memset>
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	3310      	adds	r3, #16
 80021c4:	2210      	movs	r2, #16
 80021c6:	2120      	movs	r1, #32
 80021c8:	4618      	mov	r0, r3
 80021ca:	f005 fbf3 	bl	80079b4 <memset>
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	3320      	adds	r3, #32
 80021d4:	2204      	movs	r2, #4
 80021d6:	2120      	movs	r1, #32
 80021d8:	4618      	mov	r0, r3
 80021da:	f005 fbeb 	bl	80079b4 <memset>

      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	f103 0420 	add.w	r4, r3, #32
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	f103 0210 	add.w	r2, r3, #16
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	f103 0108 	add.w	r1, r3, #8
 80021f6:	7bf8      	ldrb	r0, [r7, #15]
 80021f8:	4623      	mov	r3, r4
 80021fa:	f7fe fa4b 	bl	8000694 <tud_msc_inquiry_cb>

      resplen = sizeof(inquiry_rsp);
 80021fe:	2324      	movs	r3, #36	; 0x24
 8002200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &inquiry_rsp, (size_t) resplen);
 8002204:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f005 fba8 	bl	8007964 <memcpy>
    }
    break;
 8002214:	e099      	b.n	800234a <proc_builtin_scsi+0x416>
 8002216:	bf00      	nop
 8002218:	200026cc 	.word	0x200026cc
 800221c:	08000779 	.word	0x08000779

    case SCSI_CMD_MODE_SENSE_6:
    {
      scsi_mode_sense6_resp_t mode_resp =
 8002220:	2303      	movs	r3, #3
 8002222:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8002226:	2300      	movs	r3, #0
 8002228:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800222c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002230:	f36f 0306 	bfc	r3, #0, #7
 8002234:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002238:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800223c:	f36f 13c7 	bfc	r3, #7, #1
 8002240:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002244:	2300      	movs	r3, #0
 8002246:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          .write_protected      = false,
          .reserved             = 0,
          .block_descriptor_len = 0  // no block descriptor are included
      };

      bool writable = true;
 800224a:	2301      	movs	r3, #1
 800224c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      if ( tud_msc_is_writable_cb )
 8002250:	4b41      	ldr	r3, [pc, #260]	; (8002358 <proc_builtin_scsi+0x424>)
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <proc_builtin_scsi+0x330>
      {
        writable = tud_msc_is_writable_cb(lun);
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe facf 	bl	80007fc <tud_msc_is_writable_cb>
 800225e:	4603      	mov	r3, r0
 8002260:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      }

      mode_resp.write_protected = !writable;
 8002264:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f083 0301 	eor.w	r3, r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	b2da      	uxtb	r2, r3
 800227e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002282:	f362 13c7 	bfi	r3, r2, #7, #1
 8002286:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

      resplen = sizeof(mode_resp);
 800228a:	2304      	movs	r3, #4
 800228c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &mode_resp, (size_t) resplen);
 8002290:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002294:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002298:	4619      	mov	r1, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f005 fb62 	bl	8007964 <memcpy>
    }
    break;
 80022a0:	e053      	b.n	800234a <proc_builtin_scsi+0x416>

    case SCSI_CMD_REQUEST_SENSE:
    {
      scsi_sense_fixed_resp_t sense_rsp =
 80022a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	821a      	strh	r2, [r3, #16]
 80022b2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80022b6:	2270      	movs	r2, #112	; 0x70
 80022b8:	f362 0306 	bfi	r3, r2, #0, #7
 80022bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80022c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80022c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      {
          .response_code = 0x70, // current, fixed format
          .valid         = 1
      };

      sense_rsp.add_sense_len       = sizeof(scsi_sense_fixed_resp_t) - 8;
 80022cc:	230a      	movs	r3, #10
 80022ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 80022d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80022e2:	f362 0303 	bfi	r3, r2, #0, #4
 80022e6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 80022ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      sense_rsp.add_sense_qualifier = p_msc->add_sense_qualifier;
 80022f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022fa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

      resplen = sizeof(sense_rsp);
 80022fe:	2312      	movs	r3, #18
 8002300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &sense_rsp, (size_t) resplen);
 8002304:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002308:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f005 fb28 	bl	8007964 <memcpy>

      // request sense callback could overwrite the sense data
      if (tud_msc_request_sense_cb)
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <proc_builtin_scsi+0x428>)
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <proc_builtin_scsi+0x3f8>
      {
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t) bufsize);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b29a      	uxth	r2, r3
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4618      	mov	r0, r3
 8002324:	f3af 8000 	nop.w
 8002328:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      }

      // Clear sense data after copy
      tud_msc_set_sense(lun, 0, 0, 0);
 800232c:	7bf8      	ldrb	r0, [r7, #15]
 800232e:	2300      	movs	r3, #0
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	f7ff f99e 	bl	8001674 <tud_msc_set_sense>
    }
    break;
 8002338:	e007      	b.n	800234a <proc_builtin_scsi+0x416>

    default: resplen = -1; break;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002342:	e002      	b.n	800234a <proc_builtin_scsi+0x416>
    break;
 8002344:	bf00      	nop
 8002346:	e000      	b.n	800234a <proc_builtin_scsi+0x416>
    break;
 8002348:	bf00      	nop
  }

  return resplen;
 800234a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 800234e:	4618      	mov	r0, r3
 8002350:	378c      	adds	r7, #140	; 0x8c
 8002352:	46bd      	mov	sp, r7
 8002354:	bd90      	pop	{r4, r7, pc}
 8002356:	bf00      	nop
 8002358:	080007fd 	.word	0x080007fd
 800235c:	00000000 	.word	0x00000000

08002360 <proc_read10_cmd>:

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b092      	sub	sp, #72	; 0x48
 8002364:	af02      	add	r7, sp, #8
 8002366:	4603      	mov	r3, r0
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 8002370:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002372:	f7ff f906 	bl	8001582 <rdwr10_get_blocksize>
 8002376:	4603      	mov	r3, r0
 8002378:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 800237a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237c:	330f      	adds	r3, #15
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f8d9 	bl	8001536 <rdwr10_get_lba>
 8002384:	4601      	mov	r1, r0
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800238a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	440b      	add	r3, r1
 8002392:	637b      	str	r3, [r7, #52]	; 0x34

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 8002394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a2:	627a      	str	r2, [r7, #36]	; 0x24
 80023a4:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 80023a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	4293      	cmp	r3, r2
 80023ac:	bf28      	it	cs
 80023ae:	4613      	movcs	r3, r2
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80023b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80023bc:	fb01 f202 	mul.w	r2, r1, r2
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 80023c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c6:	7b58      	ldrb	r0, [r3, #13]
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <proc_read10_cmd+0x120>)
 80023ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023d2:	f7fe f9f1 	bl	80007b8 <tud_msc_read10_cb>
 80023d6:	6338      	str	r0, [r7, #48]	; 0x30

  if ( nbytes < 0 )
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	2b00      	cmp	r3, #0
 80023dc:	da0b      	bge.n	80023f6 <proc_read10_cmd+0x96>
  {
    // negative means error -> endpoint is stalled & status in CSW set to failed
    TU_LOG(MSC_DEBUG, "  tud_msc_read10_cb() return -1\r\n");

    // set sense
    set_sense_medium_not_present(p_cbw->lun);
 80023de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e0:	7b5b      	ldrb	r3, [r3, #13]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f96a 	bl	80016bc <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	2201      	movs	r2, #1
 80023ec:	6839      	ldr	r1, [r7, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f849 	bl	8001486 <fail_scsi_op>
 80023f4:	e040      	b.n	8002478 <proc_read10_cmd+0x118>
  }
  else if ( nbytes == 0 )
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d124      	bne.n	8002446 <proc_read10_cmd+0xe6>
  {
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	77fb      	strb	r3, [r7, #31]
 8002406:	4613      	mov	r3, r2
 8002408:	77bb      	strb	r3, [r7, #30]
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]
 8002412:	2300      	movs	r3, #0
 8002414:	75bb      	strb	r3, [r7, #22]
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	7ffb      	ldrb	r3, [r7, #31]
 8002424:	723b      	strb	r3, [r7, #8]
 8002426:	2307      	movs	r3, #7
 8002428:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 800242a:	7fbb      	ldrb	r3, [r7, #30]
 800242c:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 8002436:	7dba      	ldrb	r2, [r7, #22]
 8002438:	f107 0308 	add.w	r3, r7, #8
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f001 fd42 	bl	8003ec8 <dcd_event_handler>
}
 8002444:	e018      	b.n	8002478 <proc_read10_cmd+0x118>
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	b29b      	uxth	r3, r3
 8002450:	79f8      	ldrb	r0, [r7, #7]
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <proc_read10_cmd+0x120>)
 8002454:	f002 f82e 	bl	80044b4 <usbd_edpt_xfer>
 8002458:	4603      	mov	r3, r0
 800245a:	f083 0301 	eor.w	r3, r3, #1
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <proc_read10_cmd+0x118>
 8002464:	4b07      	ldr	r3, [pc, #28]	; (8002484 <proc_read10_cmd+0x124>)
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d000      	beq.n	8002476 <proc_read10_cmd+0x116>
 8002474:	be00      	bkpt	0x0000
 8002476:	bf00      	nop
  }
}
 8002478:	3740      	adds	r7, #64	; 0x40
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000270c 	.word	0x2000270c
 8002484:	e000edf0 	.word	0xe000edf0

08002488 <proc_write10_cmd>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	61bb      	str	r3, [r7, #24]
  bool writable = true;
 8002498:	2301      	movs	r3, #1
 800249a:	77fb      	strb	r3, [r7, #31]

  if ( tud_msc_is_writable_cb )
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <proc_write10_cmd+0xa4>)
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <proc_write10_cmd+0x28>
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	7b5b      	ldrb	r3, [r3, #13]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe f9a8 	bl	80007fc <tud_msc_is_writable_cb>
 80024ac:	4603      	mov	r3, r0
 80024ae:	77fb      	strb	r3, [r7, #31]
  }

  if ( !writable )
 80024b0:	7ffb      	ldrb	r3, [r7, #31]
 80024b2:	f083 0301 	eor.w	r3, r3, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <proc_write10_cmd+0x50>
  {
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	7b58      	ldrb	r0, [r3, #13]
 80024c0:	2300      	movs	r3, #0
 80024c2:	2227      	movs	r2, #39	; 0x27
 80024c4:	2107      	movs	r1, #7
 80024c6:	f7ff f8d5 	bl	8001674 <tud_msc_set_sense>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2201      	movs	r2, #1
 80024ce:	6839      	ldr	r1, [r7, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe ffd8 	bl	8001486 <fail_scsi_op>
    return;
 80024d6:	e026      	b.n	8002526 <proc_write10_cmd+0x9e>
  }

  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e6:	60fa      	str	r2, [r7, #12]
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4293      	cmp	r3, r2
 80024f0:	bf28      	it	cs
 80024f2:	4613      	movcs	r3, r2
 80024f4:	82fb      	strh	r3, [r7, #22]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80024fc:	8afb      	ldrh	r3, [r7, #22]
 80024fe:	79f8      	ldrb	r0, [r7, #7]
 8002500:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <proc_write10_cmd+0xa8>)
 8002502:	f001 ffd7 	bl	80044b4 <usbd_edpt_xfer>
 8002506:	4603      	mov	r3, r0
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <proc_write10_cmd+0x9e>
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <proc_write10_cmd+0xac>)
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d000      	beq.n	8002524 <proc_write10_cmd+0x9c>
 8002522:	be00      	bkpt	0x0000
 8002524:	bf00      	nop
}
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	080007fd 	.word	0x080007fd
 8002530:	2000270c 	.word	0x2000270c
 8002534:	e000edf0 	.word	0xe000edf0

08002538 <proc_write10_new_data>:

// process new data arrived from WRITE10
static void proc_write10_new_data(uint8_t rhport, mscd_interface_t* p_msc, uint32_t xferred_bytes)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b092      	sub	sp, #72	; 0x48
 800253c:	af02      	add	r7, sp, #8
 800253e:	4603      	mov	r3, r0
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	73fb      	strb	r3, [r7, #15]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 800254a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800254c:	f7ff f819 	bl	8001582 <rdwr10_get_blocksize>
 8002550:	4603      	mov	r3, r0
 8002552:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8002554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002556:	330f      	adds	r3, #15
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe ffec 	bl	8001536 <rdwr10_get_lba>
 800255e:	4601      	mov	r1, r0
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002564:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	440b      	add	r3, r1
 800256c:	637b      	str	r3, [r7, #52]	; 0x34

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002574:	fbb3 f1f2 	udiv	r1, r3, r2
 8002578:	fb01 f202 	mul.w	r2, r1, r2
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 8002580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002582:	7b58      	ldrb	r0, [r3, #13]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	4b3c      	ldr	r3, [pc, #240]	; (800267c <proc_write10_new_data+0x144>)
 800258a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800258c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800258e:	f7fe f941 	bl	8000814 <tud_msc_write10_cb>
 8002592:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ( nbytes < 0 )
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	2b00      	cmp	r3, #0
 8002598:	da11      	bge.n	80025be <proc_write10_new_data+0x86>
  {
    // negative means error -> failed this scsi op
    TU_LOG(MSC_DEBUG, "  tud_msc_write10_cb() return -1\r\n");

    // update actual byte before failed
    p_msc->xferred_len += xferred_bytes;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	441a      	add	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38

    // Set sense
    set_sense_medium_not_present(p_cbw->lun);
 80025a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a8:	7b5b      	ldrb	r3, [r3, #13]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff f886 	bl	80016bc <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2201      	movs	r2, #1
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe ff65 	bl	8001486 <fail_scsi_op>
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
      }
    }
  }
}
 80025bc:	e059      	b.n	8002672 <proc_write10_new_data+0x13a>
    if ( (uint32_t) nbytes < xferred_bytes )
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d93f      	bls.n	8002646 <proc_write10_new_data+0x10e>
      uint32_t const left_over = xferred_bytes - (uint32_t) nbytes;
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ( nbytes > 0 )
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	dd0e      	ble.n	80025f2 <proc_write10_new_data+0xba>
        p_msc->xferred_len += (uint16_t) nbytes;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025da:	b292      	uxth	r2, r2
 80025dc:	441a      	add	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	4a25      	ldr	r2, [pc, #148]	; (800267c <proc_write10_new_data+0x144>)
 80025e6:	4413      	add	r3, r2
 80025e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ea:	4619      	mov	r1, r3
 80025ec:	4823      	ldr	r0, [pc, #140]	; (800267c <proc_write10_new_data+0x144>)
 80025ee:	f005 f9c7 	bl	8007980 <memmove>
      dcd_event_xfer_complete(rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80025fe:	4613      	mov	r3, r2
 8002600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	2300      	movs	r3, #0
 800260a:	77fb      	strb	r3, [r7, #31]
 800260c:	2300      	movs	r3, #0
 800260e:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002620:	743b      	strb	r3, [r7, #16]
 8002622:	2307      	movs	r3, #7
 8002624:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8002626:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800262a:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8002630:	7ffb      	ldrb	r3, [r7, #31]
 8002632:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8002634:	7fba      	ldrb	r2, [r7, #30]
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f001 fc43 	bl	8003ec8 <dcd_event_handler>
}
 8002642:	bf00      	nop
}
 8002644:	e015      	b.n	8002672 <proc_write10_new_data+0x13a>
      p_msc->xferred_len += xferred_bytes;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	441a      	add	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	639a      	str	r2, [r3, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	429a      	cmp	r2, r3
 800265c:	d304      	bcc.n	8002668 <proc_write10_new_data+0x130>
        p_msc->stage = MSC_STAGE_STATUS;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8002666:	e004      	b.n	8002672 <proc_write10_new_data+0x13a>
        proc_write10_cmd(rhport, p_msc);
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff0b 	bl	8002488 <proc_write10_cmd>
}
 8002672:	bf00      	nop
 8002674:	3740      	adds	r7, #64	; 0x40
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000270c 	.word	0x2000270c

08002680 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	4611      	mov	r1, r2
 800268c:	461a      	mov	r2, r3
 800268e:	460b      	mov	r3, r1
 8002690:	80fb      	strh	r3, [r7, #6]
 8002692:	4613      	mov	r3, r2
 8002694:	80bb      	strh	r3, [r7, #4]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269c:	d901      	bls.n	80026a2 <tu_fifo_config+0x22>
 800269e:	2300      	movs	r3, #0
 80026a0:	e020      	b.n	80026e4 <tu_fifo_config+0x64>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer = (uint8_t*) buffer;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	601a      	str	r2, [r3, #0]
  f->depth  = depth;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	809a      	strh	r2, [r3, #4]
  f->item_size = item_size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	88ba      	ldrh	r2, [r7, #4]
 80026b2:	80da      	strh	r2, [r3, #6]
  f->overwritable = overwritable;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	7e3a      	ldrb	r2, [r7, #24]
 80026b8:	721a      	strb	r2, [r3, #8]

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = (uint16_t) (2*depth - 1);
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	899b      	ldrh	r3, [r3, #12]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	815a      	strh	r2, [r3, #10]

  f->rd_idx = f->wr_idx = 0;
 80026d4:	2100      	movs	r1, #0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	460a      	mov	r2, r1
 80026da:	81da      	strh	r2, [r3, #14]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	460a      	mov	r2, r1
 80026e0:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_ff_mod>:

// Static functions are intended to work on local variables
static inline uint16_t _ff_mod(uint16_t idx, uint16_t depth)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	460a      	mov	r2, r1
 80026fa:	80fb      	strh	r3, [r7, #6]
 80026fc:	4613      	mov	r3, r2
 80026fe:	80bb      	strh	r3, [r7, #4]
  while ( idx >= depth) idx -= depth;
 8002700:	e003      	b.n	800270a <_ff_mod+0x1a>
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	88bb      	ldrh	r3, [r7, #4]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	80fb      	strh	r3, [r7, #6]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	88bb      	ldrh	r3, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	d2f7      	bcs.n	8002702 <_ff_mod+0x12>
  return idx;
 8002712:	88fb      	ldrh	r3, [r7, #6]
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsis.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8002738:	e00b      	b.n	8002752 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *rx_fifo);
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	61ba      	str	r2, [r7, #24]
 8002742:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	bf00      	nop
    ff_buf += 4;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3304      	adds	r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8002752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	84fa      	strh	r2, [r7, #38]	; 0x26
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ee      	bne.n	800273a <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8002766:	7ffb      	ldrb	r3, [r7, #31]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d009      	beq.n	8002780 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *rx_fifo;
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8002772:	7ffa      	ldrb	r2, [r7, #31]
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	4619      	mov	r1, r3
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f005 f8f2 	bl	8007964 <memcpy>
  }
}
 8002780:	bf00      	nop
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	4613      	mov	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	623b      	str	r3, [r7, #32]

  // Pushing full available 32 bit words to const app address
  uint16_t full_words = len >> 2;
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 80027a0:	e008      	b.n	80027b4 <_ff_pull_const_addr+0x2c>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	681a      	ldr	r2, [r3, #0]
  {
    *tx_fifo = tu_unaligned_read32(ff_buf);
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3304      	adds	r3, #4
 80027b2:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 80027b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027b6:	1e5a      	subs	r2, r3, #1
 80027b8:	84fa      	strh	r2, [r7, #38]	; 0x26
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f1      	bne.n	80027a2 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const app address
  uint8_t const bytes_rem = len & 0x03;
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80027c8:	7ffb      	ldrb	r3, [r7, #31]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80027d2:	7ffa      	ldrb	r2, [r7, #31]
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	4618      	mov	r0, r3
 80027dc:	f005 f8c2 	bl	8007964 <memcpy>

    *tx_fifo = tmp32;
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	601a      	str	r2, [r3, #0]
  }
}
 80027e6:	bf00      	nop
 80027e8:	3728      	adds	r7, #40	; 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_ff_push>:

// send one item to FIFO WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	68f9      	ldr	r1, [r7, #12]
 8002804:	88c9      	ldrh	r1, [r1, #6]
 8002806:	fb01 f202 	mul.w	r2, r1, r2
 800280a:	1898      	adds	r0, r3, r2
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	88db      	ldrh	r3, [r3, #6]
 8002810:	461a      	mov	r2, r3
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	f005 f8a6 	bl	8007964 <memcpy>
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <_ff_push_n>:

// send n items to FIFO WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08e      	sub	sp, #56	; 0x38
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	4611      	mov	r1, r2
 800282c:	461a      	mov	r2, r3
 800282e:	460b      	mov	r3, r1
 8002830:	80fb      	strh	r3, [r7, #6]
 8002832:	4613      	mov	r3, r2
 8002834:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	889a      	ldrh	r2, [r3, #4]
 800283a:	88bb      	ldrh	r3, [r7, #4]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin;
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	88db      	ldrh	r3, [r3, #6]
 800284c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800284e:	fb12 f303 	smulbb	r3, r2, r3
 8002852:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88db      	ldrh	r3, [r3, #6]
 8002858:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800285a:	fb12 f303 	smulbb	r3, r2, r3
 800285e:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	88ba      	ldrh	r2, [r7, #4]
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	88c9      	ldrh	r1, [r1, #6]
 800286a:	fb01 f202 	mul.w	r2, r1, r2
 800286e:	4413      	add	r3, r2
 8002870:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8002872:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <_ff_push_n+0x60>
 800287a:	2b01      	cmp	r3, #1
 800287c:	d01f      	beq.n	80028be <_ff_push_n+0x9e>
        // Write data wrapped part
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
      }
      break;
  }
}
 800287e:	e097      	b.n	80029b0 <_ff_push_n+0x190>
      if(n <= nLin)
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002884:	429a      	cmp	r2, r3
 8002886:	d80a      	bhi.n	800289e <_ff_push_n+0x7e>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	88d2      	ldrh	r2, [r2, #6]
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	461a      	mov	r2, r3
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002898:	f005 f864 	bl	8007964 <memcpy>
      break;
 800289c:	e088      	b.n	80029b0 <_ff_push_n+0x190>
        memcpy(ff_buf, app_buf, nLin_bytes);
 800289e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028a0:	461a      	mov	r2, r3
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028a6:	f005 f85d 	bl	8007964 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	4413      	add	r3, r2
 80028b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028b6:	4619      	mov	r1, r3
 80028b8:	f005 f854 	bl	8007964 <memcpy>
      break;
 80028bc:	e078      	b.n	80029b0 <_ff_push_n+0x190>
      if(n <= nLin)
 80028be:	88fa      	ldrh	r2, [r7, #6]
 80028c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d80b      	bhi.n	80028de <_ff_push_n+0xbe>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	88db      	ldrh	r3, [r3, #6]
 80028ca:	88fa      	ldrh	r2, [r7, #6]
 80028cc:	fb12 f303 	smulbb	r3, r2, r3
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028d8:	f7ff ff22 	bl	8002720 <_ff_push_const_addr>
      break;
 80028dc:	e067      	b.n	80029ae <_ff_push_n+0x18e>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80028de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028e0:	f023 0303 	bic.w	r3, r3, #3
 80028e4:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80028e6:	8c3b      	ldrh	r3, [r7, #32]
 80028e8:	461a      	mov	r2, r3
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ee:	f7ff ff17 	bl	8002720 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80028f2:	8c3b      	ldrh	r3, [r7, #32]
 80028f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f6:	4413      	add	r3, r2
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
        volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 80028fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 800290a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800290e:	2b00      	cmp	r3, #0
 8002910:	d041      	beq.n	8002996 <_ff_push_n+0x176>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
 8002912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002916:	b29b      	uxth	r3, r3
 8002918:	f1c3 0304 	rsb	r3, r3, #4
 800291c:	b29a      	uxth	r2, r3
 800291e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002920:	837b      	strh	r3, [r7, #26]
 8002922:	4613      	mov	r3, r2
 8002924:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002926:	8b7a      	ldrh	r2, [r7, #26]
 8002928:	8b3b      	ldrh	r3, [r7, #24]
 800292a:	4293      	cmp	r3, r2
 800292c:	bf28      	it	cs
 800292e:	4613      	movcs	r3, r2
 8002930:	b29b      	uxth	r3, r3
 8002932:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 8002936:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800293a:	b29b      	uxth	r3, r3
 800293c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 800294e:	e007      	b.n	8002960 <_ff_push_n+0x140>
 8002950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002952:	1c53      	adds	r3, r2, #1
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	1c59      	adds	r1, r3, #1
 800295a:	6339      	str	r1, [r7, #48]	; 0x30
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <_ff_push_n+0x130>
          ff_buf = f->buffer;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8002974:	e007      	b.n	8002986 <_ff_push_n+0x166>
 8002976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002978:	1c53      	adds	r3, r2, #1
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	1c59      	adds	r1, r3, #1
 8002980:	6339      	str	r1, [r7, #48]	; 0x30
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800298a:	1e5a      	subs	r2, r3, #1
 800298c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <_ff_push_n+0x156>
 8002994:	e002      	b.n	800299c <_ff_push_n+0x17c>
          ff_buf = f->buffer; // wrap around to beginning
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 800299c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <_ff_push_n+0x18e>
 80029a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029a4:	461a      	mov	r2, r3
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029aa:	f7ff feb9 	bl	8002720 <_ff_push_const_addr>
      break;
 80029ae:	bf00      	nop
}
 80029b0:	bf00      	nop
 80029b2:	3738      	adds	r7, #56	; 0x38
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ff_pull>:

// get one item from FIFO WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	68f9      	ldr	r1, [r7, #12]
 80029ce:	88c9      	ldrh	r1, [r1, #6]
 80029d0:	fb01 f202 	mul.w	r2, r1, r2
 80029d4:	1899      	adds	r1, r3, r2
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88db      	ldrh	r3, [r3, #6]
 80029da:	461a      	mov	r2, r3
 80029dc:	68b8      	ldr	r0, [r7, #8]
 80029de:	f004 ffc1 	bl	8007964 <memcpy>
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_ff_pull_n>:

// get n items from FIFO WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b08e      	sub	sp, #56	; 0x38
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	4611      	mov	r1, r2
 80029f6:	461a      	mov	r2, r3
 80029f8:	460b      	mov	r3, r1
 80029fa:	80fb      	strh	r3, [r7, #6]
 80029fc:	4613      	mov	r3, r2
 80029fe:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	889a      	ldrh	r2, [r3, #4]
 8002a04:	88bb      	ldrh	r3, [r7, #4]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin; // only used if wrapped
 8002a0a:	88fa      	ldrh	r2, [r7, #6]
 8002a0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88db      	ldrh	r3, [r3, #6]
 8002a16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a18:	fb12 f303 	smulbb	r3, r2, r3
 8002a1c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	88db      	ldrh	r3, [r3, #6]
 8002a22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a24:	fb12 f303 	smulbb	r3, r2, r3
 8002a28:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	88ba      	ldrh	r2, [r7, #4]
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	88c9      	ldrh	r1, [r1, #6]
 8002a34:	fb01 f202 	mul.w	r2, r1, r2
 8002a38:	4413      	add	r3, r2
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8002a3c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <_ff_pull_n+0x60>
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d01f      	beq.n	8002a88 <_ff_pull_n+0x9e>
        // Read data wrapped part
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
      }
    break;

    default: break;
 8002a48:	e099      	b.n	8002b7e <_ff_pull_n+0x194>
      if ( n <= nLin )
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d80a      	bhi.n	8002a68 <_ff_pull_n+0x7e>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	88d2      	ldrh	r2, [r2, #6]
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a60:	68b8      	ldr	r0, [r7, #8]
 8002a62:	f004 ff7f 	bl	8007964 <memcpy>
    break;
 8002a66:	e08a      	b.n	8002b7e <_ff_pull_n+0x194>
        memcpy(app_buf, ff_buf, nLin_bytes);
 8002a68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a6e:	68b8      	ldr	r0, [r7, #8]
 8002a70:	f004 ff78 	bl	8007964 <memcpy>
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
 8002a74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	18d0      	adds	r0, r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002a80:	4619      	mov	r1, r3
 8002a82:	f004 ff6f 	bl	8007964 <memcpy>
    break;
 8002a86:	e07a      	b.n	8002b7e <_ff_pull_n+0x194>
      if ( n <= nLin )
 8002a88:	88fa      	ldrh	r2, [r7, #6]
 8002a8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d80b      	bhi.n	8002aa8 <_ff_pull_n+0xbe>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	88db      	ldrh	r3, [r3, #6]
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	fb12 f303 	smulbb	r3, r2, r3
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aa0:	68b8      	ldr	r0, [r7, #8]
 8002aa2:	f7ff fe71 	bl	8002788 <_ff_pull_const_addr>
    break;
 8002aa6:	e069      	b.n	8002b7c <_ff_pull_n+0x192>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 8002aa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, nLin_4n_bytes);
 8002ab0:	8c3b      	ldrh	r3, [r7, #32]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ab6:	68b8      	ldr	r0, [r7, #8]
 8002ab8:	f7ff fe66 	bl	8002788 <_ff_pull_const_addr>
        ff_buf += nLin_4n_bytes;
 8002abc:	8c3b      	ldrh	r3, [r7, #32]
 8002abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac0:	4413      	add	r3, r2
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
        volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 8002ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8002ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d043      	beq.n	8002b64 <_ff_pull_n+0x17a>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
 8002adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	f1c3 0304 	rsb	r3, r3, #4
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002aea:	837b      	strh	r3, [r7, #26]
 8002aec:	4613      	mov	r3, r2
 8002aee:	833b      	strh	r3, [r7, #24]
 8002af0:	8b7a      	ldrh	r2, [r7, #26]
 8002af2:	8b3b      	ldrh	r3, [r7, #24]
 8002af4:	4293      	cmp	r3, r2
 8002af6:	bf28      	it	cs
 8002af8:	4613      	movcs	r3, r2
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 8002b00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8002b16:	e007      	b.n	8002b28 <_ff_pull_n+0x13e>
 8002b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1a:	1c53      	adds	r3, r2, #1
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	1c59      	adds	r1, r3, #1
 8002b22:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b2c:	1e5a      	subs	r2, r3, #1
 8002b2e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <_ff_pull_n+0x12e>
          ff_buf = f->buffer;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8002b3c:	e007      	b.n	8002b4e <_ff_pull_n+0x164>
 8002b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b40:	1c53      	adds	r3, r2, #1
 8002b42:	633b      	str	r3, [r7, #48]	; 0x30
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	1c59      	adds	r1, r3, #1
 8002b48:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b4a:	7812      	ldrb	r2, [r2, #0]
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b52:	1e5a      	subs	r2, r3, #1
 8002b54:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <_ff_pull_n+0x154>
          *tx_fifo = tmp32;
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e002      	b.n	8002b6a <_ff_pull_n+0x180>
          ff_buf = f->buffer; // wrap around to beginning
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
 8002b6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <_ff_pull_n+0x192>
 8002b70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b72:	461a      	mov	r2, r3
 8002b74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b76:	68b8      	ldr	r0, [r7, #8]
 8002b78:	f7ff fe06 	bl	8002788 <_ff_pull_const_addr>
    break;
 8002b7c:	bf00      	nop
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3738      	adds	r7, #56	; 0x38
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <advance_pointer>:

// Advance an absolute pointer
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	807b      	strh	r3, [r7, #2]
 8002b92:	4613      	mov	r3, r2
 8002b94:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	883b      	ldrh	r3, [r7, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d807      	bhi.n	8002bb4 <advance_pointer+0x2e>
 8002ba4:	887a      	ldrh	r2, [r7, #2]
 8002ba6:	883b      	ldrh	r3, [r7, #0]
 8002ba8:	4413      	add	r3, r2
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	899b      	ldrh	r3, [r3, #12]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d908      	bls.n	8002bc6 <advance_pointer+0x40>
  {
    p = (uint16_t) ((p + offset) + f->non_used_index_space);
 8002bb4:	887a      	ldrh	r2, [r7, #2]
 8002bb6:	883b      	ldrh	r3, [r7, #0]
 8002bb8:	4413      	add	r3, r2
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	895b      	ldrh	r3, [r3, #10]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	e003      	b.n	8002bce <advance_pointer+0x48>
  }
  else
  {
    p += offset;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	883b      	ldrh	r3, [r7, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	807b      	strh	r3, [r7, #2]
  }
  return p;
 8002bce:	887b      	ldrh	r3, [r7, #2]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <backward_pointer>:

// Backward an absolute pointer
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
 8002be8:	4613      	mov	r3, r2
 8002bea:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 8002bec:	883a      	ldrh	r2, [r7, #0]
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d807      	bhi.n	8002c04 <backward_pointer+0x28>
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	883b      	ldrh	r3, [r7, #0]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	899b      	ldrh	r3, [r3, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d908      	bls.n	8002c16 <backward_pointer+0x3a>
  {
    p = (uint16_t) ((p - offset) - f->non_used_index_space);
 8002c04:	887a      	ldrh	r2, [r7, #2]
 8002c06:	883b      	ldrh	r3, [r7, #0]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	895b      	ldrh	r3, [r3, #10]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	807b      	strh	r3, [r7, #2]
 8002c14:	e003      	b.n	8002c1e <backward_pointer+0x42>
  }
  else
  {
    p -= offset;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	883b      	ldrh	r3, [r7, #0]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	807b      	strh	r3, [r7, #2]
  }
  return p;
 8002c1e:	887b      	ldrh	r3, [r7, #2]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
  return _ff_mod(p, f->depth);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	889a      	ldrh	r2, [r3, #4]
 8002c3c:	887b      	ldrh	r3, [r7, #2]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fd55 	bl	80026f0 <_ff_mod>
 8002c46:	4603      	mov	r3, r0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <_tu_fifo_count>:

// Works on local copies of w and r - return only the difference and as such can be used to determine an overflow
static inline uint16_t _tu_fifo_count(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	803b      	strh	r3, [r7, #0]
  uint16_t cnt = wAbs-rAbs;
 8002c60:	887a      	ldrh	r2, [r7, #2]
 8002c62:	883b      	ldrh	r3, [r7, #0]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	81fb      	strh	r3, [r7, #14]

  // In case we have non-power of two depth we need a further modification
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8002c68:	883a      	ldrh	r2, [r7, #0]
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d904      	bls.n	8002c7a <_tu_fifo_count+0x2a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	895b      	ldrh	r3, [r3, #10]
 8002c74:	89fa      	ldrh	r2, [r7, #14]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	81fb      	strh	r3, [r7, #14]

  return cnt;
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_tu_fifo_empty>:

// Works on local copies of w and r
static inline bool _tu_fifo_empty(uint16_t wAbs, uint16_t rAbs)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	460a      	mov	r2, r1
 8002c92:	80fb      	strh	r3, [r7, #6]
 8002c94:	4613      	mov	r3, r2
 8002c96:	80bb      	strh	r3, [r7, #4]
  return wAbs == rAbs;
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	88bb      	ldrh	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_tu_fifo_full>:

// Works on local copies of w and r
static inline bool _tu_fifo_full(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	807b      	strh	r3, [r7, #2]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	803b      	strh	r3, [r7, #0]
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
 8002cc2:	883a      	ldrh	r2, [r7, #0]
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ffc1 	bl	8002c50 <_tu_fifo_count>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	889b      	ldrh	r3, [r3, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_tu_fifo_correct_read_pointer>:
}

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	889a      	ldrh	r2, [r3, #4]
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff ff6d 	bl	8002bdc <backward_pointer>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	821a      	strh	r2, [r3, #16]
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	460b      	mov	r3, r1
 8002d22:	80fb      	strh	r3, [r7, #6]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8002d28:	88ba      	ldrh	r2, [r7, #4]
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff ff8e 	bl	8002c50 <_tu_fifo_count>
 8002d34:	4603      	mov	r3, r0
 8002d36:	82fb      	strh	r3, [r7, #22]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	889b      	ldrh	r3, [r3, #4]
 8002d3c:	8afa      	ldrh	r2, [r7, #22]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d907      	bls.n	8002d52 <_tu_fifo_peek+0x40>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	4619      	mov	r1, r3
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f7ff ffce 	bl	8002ce8 <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	889b      	ldrh	r3, [r3, #4]
 8002d50:	82fb      	strh	r3, [r7, #22]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
 8002d52:	8afb      	ldrh	r3, [r7, #22]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <_tu_fifo_peek+0x4a>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e00d      	b.n	8002d78 <_tu_fifo_peek+0x66>

  uint16_t rRel = get_relative_pointer(f, rAbs);
 8002d5c:	88bb      	ldrh	r3, [r7, #4]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff ff63 	bl	8002c2c <get_relative_pointer>
 8002d66:	4603      	mov	r3, r0
 8002d68:	82bb      	strh	r3, [r7, #20]

  // Peek data
  _ff_pull(f, p_buffer, rRel);
 8002d6a:	8abb      	ldrh	r3, [r7, #20]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff fe21 	bl	80029b8 <_ff_pull>

  return true;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wAbs, uint16_t rAbs, tu_fifo_copy_mode_t copy_mode)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	460b      	mov	r3, r1
 8002d90:	80fb      	strh	r3, [r7, #6]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8002d96:	8c3a      	ldrh	r2, [r7, #32]
 8002d98:	88bb      	ldrh	r3, [r7, #4]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff ff57 	bl	8002c50 <_tu_fifo_count>
 8002da2:	4603      	mov	r3, r0
 8002da4:	82fb      	strh	r3, [r7, #22]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	889b      	ldrh	r3, [r3, #4]
 8002daa:	8afa      	ldrh	r2, [r7, #22]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d90a      	bls.n	8002dc6 <_tu_fifo_peek_n+0x46>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 8002db0:	88bb      	ldrh	r3, [r7, #4]
 8002db2:	4619      	mov	r1, r3
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff ff97 	bl	8002ce8 <_tu_fifo_correct_read_pointer>
    rAbs = f->rd_idx;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8a1b      	ldrh	r3, [r3, #16]
 8002dbe:	843b      	strh	r3, [r7, #32]
    cnt = f->depth;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	889b      	ldrh	r3, [r3, #4]
 8002dc4:	82fb      	strh	r3, [r7, #22]
  }

  // Skip beginning of buffer
  if (cnt == 0) return 0;
 8002dc6:	8afb      	ldrh	r3, [r7, #22]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <_tu_fifo_peek_n+0x50>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e017      	b.n	8002e00 <_tu_fifo_peek_n+0x80>

  // Check if we can read something at and after offset - if too less is available we read what remains
  if (cnt < n) n = cnt;
 8002dd0:	8afa      	ldrh	r2, [r7, #22]
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d201      	bcs.n	8002ddc <_tu_fifo_peek_n+0x5c>
 8002dd8:	8afb      	ldrh	r3, [r7, #22]
 8002dda:	80fb      	strh	r3, [r7, #6]

  uint16_t rRel = get_relative_pointer(f, rAbs);
 8002ddc:	8c3b      	ldrh	r3, [r7, #32]
 8002dde:	4619      	mov	r1, r3
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff ff23 	bl	8002c2c <get_relative_pointer>
 8002de6:	4603      	mov	r3, r0
 8002de8:	82bb      	strh	r3, [r7, #20]

  // Peek data
  _ff_pull_n(f, p_buffer, n, rRel, copy_mode);
 8002dea:	8ab9      	ldrh	r1, [r7, #20]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	460b      	mov	r3, r1
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff fdf6 	bl	80029ea <_ff_pull_n>

  return n;
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_tu_fifo_remaining>:

// Works on local copies of w and r
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	803b      	strh	r3, [r7, #0]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	889c      	ldrh	r4, [r3, #4]
 8002e1c:	883a      	ldrh	r2, [r7, #0]
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff14 	bl	8002c50 <_tu_fifo_count>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	1ae3      	subs	r3, r4, r3
 8002e2c:	b29b      	uxth	r3, r3
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}

08002e36 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08a      	sub	sp, #40	; 0x28
 8002e3a:	af02      	add	r7, sp, #8
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	4611      	mov	r1, r2
 8002e42:	461a      	mov	r2, r3
 8002e44:	460b      	mov	r3, r1
 8002e46:	80fb      	strh	r3, [r7, #6]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <_tu_fifo_write_n+0x20>
 8002e52:	2300      	movs	r3, #0
 8002e54:	e053      	b.n	8002efe <_tu_fifo_write_n+0xc8>

  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx, r = f->rd_idx;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	89db      	ldrh	r3, [r3, #14]
 8002e5a:	83fb      	strh	r3, [r7, #30]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8a1b      	ldrh	r3, [r3, #16]
 8002e60:	82fb      	strh	r3, [r7, #22]
  uint8_t const* buf8 = (uint8_t const*) data;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	61bb      	str	r3, [r7, #24]

  if (!f->overwritable)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	7a1b      	ldrb	r3, [r3, #8]
 8002e6a:	f083 0301 	eor.w	r3, r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <_tu_fifo_write_n+0x66>
  {
    // Not overwritable limit up to full
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
 8002e74:	8afa      	ldrh	r2, [r7, #22]
 8002e76:	8bfb      	ldrh	r3, [r7, #30]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff ffc4 	bl	8002e08 <_tu_fifo_remaining>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	827b      	strh	r3, [r7, #18]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	823b      	strh	r3, [r7, #16]
 8002e8c:	8a7a      	ldrh	r2, [r7, #18]
 8002e8e:	8a3b      	ldrh	r3, [r7, #16]
 8002e90:	4293      	cmp	r3, r2
 8002e92:	bf28      	it	cs
 8002e94:	4613      	movcs	r3, r2
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	80fb      	strh	r3, [r7, #6]
 8002e9a:	e015      	b.n	8002ec8 <_tu_fifo_write_n+0x92>
  }
  else if (n >= f->depth)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	889b      	ldrh	r3, [r3, #4]
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d310      	bcc.n	8002ec8 <_tu_fifo_write_n+0x92>
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	8892      	ldrh	r2, [r2, #4]
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	88d2      	ldrh	r2, [r2, #6]
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	4413      	add	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
    n = f->depth;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	889b      	ldrh	r3, [r3, #4]
 8002ec2:	80fb      	strh	r3, [r7, #6]

    // We start writing at the read pointer's position since we fill the complete
    // buffer and we do not want to modify the read pointer within a write function!
    // This would end up in a race condition with read functions!
    w = r;
 8002ec4:	8afb      	ldrh	r3, [r7, #22]
 8002ec6:	83fb      	strh	r3, [r7, #30]
  }

  uint16_t wRel = get_relative_pointer(f, w);
 8002ec8:	8bfb      	ldrh	r3, [r7, #30]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7ff fead 	bl	8002c2c <get_relative_pointer>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	82bb      	strh	r3, [r7, #20]

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);
 8002ed6:	8ab9      	ldrh	r1, [r7, #20]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	797b      	ldrb	r3, [r7, #5]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	69b9      	ldr	r1, [r7, #24]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f7ff fc9c 	bl	8002820 <_ff_push_n>

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	8bfb      	ldrh	r3, [r7, #30]
 8002eec:	4619      	mov	r1, r3
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7ff fe49 	bl	8002b86 <advance_pointer>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	81da      	strh	r2, [r3, #14]

  _ff_unlock(f->mutex_wr);

  return n;
 8002efc:	88fb      	ldrh	r3, [r7, #6]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3720      	adds	r7, #32
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af02      	add	r7, sp, #8
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	4611      	mov	r1, r2
 8002f12:	461a      	mov	r2, r3
 8002f14:	460b      	mov	r3, r1
 8002f16:	80fb      	strh	r3, [r7, #6]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	89db      	ldrh	r3, [r3, #14]
 8002f20:	b298      	uxth	r0, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8a1b      	ldrh	r3, [r3, #16]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	88f9      	ldrh	r1, [r7, #6]
 8002f2a:	797a      	ldrb	r2, [r7, #5]
 8002f2c:	9201      	str	r2, [sp, #4]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	4603      	mov	r3, r0
 8002f32:	460a      	mov	r2, r1
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff22 	bl	8002d80 <_tu_fifo_peek_n>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8a1b      	ldrh	r3, [r3, #16]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff fe1b 	bl	8002b86 <advance_pointer>
 8002f50:	4603      	mov	r3, r0
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return n;
 8002f58:	88fb      	ldrh	r3, [r7, #6]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	89db      	ldrh	r3, [r3, #14]
 8002f6e:	b299      	uxth	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8a1b      	ldrh	r3, [r3, #16]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff fe69 	bl	8002c50 <_tu_fifo_count>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	889b      	ldrh	r3, [r3, #4]
 8002f86:	81fa      	strh	r2, [r7, #14]
 8002f88:	81bb      	strh	r3, [r7, #12]
 8002f8a:	89fa      	ldrh	r2, [r7, #14]
 8002f8c:	89bb      	ldrh	r3, [r7, #12]
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	bf28      	it	cs
 8002f92:	4613      	movcs	r3, r2
 8002f94:	b29b      	uxth	r3, r3
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	89db      	ldrh	r3, [r3, #14]
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8a1b      	ldrh	r3, [r3, #16]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f7ff fe67 	bl	8002c88 <_tu_fifo_empty>
 8002fba:	4603      	mov	r3, r0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	89db      	ldrh	r3, [r3, #14]
 8002fd0:	b299      	uxth	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8a1b      	ldrh	r3, [r3, #16]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ff14 	bl	8002e08 <_tu_fifo_remaining>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	89db      	ldrh	r3, [r3, #14]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8a1b      	ldrh	r3, [r3, #16]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff fe85 	bl	8002d12 <_tu_fifo_peek>
 8003008:	4603      	mov	r3, r0
 800300a:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8a1b      	ldrh	r3, [r3, #16]
 8003010:	b29b      	uxth	r3, r3
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	b292      	uxth	r2, r2
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff fdb4 	bl	8002b86 <advance_pointer>
 800301e:	4603      	mov	r3, r0
 8003020:	461a      	mov	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	2300      	movs	r3, #0
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff ff5e 	bl	8002f06 <_tu_fifo_read_n>
 800304a:	4603      	mov	r3, r0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	2301      	movs	r3, #1
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff ff4c 	bl	8002f06 <_tu_fifo_read_n>
 800306e:	4603      	mov	r3, r0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	89db      	ldrh	r3, [r3, #14]
 8003086:	81bb      	strh	r3, [r7, #12]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8a1b      	ldrh	r3, [r3, #16]
 800308c:	b29a      	uxth	r2, r3
 800308e:	89bb      	ldrh	r3, [r7, #12]
 8003090:	4619      	mov	r1, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fe0d 	bl	8002cb2 <_tu_fifo_full>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <tu_fifo_write+0x3a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7a1b      	ldrb	r3, [r3, #8]
 80030a2:	f083 0301 	eor.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <tu_fifo_write+0x3a>
  {
    ret = false;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e018      	b.n	80030e4 <tu_fifo_write+0x6c>
  }else
  {
    uint16_t wRel = get_relative_pointer(f, w);
 80030b2:	89bb      	ldrh	r3, [r7, #12]
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fdb8 	bl	8002c2c <get_relative_pointer>
 80030bc:	4603      	mov	r3, r0
 80030be:	817b      	strh	r3, [r7, #10]

    // Write data
    _ff_push(f, data, wRel);
 80030c0:	897b      	ldrh	r3, [r7, #10]
 80030c2:	461a      	mov	r2, r3
 80030c4:	6839      	ldr	r1, [r7, #0]
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff fb91 	bl	80027ee <_ff_push>

    // Advance pointer
    f->wr_idx = advance_pointer(f, w, 1);
 80030cc:	89bb      	ldrh	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	4619      	mov	r1, r3
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fd57 	bl	8002b86 <advance_pointer>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	81da      	strh	r2, [r3, #14]

    ret = true;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	4613      	mov	r3, r2
 80030fa:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 80030fc:	88fa      	ldrh	r2, [r7, #6]
 80030fe:	2300      	movs	r3, #0
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff fe97 	bl	8002e36 <_tu_fifo_write_n>
 8003108:	4603      	mov	r3, r0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	4613      	mov	r3, r2
 800311e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8003120:	88fa      	ldrh	r2, [r7, #6]
 8003122:	2301      	movs	r3, #1
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff fe85 	bl	8002e36 <_tu_fifo_write_n>
 800312c:	4603      	mov	r3, r0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
 800313e:	2100      	movs	r1, #0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	460a      	mov	r2, r1
 8003144:	81da      	strh	r2, [r3, #14]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	460a      	mov	r2, r1
 800314a:	821a      	strh	r2, [r3, #16]
  f->max_pointer_idx = (uint16_t) (2*f->depth-1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	889b      	ldrh	r3, [r3, #4]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	899b      	ldrh	r3, [r3, #12]
 8003160:	43db      	mvns	r3, r3
 8003162:	b29a      	uxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8003168:	2301      	movs	r3, #1
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	721a      	strb	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8003188:	2301      	movs	r3, #1
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <get_driver>:
static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <get_driver+0x5c>)
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d012      	beq.n	80031ce <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <get_driver+0x60>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	79fa      	ldrb	r2, [r7, #7]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d208      	bcs.n	80031c4 <get_driver+0x2c>
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <get_driver+0x64>)
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	79fa      	ldrb	r2, [r7, #7]
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	e010      	b.n	80031e6 <get_driver+0x4e>
    drvid -= _app_driver_count;
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <get_driver+0x60>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	79fa      	ldrb	r2, [r7, #7]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d807      	bhi.n	80031e4 <get_driver+0x4c>
 80031d4:	79fa      	ldrb	r2, [r7, #7]
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4a08      	ldr	r2, [pc, #32]	; (8003200 <get_driver+0x68>)
 80031e0:	4413      	add	r3, r2
 80031e2:	e000      	b.n	80031e6 <get_driver+0x4e>

  return NULL;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	00000000 	.word	0x00000000
 80031f8:	2000293c 	.word	0x2000293c
 80031fc:	20002938 	.word	0x20002938
 8003200:	08007ac0 	.word	0x08007ac0

08003204 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <tud_mounted+0x20>)
 800320a:	785b      	ldrb	r3, [r3, #1]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	2000290c 	.word	0x2000290c

08003228 <tud_suspended>:

bool tud_suspended(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <tud_suspended+0x24>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	2000290c 	.word	0x2000290c

08003250 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <tud_inited+0x1c>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2bff      	cmp	r3, #255	; 0xff
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	2000201c 	.word	0x2000201c

08003270 <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800327a:	2300      	movs	r3, #0
 800327c:	75fb      	strb	r3, [r7, #23]
 800327e:	e019      	b.n	80032b4 <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff88 	bl	8003198 <get_driver>
 8003288:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <configuration_reset+0x34>
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <configuration_reset+0x78>)
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01f      	beq.n	80032e0 <configuration_reset+0x70>
 80032a0:	be00      	bkpt	0x0000
 80032a2:	e01d      	b.n	80032e0 <configuration_reset+0x70>
    driver->reset(rhport);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	79fa      	ldrb	r2, [r7, #7]
 80032aa:	4610      	mov	r0, r2
 80032ac:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	3301      	adds	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
 80032b4:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <configuration_reset+0x7c>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	429a      	cmp	r2, r3
 80032be:	dadf      	bge.n	8003280 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80032c0:	222b      	movs	r2, #43	; 0x2b
 80032c2:	2100      	movs	r1, #0
 80032c4:	480a      	ldr	r0, [pc, #40]	; (80032f0 <configuration_reset+0x80>)
 80032c6:	f004 fb75 	bl	80079b4 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80032ca:	2210      	movs	r2, #16
 80032cc:	21ff      	movs	r1, #255	; 0xff
 80032ce:	4809      	ldr	r0, [pc, #36]	; (80032f4 <configuration_reset+0x84>)
 80032d0:	f004 fb70 	bl	80079b4 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 80032d4:	220c      	movs	r2, #12
 80032d6:	21ff      	movs	r1, #255	; 0xff
 80032d8:	4807      	ldr	r0, [pc, #28]	; (80032f8 <configuration_reset+0x88>)
 80032da:	f004 fb6b 	bl	80079b4 <memset>
 80032de:	e000      	b.n	80032e2 <configuration_reset+0x72>
    TU_ASSERT(driver, );
 80032e0:	bf00      	nop
}
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	e000edf0 	.word	0xe000edf0
 80032ec:	2000293c 	.word	0x2000293c
 80032f0:	2000290c 	.word	0x2000290c
 80032f4:	2000290f 	.word	0x2000290f
 80032f8:	2000291f 	.word	0x2000291f

080032fc <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ffb1 	bl	8003270 <configuration_reset>
  usbd_control_reset();
 800330e:	f001 fb25 	bl	800495c <usbd_control_reset>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b091      	sub	sp, #68	; 0x44
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
 8003328:	f002 fe1a 	bl	8005f60 <tusb_inited>
 800332c:	4603      	mov	r3, r0
 800332e:	f083 0301 	eor.w	r3, r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 812a 	bne.w	800358e <tud_task_ext+0x272>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 800333a:	4b99      	ldr	r3, [pc, #612]	; (80035a0 <tud_task_ext+0x284>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003340:	f107 0308 	add.w	r3, r7, #8
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	623b      	str	r3, [r7, #32]

// lock queue by disable USB interrupt
TU_ATTR_ALWAYS_INLINE static inline void _osal_q_lock(osal_queue_t qhdl)
{
  // disable dcd/hcd interrupt
  qhdl->interrupt_set(false);
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2000      	movs	r0, #0
 8003354:	4798      	blx	r3
}
 8003356:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	3304      	adds	r3, #4
 800335c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fe43 	bl	8002fea <tu_fifo_read>
 8003364:	4603      	mov	r3, r0
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2001      	movs	r0, #1
 8003372:	4798      	blx	r3
}
 8003374:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8003376:	7ffb      	ldrb	r3, [r7, #31]
 8003378:	f083 0301 	eor.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 8107 	bne.w	8003592 <tud_task_ext+0x276>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8003384:	7a7b      	ldrb	r3, [r7, #9]
 8003386:	3b01      	subs	r3, #1
 8003388:	2b07      	cmp	r3, #7
 800338a:	f200 80ea 	bhi.w	8003562 <tud_task_ext+0x246>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <tud_task_ext+0x78>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033b5 	.word	0x080033b5
 8003398:	080033c5 	.word	0x080033c5
 800339c:	08003563 	.word	0x08003563
 80033a0:	08003509 	.word	0x08003509
 80033a4:	08003539 	.word	0x08003539
 80033a8:	080033db 	.word	0x080033db
 80033ac:	08003449 	.word	0x08003449
 80033b0:	08003553 	.word	0x08003553
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80033b4:	7a3b      	ldrb	r3, [r7, #8]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ffa0 	bl	80032fc <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80033bc:	7b3a      	ldrb	r2, [r7, #12]
 80033be:	4b79      	ldr	r3, [pc, #484]	; (80035a4 <tud_task_ext+0x288>)
 80033c0:	709a      	strb	r2, [r3, #2]
      break;
 80033c2:	e0e3      	b.n	800358c <tud_task_ext+0x270>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 80033c4:	7a3b      	ldrb	r3, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff ff98 	bl	80032fc <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 80033cc:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <tud_task_ext+0x28c>)
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80d1 	beq.w	8003576 <tud_task_ext+0x25a>
 80033d4:	f3af 8000 	nop.w
      break;
 80033d8:	e0cd      	b.n	8003576 <tud_task_ext+0x25a>
        TU_LOG_VAR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 80033da:	4a72      	ldr	r2, [pc, #456]	; (80035a4 <tud_task_ext+0x288>)
 80033dc:	7813      	ldrb	r3, [r2, #0]
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 80033e4:	4a6f      	ldr	r2, [pc, #444]	; (80035a4 <tud_task_ext+0x288>)
 80033e6:	7fd3      	ldrb	r3, [r2, #31]
 80033e8:	f36f 0300 	bfc	r3, #0, #1
 80033ec:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 80033ee:	4a6d      	ldr	r2, [pc, #436]	; (80035a4 <tud_task_ext+0x288>)
 80033f0:	7fd3      	ldrb	r3, [r2, #31]
 80033f2:	f36f 0382 	bfc	r3, #2, #1
 80033f6:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 80033f8:	4a6a      	ldr	r2, [pc, #424]	; (80035a4 <tud_task_ext+0x288>)
 80033fa:	f892 3020 	ldrb.w	r3, [r2, #32]
 80033fe:	f36f 0300 	bfc	r3, #0, #1
 8003402:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8003406:	4a67      	ldr	r2, [pc, #412]	; (80035a4 <tud_task_ext+0x288>)
 8003408:	f892 3020 	ldrb.w	r3, [r2, #32]
 800340c:	f36f 0382 	bfc	r3, #2, #1
 8003410:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8003414:	7a3a      	ldrb	r2, [r7, #8]
 8003416:	f107 0308 	add.w	r3, r7, #8
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 f8e2 	bl	80035e8 <process_control_request>
 8003424:	4603      	mov	r3, r0
 8003426:	f083 0301 	eor.w	r3, r3, #1
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a4 	beq.w	800357a <tud_task_ext+0x25e>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8003432:	7a3b      	ldrb	r3, [r7, #8]
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f002 f8aa 	bl	8005590 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800343c:	7a3b      	ldrb	r3, [r7, #8]
 800343e:	2180      	movs	r1, #128	; 0x80
 8003440:	4618      	mov	r0, r3
 8003442:	f002 f8a5 	bl	8005590 <dcd_edpt_stall>
        }
      break;
 8003446:	e098      	b.n	800357a <tud_task_ext+0x25e>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8003448:	7b3b      	ldrb	r3, [r7, #12]
 800344a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800344e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003452:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003454:	7dbb      	ldrb	r3, [r7, #22]
 8003456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800345a:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 800345c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003460:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003464:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	09db      	lsrs	r3, r3, #7
 800346a:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 800346c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 8003470:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8003474:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003478:	494a      	ldr	r1, [pc, #296]	; (80035a4 <tud_task_ext+0x288>)
 800347a:	0052      	lsls	r2, r2, #1
 800347c:	440a      	add	r2, r1
 800347e:	4413      	add	r3, r2
 8003480:	f103 0218 	add.w	r2, r3, #24
 8003484:	79d3      	ldrb	r3, [r2, #7]
 8003486:	f36f 0300 	bfc	r3, #0, #1
 800348a:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 800348c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8003490:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003494:	4943      	ldr	r1, [pc, #268]	; (80035a4 <tud_task_ext+0x288>)
 8003496:	0052      	lsls	r2, r2, #1
 8003498:	440a      	add	r2, r1
 800349a:	4413      	add	r3, r2
 800349c:	f103 0218 	add.w	r2, r3, #24
 80034a0:	79d3      	ldrb	r3, [r2, #7]
 80034a2:	f36f 0382 	bfc	r3, #2, #1
 80034a6:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 80034a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <tud_task_ext+0x1a4>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80034b0:	7a38      	ldrb	r0, [r7, #8]
 80034b2:	7b7a      	ldrb	r2, [r7, #13]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80034ba:	f001 fa85 	bl	80049c8 <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 80034be:	e065      	b.n	800358c <tud_task_ext+0x270>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80034c0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80034c4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80034c8:	4936      	ldr	r1, [pc, #216]	; (80035a4 <tud_task_ext+0x288>)
 80034ca:	0052      	lsls	r2, r2, #1
 80034cc:	440a      	add	r2, r1
 80034ce:	4413      	add	r3, r2
 80034d0:	3313      	adds	r3, #19
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fe5f 	bl	8003198 <get_driver>
 80034da:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <tud_task_ext+0x1da>
 80034e2:	4b32      	ldr	r3, [pc, #200]	; (80035ac <tud_task_ext+0x290>)
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
 80034e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d051      	beq.n	8003596 <tud_task_ext+0x27a>
 80034f2:	be00      	bkpt	0x0000
 80034f4:	e04f      	b.n	8003596 <tud_task_ext+0x27a>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	691c      	ldr	r4, [r3, #16]
 80034fa:	7a38      	ldrb	r0, [r7, #8]
 80034fc:	7b7a      	ldrb	r2, [r7, #13]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003504:	47a0      	blx	r4
      break;
 8003506:	e041      	b.n	800358c <tud_task_ext+0x270>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8003508:	4b26      	ldr	r3, [pc, #152]	; (80035a4 <tud_task_ext+0x288>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d033      	beq.n	800357e <tud_task_ext+0x262>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8003516:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <tud_task_ext+0x294>)
 8003518:	2b00      	cmp	r3, #0
 800351a:	d030      	beq.n	800357e <tud_task_ext+0x262>
 800351c:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <tud_task_ext+0x288>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf14      	ite	ne
 800352a:	2301      	movne	r3, #1
 800352c:	2300      	moveq	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	f3af 8000 	nop.w
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8003536:	e022      	b.n	800357e <tud_task_ext+0x262>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <tud_task_ext+0x288>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d01d      	beq.n	8003582 <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 8003546:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <tud_task_ext+0x298>)
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01a      	beq.n	8003582 <tud_task_ext+0x266>
 800354c:	f3af 8000 	nop.w
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8003550:	e017      	b.n	8003582 <tud_task_ext+0x266>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d016      	beq.n	8003586 <tud_task_ext+0x26a>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4610      	mov	r0, r2
 800355e:	4798      	blx	r3
      break;
 8003560:	e011      	b.n	8003586 <tud_task_ext+0x26a>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <tud_task_ext+0x290>)
 8003564:	633b      	str	r3, [r7, #48]	; 0x30
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <tud_task_ext+0x26e>
 8003572:	be00      	bkpt	0x0000
      break;
 8003574:	e009      	b.n	800358a <tud_task_ext+0x26e>
      break;
 8003576:	bf00      	nop
 8003578:	e6df      	b.n	800333a <tud_task_ext+0x1e>
      break;
 800357a:	bf00      	nop
 800357c:	e6dd      	b.n	800333a <tud_task_ext+0x1e>
      break;
 800357e:	bf00      	nop
 8003580:	e6db      	b.n	800333a <tud_task_ext+0x1e>
      break;
 8003582:	bf00      	nop
 8003584:	e6d9      	b.n	800333a <tud_task_ext+0x1e>
      break;
 8003586:	bf00      	nop
 8003588:	e6d7      	b.n	800333a <tud_task_ext+0x1e>
      break;
 800358a:	bf00      	nop
  {
 800358c:	e6d5      	b.n	800333a <tud_task_ext+0x1e>
  if ( !tusb_inited() ) return;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <tud_task_ext+0x27c>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <tud_task_ext+0x27c>
          TU_ASSERT(driver, );
 8003596:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8003598:	3744      	adds	r7, #68	; 0x44
 800359a:	46bd      	mov	sp, r7
 800359c:	bd90      	pop	{r4, r7, pc}
 800359e:	bf00      	nop
 80035a0:	20002940 	.word	0x20002940
 80035a4:	2000290c 	.word	0x2000290c
 80035a8:	00000000 	.word	0x00000000
 80035ac:	e000edf0 	.word	0xe000edf0
	...

080035b8 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 f9d2 	bl	8004974 <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	7bf8      	ldrb	r0, [r7, #15]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	2101      	movs	r1, #1
 80035da:	4798      	blx	r3
 80035dc:	4603      	mov	r3, r0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b094      	sub	sp, #80	; 0x50
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80035f4:	2000      	movs	r0, #0
 80035f6:	f001 f9bd 	bl	8004974 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b60      	cmp	r3, #96	; 0x60
 8003606:	d10a      	bne.n	800361e <process_control_request+0x36>
 8003608:	4ba4      	ldr	r3, [pc, #656]	; (800389c <process_control_request+0x2b4>)
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d000      	beq.n	800361a <process_control_request+0x32>
 8003618:	be00      	bkpt	0x0000
 800361a:	2300      	movs	r3, #0
 800361c:	e247      	b.n	8003aae <process_control_request+0x4c6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d10f      	bne.n	800364c <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 800362c:	4b9c      	ldr	r3, [pc, #624]	; (80038a0 <process_control_request+0x2b8>)
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <process_control_request+0x4e>
 8003632:	2300      	movs	r3, #0
 8003634:	e23b      	b.n	8003aae <process_control_request+0x4c6>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8003636:	489a      	ldr	r0, [pc, #616]	; (80038a0 <process_control_request+0x2b8>)
 8003638:	f001 f99c 	bl	8004974 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f3af 8000 	nop.w
 8003648:	4603      	mov	r3, r0
 800364a:	e230      	b.n	8003aae <process_control_request+0x4c6>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	f000 8177 	beq.w	800394a <process_control_request+0x362>
 800365c:	2b02      	cmp	r3, #2
 800365e:	f300 821a 	bgt.w	8003a96 <process_control_request+0x4ae>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <process_control_request+0x86>
 8003666:	2b01      	cmp	r3, #1
 8003668:	f000 811e 	beq.w	80038a8 <process_control_request+0x2c0>
 800366c:	e213      	b.n	8003a96 <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b20      	cmp	r3, #32
 800367a:	d123      	bne.n	80036c4 <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	889b      	ldrh	r3, [r3, #4]
 8003680:	b29b      	uxth	r3, r3
 8003682:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003684:	8afb      	ldrh	r3, [r7, #22]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800368c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003690:	2b0f      	cmp	r3, #15
 8003692:	d901      	bls.n	8003698 <process_control_request+0xb0>
 8003694:	2300      	movs	r3, #0
 8003696:	e20a      	b.n	8003aae <process_control_request+0x4c6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8003698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800369c:	4a81      	ldr	r2, [pc, #516]	; (80038a4 <process_control_request+0x2bc>)
 800369e:	4413      	add	r3, r2
 80036a0:	78db      	ldrb	r3, [r3, #3]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fd78 	bl	8003198 <get_driver>
 80036a8:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <process_control_request+0xcc>
 80036b0:	2300      	movs	r3, #0
 80036b2:	e1fc      	b.n	8003aae <process_control_request+0x4c6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff ff7c 	bl	80035b8 <invoke_class_control>
 80036c0:	4603      	mov	r3, r0
 80036c2:	e1f4      	b.n	8003aae <process_control_request+0x4c6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 80036d2:	4b72      	ldr	r3, [pc, #456]	; (800389c <process_control_request+0x2b4>)
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d000      	beq.n	80036e4 <process_control_request+0xfc>
 80036e2:	be00      	bkpt	0x0000
        return false;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e1e2      	b.n	8003aae <process_control_request+0x4c6>
      }

      switch ( p_request->bRequest )
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	785b      	ldrb	r3, [r3, #1]
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	f200 80c8 	bhi.w	8003882 <process_control_request+0x29a>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <process_control_request+0x110>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800384d 	.word	0x0800384d
 80036fc:	08003829 	.word	0x08003829
 8003700:	08003883 	.word	0x08003883
 8003704:	08003805 	.word	0x08003805
 8003708:	08003883 	.word	0x08003883
 800370c:	08003721 	.word	0x08003721
 8003710:	080037eb 	.word	0x080037eb
 8003714:	08003883 	.word	0x08003883
 8003718:	08003745 	.word	0x08003745
 800371c:	0800375d 	.word	0x0800375d
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8003720:	6838      	ldr	r0, [r7, #0]
 8003722:	f001 f937 	bl	8004994 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	885b      	ldrh	r3, [r3, #2]
 800372a:	b29b      	uxth	r3, r3
 800372c:	b2da      	uxtb	r2, r3
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fc4a 	bl	8004fcc <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8003738:	4a5a      	ldr	r2, [pc, #360]	; (80038a4 <process_control_request+0x2bc>)
 800373a:	7813      	ldrb	r3, [r2, #0]
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	7013      	strb	r3, [r2, #0]
        break;
 8003742:	e0aa      	b.n	800389a <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8003744:	4b57      	ldr	r3, [pc, #348]	; (80038a4 <process_control_request+0x2bc>)
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 800374c:	f107 020f 	add.w	r2, r7, #15
 8003750:	79f8      	ldrb	r0, [r7, #7]
 8003752:	2301      	movs	r3, #1
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	f001 f891 	bl	800487c <tud_control_xfer>
        }
        break;
 800375a:	e09e      	b.n	800389a <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	885b      	ldrh	r3, [r3, #2]
 8003760:	b29b      	uxth	r3, r3
 8003762:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8003766:	4b4f      	ldr	r3, [pc, #316]	; (80038a4 <process_control_request+0x2bc>)
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003770:	429a      	cmp	r2, r3
 8003772:	d030      	beq.n	80037d6 <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 8003774:	4b4b      	ldr	r3, [pc, #300]	; (80038a4 <process_control_request+0x2bc>)
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00f      	beq.n	800379e <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fd69 	bl	8005258 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8003786:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <process_control_request+0x2bc>)
 8003788:	789b      	ldrb	r3, [r3, #2]
 800378a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fd6d 	bl	8003270 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8003796:	4a43      	ldr	r2, [pc, #268]	; (80038a4 <process_control_request+0x2bc>)
 8003798:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800379c:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 800379e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d017      	beq.n	80037d6 <process_control_request+0x1ee>
 80037a6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f986 	bl	8003ac0 <process_set_config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f083 0301 	eor.w	r3, r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <process_control_request+0x1ee>
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <process_control_request+0x2b4>)
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d000      	beq.n	80037d2 <process_control_request+0x1ea>
 80037d0:	be00      	bkpt	0x0000
 80037d2:	2300      	movs	r3, #0
 80037d4:	e16b      	b.n	8003aae <process_control_request+0x4c6>
          }

          _usbd_dev.cfg_num = cfg_num;
 80037d6:	4a33      	ldr	r2, [pc, #204]	; (80038a4 <process_control_request+0x2bc>)
 80037d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037dc:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 ffec 	bl	80047c0 <tud_control_status>
        }
        break;
 80037e8:	e057      	b.n	800389a <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fa82 	bl	8003cf8 <process_get_descriptor>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f083 0301 	eor.w	r3, r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d04b      	beq.n	8003898 <process_control_request+0x2b0>
 8003800:	2300      	movs	r3, #0
 8003802:	e154      	b.n	8003aae <process_control_request+0x4c6>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	885b      	ldrh	r3, [r3, #2]
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d001      	beq.n	8003812 <process_control_request+0x22a>
 800380e:	2300      	movs	r3, #0
 8003810:	e14d      	b.n	8003aae <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8003812:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <process_control_request+0x2bc>)
 8003814:	7813      	ldrb	r3, [r2, #0]
 8003816:	f043 0308 	orr.w	r3, r3, #8
 800381a:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	6839      	ldr	r1, [r7, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 ffcd 	bl	80047c0 <tud_control_status>
        break;
 8003826:	e038      	b.n	800389a <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	885b      	ldrh	r3, [r3, #2]
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d001      	beq.n	8003836 <process_control_request+0x24e>
 8003832:	2300      	movs	r3, #0
 8003834:	e13b      	b.n	8003aae <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8003836:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <process_control_request+0x2bc>)
 8003838:	7813      	ldrb	r3, [r2, #0]
 800383a:	f36f 03c3 	bfc	r3, #3, #1
 800383e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	6839      	ldr	r1, [r7, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 ffbb 	bl	80047c0 <tud_control_status>
        break;
 800384a:	e026      	b.n	800389a <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 800384c:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <process_control_request+0x2bc>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	b2db      	uxtb	r3, r3
 8003854:	b29b      	uxth	r3, r3
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <process_control_request+0x2bc>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	b2db      	uxtb	r3, r3
 8003864:	b29b      	uxth	r3, r3
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	b29b      	uxth	r3, r3
 800386c:	4313      	orrs	r3, r2
 800386e:	b29b      	uxth	r3, r3
 8003870:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 8003872:	f107 020c 	add.w	r2, r7, #12
 8003876:	79f8      	ldrb	r0, [r7, #7]
 8003878:	2302      	movs	r3, #2
 800387a:	6839      	ldr	r1, [r7, #0]
 800387c:	f000 fffe 	bl	800487c <tud_control_xfer>
        }
        break;
 8003880:	e00b      	b.n	800389a <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <process_control_request+0x2b4>)
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d000      	beq.n	8003894 <process_control_request+0x2ac>
 8003892:	be00      	bkpt	0x0000
 8003894:	2300      	movs	r3, #0
 8003896:	e10a      	b.n	8003aae <process_control_request+0x4c6>
        break;
 8003898:	bf00      	nop
      }
    break;
 800389a:	e107      	b.n	8003aac <process_control_request+0x4c4>
 800389c:	e000edf0 	.word	0xe000edf0
 80038a0:	00000000 	.word	0x00000000
 80038a4:	2000290c 	.word	0x2000290c

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	889b      	ldrh	r3, [r3, #4]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	82bb      	strh	r3, [r7, #20]
 80038b0:	8abb      	ldrh	r3, [r7, #20]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80038b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038bc:	2b0f      	cmp	r3, #15
 80038be:	d901      	bls.n	80038c4 <process_control_request+0x2dc>
 80038c0:	2300      	movs	r3, #0
 80038c2:	e0f4      	b.n	8003aae <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80038c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038c8:	4a7b      	ldr	r2, [pc, #492]	; (8003ab8 <process_control_request+0x4d0>)
 80038ca:	4413      	add	r3, r2
 80038cc:	78db      	ldrb	r3, [r3, #3]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fc62 	bl	8003198 <get_driver>
 80038d4:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <process_control_request+0x2f8>
 80038dc:	2300      	movs	r3, #0
 80038de:	e0e6      	b.n	8003aae <process_control_request+0x4c6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fe66 	bl	80035b8 <invoke_class_control>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f083 0301 	eor.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d026      	beq.n	8003946 <process_control_request+0x35e>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <process_control_request+0x322>
 8003906:	2300      	movs	r3, #0
 8003908:	e0d1      	b.n	8003aae <process_control_request+0x4c6>

        switch(p_request->bRequest)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	785b      	ldrb	r3, [r3, #1]
 800390e:	3b0a      	subs	r3, #10
 8003910:	2b01      	cmp	r3, #1
 8003912:	d816      	bhi.n	8003942 <process_control_request+0x35a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8003914:	2000      	movs	r0, #0
 8003916:	f001 f82d 	bl	8004974 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	2b0a      	cmp	r3, #10
 8003920:	d109      	bne.n	8003936 <process_control_request+0x34e>
            {
              uint8_t alternate = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8003926:	f107 020b 	add.w	r2, r7, #11
 800392a:	79f8      	ldrb	r0, [r7, #7]
 800392c:	2301      	movs	r3, #1
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	f000 ffa4 	bl	800487c <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8003934:	e008      	b.n	8003948 <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	6839      	ldr	r1, [r7, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 ff40 	bl	80047c0 <tud_control_status>
          break;
 8003940:	e002      	b.n	8003948 <process_control_request+0x360>

          default: return false;
 8003942:	2300      	movs	r3, #0
 8003944:	e0b3      	b.n	8003aae <process_control_request+0x4c6>
        }
      }
 8003946:	bf00      	nop
    }
    break;
 8003948:	e0b0      	b.n	8003aac <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	889b      	ldrh	r3, [r3, #4]
 800394e:	b29b      	uxth	r3, r3
 8003950:	823b      	strh	r3, [r7, #16]
 8003952:	8a3b      	ldrh	r3, [r7, #16]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800395a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800395e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003960:	7cbb      	ldrb	r3, [r7, #18]
 8003962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003966:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8003968:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800396c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003970:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	09db      	lsrs	r3, r3, #7
 8003976:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8003978:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 800397c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003980:	2b05      	cmp	r3, #5
 8003982:	d90a      	bls.n	800399a <process_control_request+0x3b2>
 8003984:	4b4d      	ldr	r3, [pc, #308]	; (8003abc <process_control_request+0x4d4>)
 8003986:	643b      	str	r3, [r7, #64]	; 0x40
 8003988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d000      	beq.n	8003996 <process_control_request+0x3ae>
 8003994:	be00      	bkpt	0x0000
 8003996:	2300      	movs	r3, #0
 8003998:	e089      	b.n	8003aae <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800399a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800399e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80039a2:	4945      	ldr	r1, [pc, #276]	; (8003ab8 <process_control_request+0x4d0>)
 80039a4:	0052      	lsls	r2, r2, #1
 80039a6:	440a      	add	r2, r1
 80039a8:	4413      	add	r3, r2
 80039aa:	3313      	adds	r3, #19
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fbf2 	bl	8003198 <get_driver>
 80039b4:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00c      	beq.n	80039de <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 80039c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <process_control_request+0x3e6>
 80039ca:	2300      	movs	r3, #0
 80039cc:	e06f      	b.n	8003aae <process_control_request+0x4c6>
        return invoke_class_control(rhport, driver, p_request);
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fdef 	bl	80035b8 <invoke_class_control>
 80039da:	4603      	mov	r3, r0
 80039dc:	e067      	b.n	8003aae <process_control_request+0x4c6>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	785b      	ldrb	r3, [r3, #1]
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d018      	beq.n	8003a18 <process_control_request+0x430>
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	dc48      	bgt.n	8003a7c <process_control_request+0x494>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <process_control_request+0x40c>
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d012      	beq.n	8003a18 <process_control_request+0x430>
 80039f2:	e043      	b.n	8003a7c <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80039f4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fe95 	bl	800472c <usbd_edpt_stalled>
 8003a02:	4603      	mov	r3, r0
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 8003a08:	f107 0208 	add.w	r2, r7, #8
 8003a0c:	79f8      	ldrb	r0, [r7, #7]
 8003a0e:	2302      	movs	r3, #2
 8003a10:	6839      	ldr	r1, [r7, #0]
 8003a12:	f000 ff33 	bl	800487c <tud_control_xfer>
          }
          break;
 8003a16:	e03d      	b.n	8003a94 <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	885b      	ldrh	r3, [r3, #2]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d112      	bne.n	8003a48 <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8003a2a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fe2e 	bl	8004694 <usbd_edpt_clear_stall>
 8003a38:	e006      	b.n	8003a48 <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8003a3a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fdda 	bl	80045fc <usbd_edpt_stall>
              }
            }

            if (driver)
 8003a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d021      	beq.n	8003a92 <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fdaf 	bl	80035b8 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f000 ff8a 	bl	8004974 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <process_control_request+0x4d0>)
 8003a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d110      	bne.n	8003a92 <process_control_request+0x4aa>
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	6839      	ldr	r1, [r7, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fea3 	bl	80047c0 <tud_control_status>
            }
          }
          break;
 8003a7a:	e00a      	b.n	8003a92 <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <process_control_request+0x4d4>)
 8003a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d000      	beq.n	8003a8e <process_control_request+0x4a6>
 8003a8c:	be00      	bkpt	0x0000
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e00d      	b.n	8003aae <process_control_request+0x4c6>
          break;
 8003a92:	bf00      	nop
        }
      }
    }
    break;
 8003a94:	e00a      	b.n	8003aac <process_control_request+0x4c4>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <process_control_request+0x4d4>)
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d000      	beq.n	8003aa8 <process_control_request+0x4c0>
 8003aa6:	be00      	bkpt	0x0000
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <process_control_request+0x4c6>
  }

  return true;
 8003aac:	2301      	movs	r3, #1
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3750      	adds	r7, #80	; 0x50
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000290c 	.word	0x2000290c
 8003abc:	e000edf0 	.word	0xe000edf0

08003ac0 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b094      	sub	sp, #80	; 0x50
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	460a      	mov	r2, r1
 8003aca:	71fb      	strb	r3, [r7, #7]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8003ad0:	79bb      	ldrb	r3, [r7, #6]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fc ff68 	bl	80009ac <tud_descriptor_configuration_cb>
 8003adc:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8003ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <process_set_config+0x2c>
 8003ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d00a      	beq.n	8003b02 <process_set_config+0x42>
 8003aec:	4b7c      	ldr	r3, [pc, #496]	; (8003ce0 <process_set_config+0x220>)
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d000      	beq.n	8003afe <process_set_config+0x3e>
 8003afc:	be00      	bkpt	0x0000
 8003afe:	2300      	movs	r3, #0
 8003b00:	e0e9      	b.n	8003cd6 <process_set_config+0x216>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8003b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b04:	79db      	ldrb	r3, [r3, #7]
 8003b06:	115b      	asrs	r3, r3, #5
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	b2d9      	uxtb	r1, r3
 8003b0e:	4a75      	ldr	r2, [pc, #468]	; (8003ce4 <process_set_config+0x224>)
 8003b10:	7813      	ldrb	r3, [r2, #0]
 8003b12:	f361 1304 	bfi	r3, r1, #4, #1
 8003b16:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8003b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1a:	79db      	ldrb	r3, [r3, #7]
 8003b1c:	119b      	asrs	r3, r3, #6
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	b2d9      	uxtb	r1, r3
 8003b24:	4a6f      	ldr	r2, [pc, #444]	; (8003ce4 <process_set_config+0x224>)
 8003b26:	7813      	ldrb	r3, [r2, #0]
 8003b28:	f361 1345 	bfi	r3, r1, #5, #1
 8003b2c:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8003b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b30:	3309      	adds	r3, #9
 8003b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8003b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b36:	885b      	ldrh	r3, [r3, #2]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3e:	4413      	add	r3, r2
 8003b40:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 8003b42:	e0bd      	b.n	8003cc0 <process_set_config+0x200>
  {
    uint8_t assoc_itf_count = 1;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4c:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	3301      	adds	r3, #1
 8003b52:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8003b54:	2b0b      	cmp	r3, #11
 8003b56:	d10f      	bne.n	8003b78 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8003b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 8003b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5e:	78db      	ldrb	r3, [r3, #3]
 8003b60:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b66:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8003b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7a:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d00a      	beq.n	8003b9c <process_set_config+0xdc>
 8003b86:	4b56      	ldr	r3, [pc, #344]	; (8003ce0 <process_set_config+0x220>)
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d000      	beq.n	8003b98 <process_set_config+0xd8>
 8003b96:	be00      	bkpt	0x0000
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e09c      	b.n	8003cd6 <process_set_config+0x216>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8003b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9e:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8003ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003bae:	e06e      	b.n	8003c8e <process_set_config+0x1ce>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8003bb0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff faef 	bl	8003198 <get_driver>
 8003bba:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <process_set_config+0x118>
 8003bc2:	4b47      	ldr	r3, [pc, #284]	; (8003ce0 <process_set_config+0x220>)
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d000      	beq.n	8003bd4 <process_set_config+0x114>
 8003bd2:	be00      	bkpt	0x0000
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e07e      	b.n	8003cd6 <process_set_config+0x216>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003bde:	79f8      	ldrb	r0, [r7, #7]
 8003be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003be2:	4798      	blx	r3
 8003be4:	4603      	mov	r3, r0
 8003be6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8003be8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d94a      	bls.n	8003c84 <process_set_config+0x1c4>
 8003bee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003bf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d846      	bhi.n	8003c84 <process_set_config+0x1c4>
        // Open successfully
        TU_LOG(USBD_DBG, "  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8003bf6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d107      	bne.n	8003c0e <process_set_config+0x14e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	4a39      	ldr	r2, [pc, #228]	; (8003ce8 <process_set_config+0x228>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d102      	bne.n	8003c0e <process_set_config+0x14e>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003c14:	e024      	b.n	8003c60 <process_set_config+0x1a0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	789a      	ldrb	r2, [r3, #2]
 8003c1a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003c1e:	4413      	add	r3, r2
 8003c20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8003c24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c28:	4a2e      	ldr	r2, [pc, #184]	; (8003ce4 <process_set_config+0x224>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	78db      	ldrb	r3, [r3, #3]
 8003c2e:	2bff      	cmp	r3, #255	; 0xff
 8003c30:	d00a      	beq.n	8003c48 <process_set_config+0x188>
 8003c32:	4b2b      	ldr	r3, [pc, #172]	; (8003ce0 <process_set_config+0x220>)
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d000      	beq.n	8003c44 <process_set_config+0x184>
 8003c42:	be00      	bkpt	0x0000
 8003c44:	2300      	movs	r3, #0
 8003c46:	e046      	b.n	8003cd6 <process_set_config+0x216>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8003c48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c4c:	4a25      	ldr	r2, [pc, #148]	; (8003ce4 <process_set_config+0x224>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8003c54:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003c56:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003c60:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003c64:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d3d4      	bcc.n	8003c16 <process_set_config+0x156>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8003c6c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003c70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003c72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c74:	481d      	ldr	r0, [pc, #116]	; (8003cec <process_set_config+0x22c>)
 8003c76:	f002 fa5d 	bl	8006134 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8003c7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c7e:	4413      	add	r3, r2
 8003c80:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 8003c82:	e00b      	b.n	8003c9c <process_set_config+0x1dc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8003c84:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <process_set_config+0x230>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	da89      	bge.n	8003bb0 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <process_set_config+0x230>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	da0a      	bge.n	8003cc0 <process_set_config+0x200>
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <process_set_config+0x220>)
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d000      	beq.n	8003cbc <process_set_config+0x1fc>
 8003cba:	be00      	bkpt	0x0000
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e00a      	b.n	8003cd6 <process_set_config+0x216>
  while( p_desc < desc_end )
 8003cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	f4ff af3d 	bcc.w	8003b44 <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <process_set_config+0x234>)
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <process_set_config+0x214>
 8003cd0:	f3af 8000 	nop.w

  return true;
 8003cd4:	2301      	movs	r3, #1
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3750      	adds	r7, #80	; 0x50
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	e000edf0 	.word	0xe000edf0
 8003ce4:	2000290c 	.word	0x2000290c
 8003ce8:	08000ec1 	.word	0x08000ec1
 8003cec:	2000291f 	.word	0x2000291f
 8003cf0:	2000293c 	.word	0x2000293c
 8003cf4:	00000000 	.word	0x00000000

08003cf8 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b094      	sub	sp, #80	; 0x50
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	6039      	str	r1, [r7, #0]
 8003d02:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	885b      	ldrh	r3, [r3, #2]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8003d0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	885b      	ldrh	r3, [r3, #2]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003d20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8003d28:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	2b0e      	cmp	r3, #14
 8003d30:	f200 80bc 	bhi.w	8003eac <process_get_descriptor+0x1b4>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <process_get_descriptor+0x44>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d79 	.word	0x08003d79
 8003d40:	08003ddd 	.word	0x08003ddd
 8003d44:	08003e45 	.word	0x08003e45
 8003d48:	08003ead 	.word	0x08003ead
 8003d4c:	08003ead 	.word	0x08003ead
 8003d50:	08003e7b 	.word	0x08003e7b
 8003d54:	08003ddd 	.word	0x08003ddd
 8003d58:	08003ead 	.word	0x08003ead
 8003d5c:	08003ead 	.word	0x08003ead
 8003d60:	08003ead 	.word	0x08003ead
 8003d64:	08003ead 	.word	0x08003ead
 8003d68:	08003ead 	.word	0x08003ead
 8003d6c:	08003ead 	.word	0x08003ead
 8003d70:	08003ead 	.word	0x08003ead
 8003d74:	08003d8f 	.word	0x08003d8f
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8003d78:	f7fc fe0e 	bl	8000998 <tud_descriptor_device_cb>
 8003d7c:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8003d7e:	79f8      	ldrb	r0, [r7, #7]
 8003d80:	2312      	movs	r3, #18
 8003d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d84:	6839      	ldr	r1, [r7, #0]
 8003d86:	f000 fd79 	bl	800487c <tud_control_xfer>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	e08f      	b.n	8003eae <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8003d8e:	4b4a      	ldr	r3, [pc, #296]	; (8003eb8 <process_get_descriptor+0x1c0>)
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <process_get_descriptor+0xa0>
 8003d94:	2300      	movs	r3, #0
 8003d96:	e08a      	b.n	8003eae <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8003d98:	f3af 8000 	nop.w
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8003da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <process_get_descriptor+0xc4>
 8003da6:	4b45      	ldr	r3, [pc, #276]	; (8003ebc <process_get_descriptor+0x1c4>)
 8003da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d000      	beq.n	8003db8 <process_get_descriptor+0xc0>
 8003db6:	be00      	bkpt	0x0000
 8003db8:	2300      	movs	r3, #0
 8003dba:	e078      	b.n	8003eae <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8003dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8003dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003dd0:	79f8      	ldrb	r0, [r7, #7]
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	f000 fd52 	bl	800487c <tud_control_xfer>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	e068      	b.n	8003eae <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8003ddc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d107      	bne.n	8003df4 <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8003de4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc fddf 	bl	80009ac <tud_descriptor_configuration_cb>
 8003dee:	4603      	mov	r3, r0
 8003df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df2:	e00b      	b.n	8003e0c <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8003df4:	4b32      	ldr	r3, [pc, #200]	; (8003ec0 <process_get_descriptor+0x1c8>)
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <process_get_descriptor+0x106>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e057      	b.n	8003eae <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8003dfe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003e02:	4618      	mov	r0, r3
 8003e04:	f3af 8000 	nop.w
 8003e08:	4603      	mov	r3, r0
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8003e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <process_get_descriptor+0x130>
 8003e12:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <process_get_descriptor+0x1c4>)
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d000      	beq.n	8003e24 <process_get_descriptor+0x12c>
 8003e22:	be00      	bkpt	0x0000
 8003e24:	2300      	movs	r3, #0
 8003e26:	e042      	b.n	8003eae <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8003e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8003e34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003e38:	79f8      	ldrb	r0, [r7, #7]
 8003e3a:	6839      	ldr	r1, [r7, #0]
 8003e3c:	f000 fd1e 	bl	800487c <tud_control_xfer>
 8003e40:	4603      	mov	r3, r0
 8003e42:	e034      	b.n	8003eae <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	889b      	ldrh	r3, [r3, #4]
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc fdb9 	bl	80009c8 <tud_descriptor_string_cb>
 8003e56:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <process_get_descriptor+0x16a>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e025      	b.n	8003eae <process_get_descriptor+0x1b6>
 8003e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e64:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	79f8      	ldrb	r0, [r7, #7]
 8003e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	f000 fd03 	bl	800487c <tud_control_xfer>
 8003e76:	4603      	mov	r3, r0
 8003e78:	e019      	b.n	8003eae <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <process_get_descriptor+0x1cc>)
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <process_get_descriptor+0x18c>
 8003e80:	2300      	movs	r3, #0
 8003e82:	e014      	b.n	8003eae <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8003e84:	f3af 8000 	nop.w
 8003e88:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <process_get_descriptor+0x19c>
 8003e90:	2300      	movs	r3, #0
 8003e92:	e00c      	b.n	8003eae <process_get_descriptor+0x1b6>
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	79f8      	ldrb	r0, [r7, #7]
 8003ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ea2:	6839      	ldr	r1, [r7, #0]
 8003ea4:	f000 fcea 	bl	800487c <tud_control_xfer>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	e000      	b.n	8003eae <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8003eac:	2300      	movs	r3, #0
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3750      	adds	r7, #80	; 0x50
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	00000000 	.word	0x00000000
 8003ebc:	e000edf0 	.word	0xe000edf0
	...

08003ec8 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b0aa      	sub	sp, #168	; 0xa8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	785b      	ldrb	r3, [r3, #1]
 8003ed8:	3b02      	subs	r3, #2
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	f200 8198 	bhi.w	8004210 <dcd_event_handler+0x348>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <dcd_event_handler+0x20>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	080040fd 	.word	0x080040fd
 8003ef0:	08003fb9 	.word	0x08003fb9
 8003ef4:	0800405f 	.word	0x0800405f
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 8003ef8:	4a82      	ldr	r2, [pc, #520]	; (8004104 <dcd_event_handler+0x23c>)
 8003efa:	7813      	ldrb	r3, [r2, #0]
 8003efc:	f36f 0300 	bfc	r3, #0, #1
 8003f00:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 8003f02:	4a80      	ldr	r2, [pc, #512]	; (8004104 <dcd_event_handler+0x23c>)
 8003f04:	7813      	ldrb	r3, [r2, #0]
 8003f06:	f36f 0341 	bfc	r3, #1, #1
 8003f0a:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 8003f0c:	4b7d      	ldr	r3, [pc, #500]	; (8004104 <dcd_event_handler+0x23c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 8003f12:	4a7c      	ldr	r2, [pc, #496]	; (8004104 <dcd_event_handler+0x23c>)
 8003f14:	7813      	ldrb	r3, [r2, #0]
 8003f16:	f36f 0382 	bfc	r3, #2, #1
 8003f1a:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8003f1c:	4b7a      	ldr	r3, [pc, #488]	; (8004108 <dcd_event_handler+0x240>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8003f30:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003f34:	f083 0301 	eor.w	r3, r3, #1
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <dcd_event_handler+0x8a>
 8003f3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 8003f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	4798      	blx	r3
}
 8003f50:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8003f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f56:	3304      	adds	r3, #4
 8003f58:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff f88b 	bl	8003078 <tu_fifo_write>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 8003f68:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003f6c:	f083 0301 	eor.w	r3, r3, #1
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <dcd_event_handler+0xc2>
 8003f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 8003f7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2001      	movs	r0, #1
 8003f86:	4798      	blx	r3
}
 8003f88:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8003f8a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003f8e:	f083 0301 	eor.w	r3, r3, #1
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <dcd_event_handler+0xe8>
 8003f98:	4b5c      	ldr	r3, [pc, #368]	; (800410c <dcd_event_handler+0x244>)
 8003f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <dcd_event_handler+0xec>
 8003fac:	be00      	bkpt	0x0000
 8003fae:	e001      	b.n	8003fb4 <dcd_event_handler+0xec>

  return success;
 8003fb0:	bf00      	nop
 8003fb2:	e172      	b.n	800429a <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8003fb4:	bf00      	nop
    break;
 8003fb6:	e170      	b.n	800429a <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 8003fb8:	4b52      	ldr	r3, [pc, #328]	; (8004104 <dcd_event_handler+0x23c>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8164 	beq.w	8004290 <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 8003fc8:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <dcd_event_handler+0x23c>)
 8003fca:	7813      	ldrb	r3, [r2, #0]
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8003fd2:	4b4d      	ldr	r3, [pc, #308]	; (8004108 <dcd_event_handler+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 8003fe4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003fe8:	f083 0301 	eor.w	r3, r3, #1
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <dcd_event_handler+0x13a>
 8003ff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ff6:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 8003ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	4798      	blx	r3
}
 8004000:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8004002:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004006:	3304      	adds	r3, #4
 8004008:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff f834 	bl	8003078 <tu_fifo_write>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 8004016:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800401a:	f083 0301 	eor.w	r3, r3, #1
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <dcd_event_handler+0x16c>
 8004024:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004028:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 800402a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2001      	movs	r0, #1
 8004030:	4798      	blx	r3
}
 8004032:	bf00      	nop
  TU_ASSERT(success);
 8004034:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004038:	f083 0301 	eor.w	r3, r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <dcd_event_handler+0x18e>
 8004042:	4b32      	ldr	r3, [pc, #200]	; (800410c <dcd_event_handler+0x244>)
 8004044:	66bb      	str	r3, [r7, #104]	; 0x68
 8004046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <dcd_event_handler+0x192>
 8004052:	be00      	bkpt	0x0000
 8004054:	e001      	b.n	800405a <dcd_event_handler+0x192>
  return success;
 8004056:	bf00      	nop
 8004058:	e11a      	b.n	8004290 <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 800405a:	bf00      	nop
      }
    break;
 800405c:	e118      	b.n	8004290 <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 800405e:	4b29      	ldr	r3, [pc, #164]	; (8004104 <dcd_event_handler+0x23c>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8113 	beq.w	8004294 <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 800406e:	4a25      	ldr	r2, [pc, #148]	; (8004104 <dcd_event_handler+0x23c>)
 8004070:	7813      	ldrb	r3, [r2, #0]
 8004072:	f36f 0382 	bfc	r3, #2, #1
 8004076:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8004078:	4b23      	ldr	r3, [pc, #140]	; (8004108 <dcd_event_handler+0x240>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	667b      	str	r3, [r7, #100]	; 0x64
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	663b      	str	r3, [r7, #96]	; 0x60
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 8004088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800408c:	f083 0301 	eor.w	r3, r3, #1
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d006      	beq.n	80040a4 <dcd_event_handler+0x1dc>
 8004096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004098:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 800409a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2000      	movs	r0, #0
 80040a0:	4798      	blx	r3
}
 80040a2:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80040a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040a6:	3304      	adds	r3, #4
 80040a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe ffe4 	bl	8003078 <tu_fifo_write>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 80040b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040ba:	f083 0301 	eor.w	r3, r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d006      	beq.n	80040d2 <dcd_event_handler+0x20a>
 80040c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c6:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 80040c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2001      	movs	r0, #1
 80040ce:	4798      	blx	r3
}
 80040d0:	bf00      	nop
  TU_ASSERT(success);
 80040d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80040d6:	f083 0301 	eor.w	r3, r3, #1
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <dcd_event_handler+0x22c>
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <dcd_event_handler+0x244>)
 80040e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <dcd_event_handler+0x230>
 80040f0:	be00      	bkpt	0x0000
 80040f2:	e001      	b.n	80040f8 <dcd_event_handler+0x230>
  return success;
 80040f4:	bf00      	nop
 80040f6:	e0cd      	b.n	8004294 <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 80040f8:	bf00      	nop
      }
    break;
 80040fa:	e0cb      	b.n	8004294 <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004102:	e023      	b.n	800414c <dcd_event_handler+0x284>
 8004104:	2000290c 	.word	0x2000290c
 8004108:	20002940 	.word	0x20002940
 800410c:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 8004110:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f83f 	bl	8003198 <get_driver>
 800411a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 800411e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <dcd_event_handler+0x27a>
 8004126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 8004130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	7810      	ldrb	r0, [r2, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6852      	ldr	r2, [r2, #4]
 800413e:	4611      	mov	r1, r2
 8004140:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8004142:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004146:	3301      	adds	r3, #1
 8004148:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800414c:	4b55      	ldr	r3, [pc, #340]	; (80042a4 <dcd_event_handler+0x3dc>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004156:	429a      	cmp	r2, r3
 8004158:	dada      	bge.n	8004110 <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 800415a:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <dcd_event_handler+0x3e0>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8097 	beq.w	8004298 <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 800416a:	4a4f      	ldr	r2, [pc, #316]	; (80042a8 <dcd_event_handler+0x3e0>)
 800416c:	7813      	ldrb	r3, [r2, #0]
 800416e:	f36f 0382 	bfc	r3, #2, #1
 8004172:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8004174:	f107 0308 	add.w	r3, r7, #8
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	723b      	strb	r3, [r7, #8]
 8004186:	2305      	movs	r3, #5
 8004188:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 800418a:	4b48      	ldr	r3, [pc, #288]	; (80042ac <dcd_event_handler+0x3e4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004190:	f107 0308 	add.w	r3, r7, #8
 8004194:	647b      	str	r3, [r7, #68]	; 0x44
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 800419c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80041a0:	f083 0301 	eor.w	r3, r3, #1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d006      	beq.n	80041b8 <dcd_event_handler+0x2f0>
 80041aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 80041ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2000      	movs	r0, #0
 80041b4:	4798      	blx	r3
}
 80041b6:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80041b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ba:	3304      	adds	r3, #4
 80041bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe ff5a 	bl	8003078 <tu_fifo_write>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 80041ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80041ce:	f083 0301 	eor.w	r3, r3, #1
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d006      	beq.n	80041e6 <dcd_event_handler+0x31e>
 80041d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2001      	movs	r0, #1
 80041e2:	4798      	blx	r3
}
 80041e4:	bf00      	nop
  TU_ASSERT(success);
 80041e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80041ea:	f083 0301 	eor.w	r3, r3, #1
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <dcd_event_handler+0x340>
 80041f4:	4b2e      	ldr	r3, [pc, #184]	; (80042b0 <dcd_event_handler+0x3e8>)
 80041f6:	633b      	str	r3, [r7, #48]	; 0x30
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <dcd_event_handler+0x344>
 8004204:	be00      	bkpt	0x0000
 8004206:	e001      	b.n	800420c <dcd_event_handler+0x344>
  return success;
 8004208:	bf00      	nop
 800420a:	e045      	b.n	8004298 <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 800420c:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 800420e:	e043      	b.n	8004298 <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8004210:	4b26      	ldr	r3, [pc, #152]	; (80042ac <dcd_event_handler+0x3e4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 8004220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004224:	f083 0301 	eor.w	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <dcd_event_handler+0x374>
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2000      	movs	r0, #0
 8004238:	4798      	blx	r3
}
 800423a:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	3304      	adds	r3, #4
 8004240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe ff18 	bl	8003078 <tu_fifo_write>
 8004248:	4603      	mov	r3, r0
 800424a:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 800424c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004250:	f083 0301 	eor.w	r3, r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <dcd_event_handler+0x3a0>
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2001      	movs	r0, #1
 8004264:	4798      	blx	r3
}
 8004266:	bf00      	nop
  TU_ASSERT(success);
 8004268:	7ffb      	ldrb	r3, [r7, #31]
 800426a:	f083 0301 	eor.w	r3, r3, #1
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <dcd_event_handler+0x3c0>
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <dcd_event_handler+0x3e8>)
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <dcd_event_handler+0x3c4>
 8004284:	be00      	bkpt	0x0000
 8004286:	e001      	b.n	800428c <dcd_event_handler+0x3c4>
  return success;
 8004288:	bf00      	nop
 800428a:	e006      	b.n	800429a <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 800428c:	bf00      	nop
    break;
 800428e:	e004      	b.n	800429a <dcd_event_handler+0x3d2>
    break;
 8004290:	bf00      	nop
 8004292:	e002      	b.n	800429a <dcd_event_handler+0x3d2>
    break;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <dcd_event_handler+0x3d2>
    break;
 8004298:	bf00      	nop
  }
}
 800429a:	bf00      	nop
 800429c:	37a8      	adds	r7, #168	; 0xa8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	2000293c 	.word	0x2000293c
 80042a8:	2000290c 	.word	0x2000290c
 80042ac:	20002940 	.word	0x20002940
 80042b0:	e000edf0 	.word	0xe000edf0

080042b4 <usbd_open_edpt_pair>:
  }
}

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6039      	str	r1, [r7, #0]
 80042bc:	4611      	mov	r1, r2
 80042be:	461a      	mov	r2, r3
 80042c0:	4603      	mov	r3, r0
 80042c2:	71fb      	strb	r3, [r7, #7]
 80042c4:	460b      	mov	r3, r1
 80042c6:	71bb      	strb	r3, [r7, #6]
 80042c8:	4613      	mov	r3, r2
 80042ca:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 80042cc:	2300      	movs	r3, #0
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
 80042d0:	e04d      	b.n	800436e <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d108      	bne.n	80042f0 <usbd_open_edpt_pair+0x3c>
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	78db      	ldrb	r3, [r3, #3]
 80042e2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	797b      	ldrb	r3, [r7, #5]
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00a      	beq.n	8004306 <usbd_open_edpt_pair+0x52>
 80042f0:	4b23      	ldr	r3, [pc, #140]	; (8004380 <usbd_open_edpt_pair+0xcc>)
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d000      	beq.n	8004302 <usbd_open_edpt_pair+0x4e>
 8004300:	be00      	bkpt	0x0000
 8004302:	2300      	movs	r3, #0
 8004304:	e038      	b.n	8004378 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	6a39      	ldr	r1, [r7, #32]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f83a 	bl	8004384 <usbd_edpt_open>
 8004310:	4603      	mov	r3, r0
 8004312:	f083 0301 	eor.w	r3, r3, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <usbd_open_edpt_pair+0x7e>
 800431c:	4b18      	ldr	r3, [pc, #96]	; (8004380 <usbd_open_edpt_pair+0xcc>)
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d000      	beq.n	800432e <usbd_open_edpt_pair+0x7a>
 800432c:	be00      	bkpt	0x0000
 800432e:	2300      	movs	r3, #0
 8004330:	e022      	b.n	8004378 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	789b      	ldrb	r3, [r3, #2]
 8004336:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	09db      	lsrs	r3, r3, #7
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b01      	cmp	r3, #1
 8004340:	d104      	bne.n	800434c <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	789a      	ldrb	r2, [r3, #2]
 8004346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	e003      	b.n	8004354 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	789a      	ldrb	r2, [r3, #2]
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8004366:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	3301      	adds	r3, #1
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
 800436e:	79bb      	ldrb	r3, [r7, #6]
 8004370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004372:	429a      	cmp	r2, r3
 8004374:	dbad      	blt.n	80042d2 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8004376:	2301      	movs	r3, #1
}
 8004378:	4618      	mov	r0, r3
 800437a:	3728      	adds	r7, #40	; 0x28
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	e000edf0 	.word	0xe000edf0

08004384 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	6039      	str	r1, [r7, #0]
 800438e:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <usbd_edpt_open+0x7c>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	789b      	ldrb	r3, [r3, #2]
 800439a:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d90a      	bls.n	80043be <usbd_edpt_open+0x3a>
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <usbd_edpt_open+0x80>)
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d000      	beq.n	80043ba <usbd_edpt_open+0x36>
 80043b8:	be00      	bkpt	0x0000
 80043ba:	2300      	movs	r3, #0
 80043bc:	e01c      	b.n	80043f8 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <usbd_edpt_open+0x84>)
 80043c0:	789b      	ldrb	r3, [r3, #2]
 80043c2:	4619      	mov	r1, r3
 80043c4:	6838      	ldr	r0, [r7, #0]
 80043c6:	f001 fe39 	bl	800603c <tu_edpt_validate>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f083 0301 	eor.w	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <usbd_edpt_open+0x68>
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <usbd_edpt_open+0x80>)
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d000      	beq.n	80043e8 <usbd_edpt_open+0x64>
 80043e6:	be00      	bkpt	0x0000
 80043e8:	2300      	movs	r3, #0
 80043ea:	e005      	b.n	80043f8 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fe19 	bl	8005028 <dcd_edpt_open>
 80043f6:	4603      	mov	r3, r0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	2000201c 	.word	0x2000201c
 8004404:	e000edf0 	.word	0xe000edf0
 8004408:	2000290c 	.word	0x2000290c

0800440c <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	460a      	mov	r2, r1
 8004416:	71fb      	strb	r3, [r7, #7]
 8004418:	4613      	mov	r3, r2
 800441a:	71bb      	strb	r3, [r7, #6]
 800441c:	79bb      	ldrb	r3, [r7, #6]
 800441e:	73bb      	strb	r3, [r7, #14]
 8004420:	7bbb      	ldrb	r3, [r7, #14]
 8004422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004426:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8004428:	75fb      	strb	r3, [r7, #23]
 800442a:	79bb      	ldrb	r3, [r7, #6]
 800442c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	09db      	lsrs	r3, r3, #7
 8004432:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8004434:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8004436:	7dfa      	ldrb	r2, [r7, #23]
 8004438:	7dbb      	ldrb	r3, [r7, #22]
 800443a:	0052      	lsls	r2, r2, #1
 800443c:	4413      	add	r3, r2
 800443e:	3318      	adds	r3, #24
 8004440:	4a06      	ldr	r2, [pc, #24]	; (800445c <usbd_edpt_claim+0x50>)
 8004442:	4413      	add	r3, r2
 8004444:	3307      	adds	r3, #7
 8004446:	613b      	str	r3, [r7, #16]

#if TUSB_OPT_MUTEX
  return tu_edpt_claim(ep_state, _usbd_mutex);
#else
  return tu_edpt_claim(ep_state, NULL);
 8004448:	2100      	movs	r1, #0
 800444a:	6938      	ldr	r0, [r7, #16]
 800444c:	f001 fda2 	bl	8005f94 <tu_edpt_claim>
 8004450:	4603      	mov	r3, r0
#endif
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	2000290c 	.word	0x2000290c

08004460 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	460a      	mov	r2, r1
 800446a:	71fb      	strb	r3, [r7, #7]
 800446c:	4613      	mov	r3, r2
 800446e:	71bb      	strb	r3, [r7, #6]
 8004470:	79bb      	ldrb	r3, [r7, #6]
 8004472:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004474:	7bbb      	ldrb	r3, [r7, #14]
 8004476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800447a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 800447c:	75fb      	strb	r3, [r7, #23]
 800447e:	79bb      	ldrb	r3, [r7, #6]
 8004480:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	09db      	lsrs	r3, r3, #7
 8004486:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8004488:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800448a:	7dfa      	ldrb	r2, [r7, #23]
 800448c:	7dbb      	ldrb	r3, [r7, #22]
 800448e:	0052      	lsls	r2, r2, #1
 8004490:	4413      	add	r3, r2
 8004492:	3318      	adds	r3, #24
 8004494:	4a06      	ldr	r2, [pc, #24]	; (80044b0 <usbd_edpt_release+0x50>)
 8004496:	4413      	add	r3, r2
 8004498:	3307      	adds	r3, #7
 800449a:	613b      	str	r3, [r7, #16]

#if TUSB_OPT_MUTEX
  return tu_edpt_release(ep_state, _usbd_mutex);
#else
  return tu_edpt_release(ep_state, NULL);
 800449c:	2100      	movs	r1, #0
 800449e:	6938      	ldr	r0, [r7, #16]
 80044a0:	f001 fda2 	bl	8005fe8 <tu_edpt_release>
 80044a4:	4603      	mov	r3, r0
#endif
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2000290c 	.word	0x2000290c

080044b4 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	603a      	str	r2, [r7, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	4603      	mov	r3, r0
 80044c0:	71fb      	strb	r3, [r7, #7]
 80044c2:	460b      	mov	r3, r1
 80044c4:	71bb      	strb	r3, [r7, #6]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80044ca:	4b32      	ldr	r3, [pc, #200]	; (8004594 <usbd_edpt_xfer+0xe0>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	71fb      	strb	r3, [r7, #7]
 80044d0:	79bb      	ldrb	r3, [r7, #6]
 80044d2:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80044d4:	7abb      	ldrb	r3, [r7, #10]
 80044d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044da:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80044dc:	75fb      	strb	r3, [r7, #23]
 80044de:	79bb      	ldrb	r3, [r7, #6]
 80044e0:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80044e2:	7afb      	ldrb	r3, [r7, #11]
 80044e4:	09db      	lsrs	r3, r3, #7
 80044e6:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80044e8:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80044ea:	7dfa      	ldrb	r2, [r7, #23]
 80044ec:	7dbb      	ldrb	r3, [r7, #22]
 80044ee:	492a      	ldr	r1, [pc, #168]	; (8004598 <usbd_edpt_xfer+0xe4>)
 80044f0:	0052      	lsls	r2, r2, #1
 80044f2:	440a      	add	r2, r1
 80044f4:	4413      	add	r3, r2
 80044f6:	3318      	adds	r3, #24
 80044f8:	79db      	ldrb	r3, [r3, #7]
 80044fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <usbd_edpt_xfer+0x66>
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <usbd_edpt_xfer+0xe8>)
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d000      	beq.n	8004516 <usbd_edpt_xfer+0x62>
 8004514:	be00      	bkpt	0x0000
 8004516:	2300      	movs	r3, #0
 8004518:	e038      	b.n	800458c <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 800451a:	7dfa      	ldrb	r2, [r7, #23]
 800451c:	7dbb      	ldrb	r3, [r7, #22]
 800451e:	491e      	ldr	r1, [pc, #120]	; (8004598 <usbd_edpt_xfer+0xe4>)
 8004520:	0052      	lsls	r2, r2, #1
 8004522:	440a      	add	r2, r1
 8004524:	4413      	add	r3, r2
 8004526:	f103 0218 	add.w	r2, r3, #24
 800452a:	79d3      	ldrb	r3, [r2, #7]
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8004532:	88bb      	ldrh	r3, [r7, #4]
 8004534:	79b9      	ldrb	r1, [r7, #6]
 8004536:	79f8      	ldrb	r0, [r7, #7]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	f000 fed3 	bl	80052e4 <dcd_edpt_xfer>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <usbd_edpt_xfer+0x94>
  {
    return true;
 8004544:	2301      	movs	r3, #1
 8004546:	e021      	b.n	800458c <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8004548:	7dfa      	ldrb	r2, [r7, #23]
 800454a:	7dbb      	ldrb	r3, [r7, #22]
 800454c:	4912      	ldr	r1, [pc, #72]	; (8004598 <usbd_edpt_xfer+0xe4>)
 800454e:	0052      	lsls	r2, r2, #1
 8004550:	440a      	add	r2, r1
 8004552:	4413      	add	r3, r2
 8004554:	f103 0218 	add.w	r2, r3, #24
 8004558:	79d3      	ldrb	r3, [r2, #7]
 800455a:	f36f 0300 	bfc	r3, #0, #1
 800455e:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8004560:	7dfa      	ldrb	r2, [r7, #23]
 8004562:	7dbb      	ldrb	r3, [r7, #22]
 8004564:	490c      	ldr	r1, [pc, #48]	; (8004598 <usbd_edpt_xfer+0xe4>)
 8004566:	0052      	lsls	r2, r2, #1
 8004568:	440a      	add	r2, r1
 800456a:	4413      	add	r3, r2
 800456c:	f103 0218 	add.w	r2, r3, #24
 8004570:	79d3      	ldrb	r3, [r2, #7]
 8004572:	f36f 0382 	bfc	r3, #2, #1
 8004576:	71d3      	strb	r3, [r2, #7]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <usbd_edpt_xfer+0xe8>)
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d000      	beq.n	800458a <usbd_edpt_xfer+0xd6>
 8004588:	be00      	bkpt	0x0000
    return false;
 800458a:	2300      	movs	r3, #0
  }
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	2000201c 	.word	0x2000201c
 8004598:	2000290c 	.word	0x2000290c
 800459c:	e000edf0 	.word	0xe000edf0

080045a0 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	460a      	mov	r2, r1
 80045aa:	71fb      	strb	r3, [r7, #7]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71bb      	strb	r3, [r7, #6]
 80045b0:	79bb      	ldrb	r3, [r7, #6]
 80045b2:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80045b4:	7b3b      	ldrb	r3, [r7, #12]
 80045b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ba:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	79bb      	ldrb	r3, [r7, #6]
 80045c0:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80045c2:	7b7b      	ldrb	r3, [r7, #13]
 80045c4:	09db      	lsrs	r3, r3, #7
 80045c6:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80045c8:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	7bbb      	ldrb	r3, [r7, #14]
 80045ce:	490a      	ldr	r1, [pc, #40]	; (80045f8 <usbd_edpt_busy+0x58>)
 80045d0:	0052      	lsls	r2, r2, #1
 80045d2:	440a      	add	r2, r1
 80045d4:	4413      	add	r3, r2
 80045d6:	3318      	adds	r3, #24
 80045d8:	79db      	ldrb	r3, [r3, #7]
 80045da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	2000290c 	.word	0x2000290c

080045fc <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	460a      	mov	r2, r1
 8004606:	71fb      	strb	r3, [r7, #7]
 8004608:	4613      	mov	r3, r2
 800460a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800460c:	4b1f      	ldr	r3, [pc, #124]	; (800468c <usbd_edpt_stall+0x90>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	71fb      	strb	r3, [r7, #7]
 8004612:	79bb      	ldrb	r3, [r7, #6]
 8004614:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004616:	7b3b      	ldrb	r3, [r7, #12]
 8004618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800461c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	79bb      	ldrb	r3, [r7, #6]
 8004622:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004624:	7b7b      	ldrb	r3, [r7, #13]
 8004626:	09db      	lsrs	r3, r3, #7
 8004628:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800462a:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 800462c:	7bfa      	ldrb	r2, [r7, #15]
 800462e:	7bbb      	ldrb	r3, [r7, #14]
 8004630:	4917      	ldr	r1, [pc, #92]	; (8004690 <usbd_edpt_stall+0x94>)
 8004632:	0052      	lsls	r2, r2, #1
 8004634:	440a      	add	r2, r1
 8004636:	4413      	add	r3, r2
 8004638:	3318      	adds	r3, #24
 800463a:	79db      	ldrb	r3, [r3, #7]
 800463c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d11d      	bne.n	8004682 <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8004646:	79ba      	ldrb	r2, [r7, #6]
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	4611      	mov	r1, r2
 800464c:	4618      	mov	r0, r3
 800464e:	f000 ff9f 	bl	8005590 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8004652:	7bfa      	ldrb	r2, [r7, #15]
 8004654:	7bbb      	ldrb	r3, [r7, #14]
 8004656:	490e      	ldr	r1, [pc, #56]	; (8004690 <usbd_edpt_stall+0x94>)
 8004658:	0052      	lsls	r2, r2, #1
 800465a:	440a      	add	r2, r1
 800465c:	4413      	add	r3, r2
 800465e:	f103 0218 	add.w	r2, r3, #24
 8004662:	79d3      	ldrb	r3, [r2, #7]
 8004664:	f043 0302 	orr.w	r3, r3, #2
 8004668:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 800466a:	7bfa      	ldrb	r2, [r7, #15]
 800466c:	7bbb      	ldrb	r3, [r7, #14]
 800466e:	4908      	ldr	r1, [pc, #32]	; (8004690 <usbd_edpt_stall+0x94>)
 8004670:	0052      	lsls	r2, r2, #1
 8004672:	440a      	add	r2, r1
 8004674:	4413      	add	r3, r2
 8004676:	f103 0218 	add.w	r2, r3, #24
 800467a:	79d3      	ldrb	r3, [r2, #7]
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	71d3      	strb	r3, [r2, #7]
  }
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	2000201c 	.word	0x2000201c
 8004690:	2000290c 	.word	0x2000290c

08004694 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	460a      	mov	r2, r1
 800469e:	71fb      	strb	r3, [r7, #7]
 80046a0:	4613      	mov	r3, r2
 80046a2:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80046a4:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <usbd_edpt_clear_stall+0x90>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	71fb      	strb	r3, [r7, #7]
 80046aa:	79bb      	ldrb	r3, [r7, #6]
 80046ac:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80046ae:	7b3b      	ldrb	r3, [r7, #12]
 80046b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80046b6:	73fb      	strb	r3, [r7, #15]
 80046b8:	79bb      	ldrb	r3, [r7, #6]
 80046ba:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80046bc:	7b7b      	ldrb	r3, [r7, #13]
 80046be:	09db      	lsrs	r3, r3, #7
 80046c0:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80046c2:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 80046c4:	7bfa      	ldrb	r2, [r7, #15]
 80046c6:	7bbb      	ldrb	r3, [r7, #14]
 80046c8:	4917      	ldr	r1, [pc, #92]	; (8004728 <usbd_edpt_clear_stall+0x94>)
 80046ca:	0052      	lsls	r2, r2, #1
 80046cc:	440a      	add	r2, r1
 80046ce:	4413      	add	r3, r2
 80046d0:	3318      	adds	r3, #24
 80046d2:	79db      	ldrb	r3, [r3, #7]
 80046d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01d      	beq.n	800471a <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 80046de:	79ba      	ldrb	r2, [r7, #6]
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 ff65 	bl	80055b4 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 80046ea:	7bfa      	ldrb	r2, [r7, #15]
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	490e      	ldr	r1, [pc, #56]	; (8004728 <usbd_edpt_clear_stall+0x94>)
 80046f0:	0052      	lsls	r2, r2, #1
 80046f2:	440a      	add	r2, r1
 80046f4:	4413      	add	r3, r2
 80046f6:	f103 0218 	add.w	r2, r3, #24
 80046fa:	79d3      	ldrb	r3, [r2, #7]
 80046fc:	f36f 0341 	bfc	r3, #1, #1
 8004700:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	4908      	ldr	r1, [pc, #32]	; (8004728 <usbd_edpt_clear_stall+0x94>)
 8004708:	0052      	lsls	r2, r2, #1
 800470a:	440a      	add	r2, r1
 800470c:	4413      	add	r3, r2
 800470e:	f103 0218 	add.w	r2, r3, #24
 8004712:	79d3      	ldrb	r3, [r2, #7]
 8004714:	f36f 0300 	bfc	r3, #0, #1
 8004718:	71d3      	strb	r3, [r2, #7]
  }
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	2000201c 	.word	0x2000201c
 8004728:	2000290c 	.word	0x2000290c

0800472c <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	460a      	mov	r2, r1
 8004736:	71fb      	strb	r3, [r7, #7]
 8004738:	4613      	mov	r3, r2
 800473a:	71bb      	strb	r3, [r7, #6]
 800473c:	79bb      	ldrb	r3, [r7, #6]
 800473e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004740:	7b3b      	ldrb	r3, [r7, #12]
 8004742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004746:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8004748:	73fb      	strb	r3, [r7, #15]
 800474a:	79bb      	ldrb	r3, [r7, #6]
 800474c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800474e:	7b7b      	ldrb	r3, [r7, #13]
 8004750:	09db      	lsrs	r3, r3, #7
 8004752:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8004754:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	7bbb      	ldrb	r3, [r7, #14]
 800475a:	490a      	ldr	r1, [pc, #40]	; (8004784 <usbd_edpt_stalled+0x58>)
 800475c:	0052      	lsls	r2, r2, #1
 800475e:	440a      	add	r2, r1
 8004760:	4413      	add	r3, r2
 8004762:	3318      	adds	r3, #24
 8004764:	79db      	ldrb	r3, [r3, #7]
 8004766:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	2000290c 	.word	0x2000290c

08004788 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <_status_stage_xact+0x1e>
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <_status_stage_xact+0x20>
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80047aa:	7bf9      	ldrb	r1, [r7, #15]
 80047ac:	79f8      	ldrb	r0, [r7, #7]
 80047ae:	2300      	movs	r3, #0
 80047b0:	2200      	movs	r2, #0
 80047b2:	f7ff fe7f 	bl	80044b4 <usbd_edpt_xfer>
 80047b6:	4603      	mov	r3, r0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <tud_control_status+0x3c>)
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	6810      	ldr	r0, [r2, #0]
 80047d2:	6851      	ldr	r1, [r2, #4]
 80047d4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <tud_control_status+0x3c>)
 80047d8:	2200      	movs	r2, #0
 80047da:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80047dc:	4b07      	ldr	r3, [pc, #28]	; (80047fc <tud_control_status+0x3c>)
 80047de:	2200      	movs	r2, #0
 80047e0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <tud_control_status+0x3c>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ffcb 	bl	8004788 <_status_stage_xact>
 80047f2:	4603      	mov	r3, r0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20002944 	.word	0x20002944

08004800 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <_data_stage_xact+0x74>)
 800480c:	899a      	ldrh	r2, [r3, #12]
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <_data_stage_xact+0x74>)
 8004810:	89db      	ldrh	r3, [r3, #14]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	b29b      	uxth	r3, r3
 8004816:	817b      	strh	r3, [r7, #10]
 8004818:	2340      	movs	r3, #64	; 0x40
 800481a:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800481c:	897a      	ldrh	r2, [r7, #10]
 800481e:	893b      	ldrh	r3, [r7, #8]
 8004820:	4293      	cmp	r3, r2
 8004822:	bf28      	it	cs
 8004824:	4613      	movcs	r3, r2
 8004826:	b29b      	uxth	r3, r3
 8004828:	81bb      	strh	r3, [r7, #12]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <_data_stage_xact+0x74>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <_data_stage_xact+0x54>
  {
    ep_addr = EDPT_CTRL_IN;
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	73fb      	strb	r3, [r7, #15]
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 8004840:	89bb      	ldrh	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d006      	beq.n	8004854 <_data_stage_xact+0x54>
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <_data_stage_xact+0x74>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	89ba      	ldrh	r2, [r7, #12]
 800484c:	4619      	mov	r1, r3
 800484e:	480a      	ldr	r0, [pc, #40]	; (8004878 <_data_stage_xact+0x78>)
 8004850:	f003 f888 	bl	8007964 <memcpy>
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8004854:	89bb      	ldrh	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <_data_stage_xact+0x5e>
 800485a:	4a07      	ldr	r2, [pc, #28]	; (8004878 <_data_stage_xact+0x78>)
 800485c:	e000      	b.n	8004860 <_data_stage_xact+0x60>
 800485e:	2200      	movs	r2, #0
 8004860:	89bb      	ldrh	r3, [r7, #12]
 8004862:	7bf9      	ldrb	r1, [r7, #15]
 8004864:	79f8      	ldrb	r0, [r7, #7]
 8004866:	f7ff fe25 	bl	80044b4 <usbd_edpt_xfer>
 800486a:	4603      	mov	r3, r0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20002944 	.word	0x20002944
 8004878:	20002958 	.word	0x20002958

0800487c <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	461a      	mov	r2, r3
 8004888:	4603      	mov	r3, r0
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	4613      	mov	r3, r2
 800488e:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8004890:	4b30      	ldr	r3, [pc, #192]	; (8004954 <tud_control_xfer+0xd8>)
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	6810      	ldr	r0, [r2, #0]
 8004896:	6851      	ldr	r1, [r2, #4]
 8004898:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 800489a:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <tud_control_xfer+0xd8>)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 80048a0:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <tud_control_xfer+0xd8>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	88db      	ldrh	r3, [r3, #6]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	89bb      	ldrh	r3, [r7, #12]
 80048ae:	827b      	strh	r3, [r7, #18]
 80048b0:	4613      	mov	r3, r2
 80048b2:	823b      	strh	r3, [r7, #16]
 80048b4:	8a7a      	ldrh	r2, [r7, #18]
 80048b6:	8a3b      	ldrh	r3, [r7, #16]
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bf28      	it	cs
 80048bc:	4613      	movcs	r3, r2
 80048be:	b29a      	uxth	r2, r3
 80048c0:	4b24      	ldr	r3, [pc, #144]	; (8004954 <tud_control_xfer+0xd8>)
 80048c2:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	88db      	ldrh	r3, [r3, #6]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d026      	beq.n	800491c <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 80048ce:	4b21      	ldr	r3, [pc, #132]	; (8004954 <tud_control_xfer+0xd8>)
 80048d0:	899b      	ldrh	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00d      	beq.n	80048f2 <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <tud_control_xfer+0x76>
 80048dc:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <tud_control_xfer+0xdc>)
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d000      	beq.n	80048ee <tud_control_xfer+0x72>
 80048ec:	be00      	bkpt	0x0000
 80048ee:	2300      	movs	r3, #0
 80048f0:	e02b      	b.n	800494a <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff ff83 	bl	8004800 <_data_stage_xact>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f083 0301 	eor.w	r3, r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d020      	beq.n	8004948 <tud_control_xfer+0xcc>
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <tud_control_xfer+0xdc>)
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d000      	beq.n	8004918 <tud_control_xfer+0x9c>
 8004916:	be00      	bkpt	0x0000
 8004918:	2300      	movs	r3, #0
 800491a:	e016      	b.n	800494a <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff31 	bl	8004788 <_status_stage_xact>
 8004926:	4603      	mov	r3, r0
 8004928:	f083 0301 	eor.w	r3, r3, #1
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <tud_control_xfer+0xcc>
 8004932:	4b09      	ldr	r3, [pc, #36]	; (8004958 <tud_control_xfer+0xdc>)
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d000      	beq.n	8004944 <tud_control_xfer+0xc8>
 8004942:	be00      	bkpt	0x0000
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <tud_control_xfer+0xce>
  }

  return true;
 8004948:	2301      	movs	r3, #1
}
 800494a:	4618      	mov	r0, r3
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20002944 	.word	0x20002944
 8004958:	e000edf0 	.word	0xe000edf0

0800495c <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8004960:	2214      	movs	r2, #20
 8004962:	2100      	movs	r1, #0
 8004964:	4802      	ldr	r0, [pc, #8]	; (8004970 <usbd_control_reset+0x14>)
 8004966:	f003 f825 	bl	80079b4 <memset>
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20002944 	.word	0x20002944

08004974 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <usbd_control_set_complete_callback+0x1c>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6113      	str	r3, [r2, #16]
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20002944 	.word	0x20002944

08004994 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <usbd_control_set_request+0x30>)
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6810      	ldr	r0, [r2, #0]
 80049a2:	6851      	ldr	r1, [r2, #4]
 80049a4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 80049a6:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <usbd_control_set_request+0x30>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <usbd_control_set_request+0x30>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 80049b2:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <usbd_control_set_request+0x30>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	819a      	strh	r2, [r3, #12]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	20002944 	.word	0x20002944

080049c8 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4603      	mov	r3, r0
 80049d2:	71fb      	strb	r3, [r7, #7]
 80049d4:	460b      	mov	r3, r1
 80049d6:	71bb      	strb	r3, [r7, #6]
 80049d8:	4613      	mov	r3, r2
 80049da:	717b      	strb	r3, [r7, #5]
 80049dc:	79bb      	ldrb	r3, [r7, #6]
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	09db      	lsrs	r3, r3, #7
 80049e4:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80049e6:	4a50      	ldr	r2, [pc, #320]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 80049e8:	7812      	ldrb	r2, [r2, #0]
 80049ea:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d021      	beq.n	8004a38 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <usbd_control_xfer_cb+0x48>
 80049fa:	4b4c      	ldr	r3, [pc, #304]	; (8004b2c <usbd_control_xfer_cb+0x164>)
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d000      	beq.n	8004a0c <usbd_control_xfer_cb+0x44>
 8004a0a:	be00      	bkpt	0x0000
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e087      	b.n	8004b20 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8004a10:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <usbd_control_xfer_cb+0x168>)
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <usbd_control_xfer_cb+0x58>
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	4943      	ldr	r1, [pc, #268]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8004a20:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8004a28:	4b3f      	ldr	r3, [pc, #252]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	79f8      	ldrb	r0, [r7, #7]
 8004a2e:	4a3e      	ldr	r2, [pc, #248]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a30:	2103      	movs	r1, #3
 8004a32:	4798      	blx	r3
    }

    return true;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e073      	b.n	8004b20 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8004a38:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8004a46:	4b38      	ldr	r3, [pc, #224]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <usbd_control_xfer_cb+0x8a>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e066      	b.n	8004b20 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8004a52:	4b35      	ldr	r3, [pc, #212]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	4936      	ldr	r1, [pc, #216]	; (8004b34 <usbd_control_xfer_cb+0x16c>)
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f002 ff82 	bl	8007964 <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8004a60:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a62:	89da      	ldrh	r2, [r3, #14]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a6e:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8004a70:	4b2d      	ldr	r3, [pc, #180]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4413      	add	r3, r2
 8004a78:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a7a:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8004a7c:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a7e:	88da      	ldrh	r2, [r3, #6]
 8004a80:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a82:	89db      	ldrh	r3, [r3, #14]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d002      	beq.n	8004a8e <usbd_control_xfer_cb+0xc6>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b3f      	cmp	r3, #63	; 0x3f
 8004a8c:	d831      	bhi.n	8004af2 <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8004a92:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8004a9a:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	79f8      	ldrb	r0, [r7, #7]
 8004aa0:	4a21      	ldr	r2, [pc, #132]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004aa2:	2102      	movs	r1, #2
 8004aa4:	4798      	blx	r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 8004aaa:	7ffb      	ldrb	r3, [r7, #31]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d015      	beq.n	8004adc <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	491d      	ldr	r1, [pc, #116]	; (8004b28 <usbd_control_xfer_cb+0x160>)
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fe67 	bl	8004788 <_status_stage_xact>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f083 0301 	eor.w	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d02a      	beq.n	8004b1c <usbd_control_xfer_cb+0x154>
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <usbd_control_xfer_cb+0x164>)
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d000      	beq.n	8004ad8 <usbd_control_xfer_cb+0x110>
 8004ad6:	be00      	bkpt	0x0000
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e021      	b.n	8004b20 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fd55 	bl	8005590 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fd50 	bl	8005590 <dcd_edpt_stall>
  {
 8004af0:	e014      	b.n	8004b1c <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fe83 	bl	8004800 <_data_stage_xact>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f083 0301 	eor.w	r3, r3, #1
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <usbd_control_xfer_cb+0x156>
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <usbd_control_xfer_cb+0x164>)
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d000      	beq.n	8004b18 <usbd_control_xfer_cb+0x150>
 8004b16:	be00      	bkpt	0x0000
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e001      	b.n	8004b20 <usbd_control_xfer_cb+0x158>
  {
 8004b1c:	bf00      	nop
  }

  return true;
 8004b1e:	2301      	movs	r3, #1
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20002944 	.word	0x20002944
 8004b2c:	e000edf0 	.word	0xe000edf0
 8004b30:	00000000 	.word	0x00000000
 8004b34:	20002958 	.word	0x20002958

08004b38 <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool _out_ep_closed;                       // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3317      	adds	r3, #23
 8004b4e:	b29b      	uxth	r3, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8004b66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b6a:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	757b      	strb	r3, [r7, #21]
 8004b74:	e013      	b.n	8004b9e <update_grxfsiz+0x42>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8004b76:	7d7b      	ldrb	r3, [r7, #21]
 8004b78:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <update_grxfsiz+0x60>)
 8004b7a:	015b      	lsls	r3, r3, #5
 8004b7c:	4413      	add	r3, r2
 8004b7e:	330a      	adds	r3, #10
 8004b80:	881a      	ldrh	r2, [r3, #0]
 8004b82:	8afb      	ldrh	r3, [r7, #22]
 8004b84:	81fb      	strh	r3, [r7, #14]
 8004b86:	4613      	mov	r3, r2
 8004b88:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8004b8a:	89fa      	ldrh	r2, [r7, #14]
 8004b8c:	89bb      	ldrh	r3, [r7, #12]
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	bf38      	it	cc
 8004b92:	4613      	movcc	r3, r2
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8004b98:	7d7b      	ldrb	r3, [r7, #21]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	757b      	strb	r3, [r7, #21]
 8004b9e:	7d7b      	ldrb	r3, [r7, #21]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d9e8      	bls.n	8004b76 <update_grxfsiz+0x1a>
  }

  // Update size of RX FIFO
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 8004ba4:	8afb      	ldrh	r3, [r7, #22]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff ffc6 	bl	8004b38 <calc_rx_ff_size>
 8004bac:	4603      	mov	r3, r0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004bb4:	bf00      	nop
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	200029a0 	.word	0x200029a0

08004bc0 <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8004bca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004bce:	61bb      	str	r3, [r7, #24]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8004bd0:	4b30      	ldr	r3, [pc, #192]	; (8004c94 <bus_reset+0xd4>)
 8004bd2:	617b      	str	r3, [r7, #20]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8004bd4:	4b30      	ldr	r3, [pc, #192]	; (8004c98 <bus_reset+0xd8>)
 8004bd6:	613b      	str	r3, [r7, #16]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8004bd8:	4b30      	ldr	r3, [pc, #192]	; (8004c9c <bus_reset+0xdc>)
 8004bda:	60fb      	str	r3, [r7, #12]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8004bdc:	2280      	movs	r2, #128	; 0x80
 8004bde:	2100      	movs	r1, #0
 8004be0:	482f      	ldr	r0, [pc, #188]	; (8004ca0 <bus_reset+0xe0>)
 8004be2:	f002 fee7 	bl	80079b4 <memset>
  _out_ep_closed = false;
 8004be6:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <bus_reset+0xe4>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]

  // clear device address
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	601a      	str	r2, [r3, #0]

  // 1. NAK for all OUT endpoints
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e00e      	b.n	8004c1c <bus_reset+0x5c>
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
 8004c00:	015b      	lsls	r3, r3, #5
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4413      	add	r3, r2
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	7ffb      	ldrb	r3, [r7, #31]
 8004c0a:	015b      	lsls	r3, r3, #5
 8004c0c:	6939      	ldr	r1, [r7, #16]
 8004c0e:	440b      	add	r3, r1
 8004c10:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004c14:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8004c16:	7ffb      	ldrb	r3, [r7, #31]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	7ffb      	ldrb	r3, [r7, #31]
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d9ed      	bls.n	8004bfe <bus_reset+0x3e>
  }

  // 2. Un-mask interrupt bits
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004c28:	61da      	str	r2, [r3, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2209      	movs	r2, #9
 8004c2e:	615a      	str	r2, [r3, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2209      	movs	r2, #9
 8004c34:	611a      	str	r2, [r3, #16]
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8004c36:	2040      	movs	r0, #64	; 0x40
 8004c38:	f7ff ff7e 	bl	8004b38 <calc_rx_ff_size>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	461a      	mov	r2, r3
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <bus_reset+0xe8>)
 8004c46:	2210      	movs	r2, #16
 8004c48:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8004c4a:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <bus_reset+0xe8>)
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004c52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f023 0203 	bic.w	r2, r3, #3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	601a      	str	r2, [r3, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8004c66:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <bus_reset+0xe0>)
 8004c68:	2240      	movs	r2, #64	; 0x40
 8004c6a:	835a      	strh	r2, [r3, #26]
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <bus_reset+0xe0>)
 8004c6e:	8b5a      	ldrh	r2, [r3, #26]
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <bus_reset+0xe0>)
 8004c72:	815a      	strh	r2, [r3, #10]

  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	611a      	str	r2, [r3, #16]

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	619a      	str	r2, [r3, #24]
}
 8004c8c:	bf00      	nop
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	50000800 	.word	0x50000800
 8004c98:	50000b00 	.word	0x50000b00
 8004c9c:	50000900 	.word	0x50000900
 8004ca0:	200029a0 	.word	0x200029a0
 8004ca4:	20002a26 	.word	0x20002a26
 8004ca8:	20002a24 	.word	0x20002a24

08004cac <set_turnaround>:

// Set turn-around timeout according to link speed
extern uint32_t SystemCoreClock;
static void set_turnaround(USB_OTG_GlobalTypeDef * usb_otg, tusb_speed_t speed)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60da      	str	r2, [r3, #12]

  if ( speed == TUSB_SPEED_HIGH )
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d106      	bne.n	8004cd8 <set_turnaround+0x2c>
  {
    // Use fixed 0x09 for Highspeed
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60da      	str	r2, [r3, #12]
      turnaround = 0xFU;

    // Fullspeed depends on MCU clocks, but we will use 0x06 for 32+ Mhz
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
  }
}
 8004cd6:	e050      	b.n	8004d7a <set_turnaround+0xce>
    if ( SystemCoreClock >= 32000000U )
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	; (8004d88 <set_turnaround+0xdc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2b      	ldr	r2, [pc, #172]	; (8004d8c <set_turnaround+0xe0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d302      	bcc.n	8004ce8 <set_turnaround+0x3c>
      turnaround = 0x6U;
 8004ce2:	2306      	movs	r3, #6
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e041      	b.n	8004d6c <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 27500000U )
 8004ce8:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <set_turnaround+0xdc>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a28      	ldr	r2, [pc, #160]	; (8004d90 <set_turnaround+0xe4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d902      	bls.n	8004cf8 <set_turnaround+0x4c>
      turnaround = 0x7U;
 8004cf2:	2307      	movs	r3, #7
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	e039      	b.n	8004d6c <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 24000000U )
 8004cf8:	4b23      	ldr	r3, [pc, #140]	; (8004d88 <set_turnaround+0xdc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <set_turnaround+0xe8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d302      	bcc.n	8004d08 <set_turnaround+0x5c>
      turnaround = 0x8U;
 8004d02:	2308      	movs	r3, #8
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e031      	b.n	8004d6c <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 21800000U )
 8004d08:	4b1f      	ldr	r3, [pc, #124]	; (8004d88 <set_turnaround+0xdc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a22      	ldr	r2, [pc, #136]	; (8004d98 <set_turnaround+0xec>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d902      	bls.n	8004d18 <set_turnaround+0x6c>
      turnaround = 0x9U;
 8004d12:	2309      	movs	r3, #9
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e029      	b.n	8004d6c <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 20000000U )
 8004d18:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <set_turnaround+0xdc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <set_turnaround+0xf0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d902      	bls.n	8004d28 <set_turnaround+0x7c>
      turnaround = 0xAU;
 8004d22:	230a      	movs	r3, #10
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e021      	b.n	8004d6c <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 18500000U )
 8004d28:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <set_turnaround+0xdc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1c      	ldr	r2, [pc, #112]	; (8004da0 <set_turnaround+0xf4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d902      	bls.n	8004d38 <set_turnaround+0x8c>
      turnaround = 0xBU;
 8004d32:	230b      	movs	r3, #11
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e019      	b.n	8004d6c <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 17200000U )
 8004d38:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <set_turnaround+0xdc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a19      	ldr	r2, [pc, #100]	; (8004da4 <set_turnaround+0xf8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d302      	bcc.n	8004d48 <set_turnaround+0x9c>
      turnaround = 0xCU;
 8004d42:	230c      	movs	r3, #12
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e011      	b.n	8004d6c <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 16000000U )
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <set_turnaround+0xdc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a16      	ldr	r2, [pc, #88]	; (8004da8 <set_turnaround+0xfc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d302      	bcc.n	8004d58 <set_turnaround+0xac>
      turnaround = 0xDU;
 8004d52:	230d      	movs	r3, #13
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e009      	b.n	8004d6c <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 15000000U )
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <set_turnaround+0xdc>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a13      	ldr	r2, [pc, #76]	; (8004dac <set_turnaround+0x100>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d302      	bcc.n	8004d68 <set_turnaround+0xbc>
      turnaround = 0xEU;
 8004d62:	230e      	movs	r3, #14
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e001      	b.n	8004d6c <set_turnaround+0xc0>
      turnaround = 0xFU;
 8004d68:	230f      	movs	r3, #15
 8004d6a:	60fb      	str	r3, [r7, #12]
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	029b      	lsls	r3, r3, #10
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60da      	str	r2, [r3, #12]
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20002000 	.word	0x20002000
 8004d8c:	01e84800 	.word	0x01e84800
 8004d90:	01a39ddf 	.word	0x01a39ddf
 8004d94:	016e3600 	.word	0x016e3600
 8004d98:	014ca43f 	.word	0x014ca43f
 8004d9c:	01312cff 	.word	0x01312cff
 8004da0:	011a499f 	.word	0x011a499f
 8004da4:	01067380 	.word	0x01067380
 8004da8:	00f42400 	.word	0x00f42400
 8004dac:	00e4e1c0 	.word	0x00e4e1c0

08004db0 <get_speed>:

static tusb_speed_t get_speed(uint8_t rhport)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <get_speed+0x34>)
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	60bb      	str	r3, [r7, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <get_speed+0x24>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e000      	b.n	8004dd6 <get_speed+0x26>
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	50000800 	.word	0x50000800

08004de8 <edpt_schedule_packets>:
  return true;
}
#endif

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 8004de8:	b490      	push	{r4, r7}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4604      	mov	r4, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	461a      	mov	r2, r3
 8004df6:	4623      	mov	r3, r4
 8004df8:	71fb      	strb	r3, [r7, #7]
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	71bb      	strb	r3, [r7, #6]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	717b      	strb	r3, [r7, #5]
 8004e02:	4613      	mov	r3, r2
 8004e04:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8004e06:	4b6c      	ldr	r3, [pc, #432]	; (8004fb8 <edpt_schedule_packets+0x1d0>)
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8004e0a:	4b6c      	ldr	r3, [pc, #432]	; (8004fbc <edpt_schedule_packets+0x1d4>)
 8004e0c:	623b      	str	r3, [r7, #32]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8004e0e:	4b6c      	ldr	r3, [pc, #432]	; (8004fc0 <edpt_schedule_packets+0x1d8>)
 8004e10:	61fb      	str	r3, [r7, #28]

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if(epnum == 0) {
 8004e12:	79bb      	ldrb	r3, [r7, #6]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d121      	bne.n	8004e5c <edpt_schedule_packets+0x74>
    xfer_ctl_t * const xfer = XFER_CTL_BASE(epnum, dir);
 8004e18:	79ba      	ldrb	r2, [r7, #6]
 8004e1a:	797b      	ldrb	r3, [r7, #5]
 8004e1c:	0052      	lsls	r2, r2, #1
 8004e1e:	4413      	add	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	4a68      	ldr	r2, [pc, #416]	; (8004fc4 <edpt_schedule_packets+0x1dc>)
 8004e24:	4413      	add	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8004e28:	797b      	ldrb	r3, [r7, #5]
 8004e2a:	4a67      	ldr	r2, [pc, #412]	; (8004fc8 <edpt_schedule_packets+0x1e0>)
 8004e2c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	895b      	ldrh	r3, [r3, #10]
 8004e34:	81fa      	strh	r2, [r7, #14]
 8004e36:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004e38:	89fa      	ldrh	r2, [r7, #14]
 8004e3a:	89bb      	ldrh	r3, [r7, #12]
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	bf28      	it	cs
 8004e40:	4613      	movcs	r3, r2
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8004e46:	797b      	ldrb	r3, [r7, #5]
 8004e48:	4a5f      	ldr	r2, [pc, #380]	; (8004fc8 <edpt_schedule_packets+0x1e0>)
 8004e4a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004e4e:	797b      	ldrb	r3, [r7, #5]
 8004e50:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004e52:	1a8a      	subs	r2, r1, r2
 8004e54:	b291      	uxth	r1, r2
 8004e56:	4a5c      	ldr	r2, [pc, #368]	; (8004fc8 <edpt_schedule_packets+0x1e0>)
 8004e58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if(dir == TUSB_DIR_IN) {
 8004e5c:	797b      	ldrb	r3, [r7, #5]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d14f      	bne.n	8004f02 <edpt_schedule_packets+0x11a>
    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8004e62:	887b      	ldrh	r3, [r7, #2]
 8004e64:	04db      	lsls	r3, r3, #19
 8004e66:	4618      	mov	r0, r3
        ((total_bytes << USB_OTG_DIEPTSIZ_XFRSIZ_Pos) & USB_OTG_DIEPTSIZ_XFRSIZ_Msk);
 8004e68:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8004e6a:	79bb      	ldrb	r3, [r7, #6]
 8004e6c:	015b      	lsls	r3, r3, #5
 8004e6e:	69f9      	ldr	r1, [r7, #28]
 8004e70:	440b      	add	r3, r1
 8004e72:	4302      	orrs	r2, r0
 8004e74:	611a      	str	r2, [r3, #16]

    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8004e76:	79bb      	ldrb	r3, [r7, #6]
 8004e78:	015b      	lsls	r3, r3, #5
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	79bb      	ldrb	r3, [r7, #6]
 8004e82:	015b      	lsls	r3, r3, #5
 8004e84:	69f9      	ldr	r1, [r7, #28]
 8004e86:	440b      	add	r3, r1
 8004e88:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004e8c:	601a      	str	r2, [r3, #0]
    // For ISO endpoint set correct odd/even bit for next frame.
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8004e8e:	79bb      	ldrb	r3, [r7, #6]
 8004e90:	015b      	lsls	r3, r3, #5
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004e9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ea0:	d122      	bne.n	8004ee8 <edpt_schedule_packets+0x100>
 8004ea2:	79ba      	ldrb	r2, [r7, #6]
 8004ea4:	797b      	ldrb	r3, [r7, #5]
 8004ea6:	4947      	ldr	r1, [pc, #284]	; (8004fc4 <edpt_schedule_packets+0x1dc>)
 8004ea8:	0052      	lsls	r2, r2, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	440b      	add	r3, r1
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d117      	bne.n	8004ee8 <edpt_schedule_packets+0x100>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec0:	613b      	str	r3, [r7, #16]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8004ec2:	79bb      	ldrb	r3, [r7, #6]
 8004ec4:	015b      	lsls	r3, r3, #5
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <edpt_schedule_packets+0xf0>
 8004ed2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8004ed6:	e001      	b.n	8004edc <edpt_schedule_packets+0xf4>
 8004ed8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8004edc:	79bb      	ldrb	r3, [r7, #6]
 8004ede:	015b      	lsls	r3, r3, #5
 8004ee0:	69f8      	ldr	r0, [r7, #28]
 8004ee2:	4403      	add	r3, r0
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if(total_bytes != 0) {
 8004ee8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d05e      	beq.n	8004fac <edpt_schedule_packets+0x1c4>
      dev->DIEPEMPMSK |= (1 << epnum);
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef2:	79ba      	ldrb	r2, [r7, #6]
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8004efa:	431a      	orrs	r2, r3
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	635a      	str	r2, [r3, #52]	; 0x34
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8004f00:	e054      	b.n	8004fac <edpt_schedule_packets+0x1c4>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f02:	79bb      	ldrb	r3, [r7, #6]
 8004f04:	015b      	lsls	r3, r3, #5
 8004f06:	6a3a      	ldr	r2, [r7, #32]
 8004f08:	4413      	add	r3, r2
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	79bb      	ldrb	r3, [r7, #6]
 8004f0e:	015b      	lsls	r3, r3, #5
 8004f10:	6a39      	ldr	r1, [r7, #32]
 8004f12:	440b      	add	r3, r1
 8004f14:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8004f18:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8004f1a:	79bb      	ldrb	r3, [r7, #6]
 8004f1c:	015b      	lsls	r3, r3, #5
 8004f1e:	6a3a      	ldr	r2, [r7, #32]
 8004f20:	4413      	add	r3, r2
 8004f22:	6919      	ldr	r1, [r3, #16]
 8004f24:	887b      	ldrh	r3, [r7, #2]
 8004f26:	04db      	lsls	r3, r3, #19
 8004f28:	461a      	mov	r2, r3
        ((total_bytes << USB_OTG_DOEPTSIZ_XFRSIZ_Pos) & USB_OTG_DOEPTSIZ_XFRSIZ_Msk);
 8004f2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	79bb      	ldrb	r3, [r7, #6]
 8004f30:	015b      	lsls	r3, r3, #5
 8004f32:	6a38      	ldr	r0, [r7, #32]
 8004f34:	4403      	add	r3, r0
 8004f36:	430a      	orrs	r2, r1
 8004f38:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8004f3a:	79bb      	ldrb	r3, [r7, #6]
 8004f3c:	015b      	lsls	r3, r3, #5
 8004f3e:	6a3a      	ldr	r2, [r7, #32]
 8004f40:	4413      	add	r3, r2
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	79bb      	ldrb	r3, [r7, #6]
 8004f46:	015b      	lsls	r3, r3, #5
 8004f48:	6a39      	ldr	r1, [r7, #32]
 8004f4a:	440b      	add	r3, r1
 8004f4c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004f50:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8004f52:	79bb      	ldrb	r3, [r7, #6]
 8004f54:	015b      	lsls	r3, r3, #5
 8004f56:	6a3a      	ldr	r2, [r7, #32]
 8004f58:	4413      	add	r3, r2
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004f60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f64:	d122      	bne.n	8004fac <edpt_schedule_packets+0x1c4>
 8004f66:	79ba      	ldrb	r2, [r7, #6]
 8004f68:	797b      	ldrb	r3, [r7, #5]
 8004f6a:	4916      	ldr	r1, [pc, #88]	; (8004fc4 <edpt_schedule_packets+0x1dc>)
 8004f6c:	0052      	lsls	r2, r2, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	440b      	add	r3, r1
 8004f74:	330c      	adds	r3, #12
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d117      	bne.n	8004fac <edpt_schedule_packets+0x1c4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	617b      	str	r3, [r7, #20]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8004f86:	79bb      	ldrb	r3, [r7, #6]
 8004f88:	015b      	lsls	r3, r3, #5
 8004f8a:	6a3a      	ldr	r2, [r7, #32]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <edpt_schedule_packets+0x1b4>
 8004f96:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8004f9a:	e001      	b.n	8004fa0 <edpt_schedule_packets+0x1b8>
 8004f9c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8004fa0:	79bb      	ldrb	r3, [r7, #6]
 8004fa2:	015b      	lsls	r3, r3, #5
 8004fa4:	6a38      	ldr	r0, [r7, #32]
 8004fa6:	4403      	add	r3, r0
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]
}
 8004fac:	bf00      	nop
 8004fae:	3728      	adds	r7, #40	; 0x28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc90      	pop	{r4, r7}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	50000800 	.word	0x50000800
 8004fbc:	50000b00 	.word	0x50000b00
 8004fc0:	50000900 	.word	0x50000900
 8004fc4:	200029a0 	.word	0x200029a0
 8004fc8:	20002a20 	.word	0x20002a20

08004fcc <dcd_set_address>:
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
}

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	71fb      	strb	r3, [r7, #7]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	71bb      	strb	r3, [r7, #6]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <dcd_set_address+0x58>)
 8004fde:	60fb      	str	r3, [r7, #12]
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004fe8:	79ba      	ldrb	r2, [r7, #6]
 8004fea:	0112      	lsls	r2, r2, #4
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	72fb      	strb	r3, [r7, #11]
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8004ffa:	7abb      	ldrb	r3, [r7, #10]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <dcd_set_address+0x3a>
 8005000:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8005004:	e000      	b.n	8005008 <dcd_set_address+0x3c>
 8005006:	2300      	movs	r3, #0
 8005008:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800500c:	4313      	orrs	r3, r2
 800500e:	b25b      	sxtb	r3, r3
 8005010:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8005012:	79f8      	ldrb	r0, [r7, #7]
 8005014:	2300      	movs	r3, #0
 8005016:	2200      	movs	r2, #0
 8005018:	f000 f964 	bl	80052e4 <dcd_edpt_xfer>
}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	50000800 	.word	0x50000800

08005028 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b090      	sub	sp, #64	; 0x40
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	6039      	str	r1, [r7, #0]
 8005032:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8005034:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800503a:	4b81      	ldr	r3, [pc, #516]	; (8005240 <dcd_edpt_open+0x218>)
 800503c:	63bb      	str	r3, [r7, #56]	; 0x38
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 800503e:	4b81      	ldr	r3, [pc, #516]	; (8005244 <dcd_edpt_open+0x21c>)
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8005042:	4b81      	ldr	r3, [pc, #516]	; (8005248 <dcd_edpt_open+0x220>)
 8005044:	633b      	str	r3, [r7, #48]	; 0x30

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	789b      	ldrb	r3, [r3, #2]
 800504a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800504c:	7cbb      	ldrb	r3, [r7, #18]
 800504e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	789b      	ldrb	r3, [r3, #2]
 800505c:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800505e:	7cfb      	ldrb	r3, [r7, #19]
 8005060:	09db      	lsrs	r3, r3, #7
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  TU_ASSERT(epnum < EP_MAX);
 8005068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800506c:	2b03      	cmp	r3, #3
 800506e:	d90a      	bls.n	8005086 <dcd_edpt_open+0x5e>
 8005070:	4b76      	ldr	r3, [pc, #472]	; (800524c <dcd_edpt_open+0x224>)
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d000      	beq.n	8005082 <dcd_edpt_open+0x5a>
 8005080:	be00      	bkpt	0x0000
 8005082:	2300      	movs	r3, #0
 8005084:	e0d8      	b.n	8005238 <dcd_edpt_open+0x210>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8005086:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800508a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800508e:	0052      	lsls	r2, r2, #1
 8005090:	4413      	add	r3, r2
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	4a6e      	ldr	r2, [pc, #440]	; (8005250 <dcd_edpt_open+0x228>)
 8005096:	4413      	add	r3, r2
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	889b      	ldrh	r3, [r3, #4]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a8:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	799a      	ldrb	r2, [r3, #6]
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	895b      	ldrh	r3, [r3, #10]
 80050ba:	3303      	adds	r3, #3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da00      	bge.n	80050c2 <dcd_edpt_open+0x9a>
 80050c0:	3303      	adds	r3, #3
 80050c2:	109b      	asrs	r3, r3, #2
 80050c4:	84fb      	strh	r3, [r7, #38]	; 0x26

  if(dir == TUSB_DIR_OUT)
 80050c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d152      	bne.n	8005174 <dcd_edpt_open+0x14c>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 80050ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fd2f 	bl	8004b38 <calc_rx_ff_size>
 80050da:	4603      	mov	r3, r0
 80050dc:	83fb      	strh	r3, [r7, #30]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (usb_otg->GRXFSIZ < sz)
 80050de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e2:	8bfb      	ldrh	r3, [r7, #30]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d214      	bcs.n	8005112 <dcd_edpt_open+0xea>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 80050e8:	8bfb      	ldrh	r3, [r7, #30]
 80050ea:	4a5a      	ldr	r2, [pc, #360]	; (8005254 <dcd_edpt_open+0x22c>)
 80050ec:	8812      	ldrh	r2, [r2, #0]
 80050ee:	4413      	add	r3, r2
 80050f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80050f4:	d90a      	bls.n	800510c <dcd_edpt_open+0xe4>
 80050f6:	4b55      	ldr	r3, [pc, #340]	; (800524c <dcd_edpt_open+0x224>)
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d000      	beq.n	8005108 <dcd_edpt_open+0xe0>
 8005106:	be00      	bkpt	0x0000
 8005108:	2300      	movs	r3, #0
 800510a:	e095      	b.n	8005238 <dcd_edpt_open+0x210>

      // Enlarge RX FIFO
      usb_otg->GRXFSIZ = sz;
 800510c:	8bfa      	ldrh	r2, [r7, #30]
 800510e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005110:	625a      	str	r2, [r3, #36]	; 0x24
    }

    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8005112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005116:	015b      	lsls	r3, r3, #5
 8005118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800511a:	4413      	add	r3, r2
 800511c:	681a      	ldr	r2, [r3, #0]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	78db      	ldrb	r3, [r3, #3]
 8005122:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005126:	b2db      	uxtb	r3, r3
 8005128:	049b      	lsls	r3, r3, #18
 800512a:	4619      	mov	r1, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	78db      	ldrb	r3, [r3, #3]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d002      	beq.n	8005140 <dcd_edpt_open+0x118>
 800513a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800513e:	e000      	b.n	8005142 <dcd_edpt_open+0x11a>
 8005140:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8005142:	430b      	orrs	r3, r1
        (xfer->max_size << USB_OTG_DOEPCTL_MPSIZ_Pos);
 8005144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005146:	8949      	ldrh	r1, [r1, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8005148:	430b      	orrs	r3, r1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 800514a:	431a      	orrs	r2, r3
 800514c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005150:	015b      	lsls	r3, r3, #5
 8005152:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005154:	440b      	add	r3, r1
 8005156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800515a:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005164:	3210      	adds	r2, #16
 8005166:	2101      	movs	r1, #1
 8005168:	fa01 f202 	lsl.w	r2, r1, r2
 800516c:	431a      	orrs	r2, r3
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	61da      	str	r2, [r3, #28]
 8005172:	e060      	b.n	8005236 <dcd_edpt_open+0x20e>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 8005174:	4b37      	ldr	r3, [pc, #220]	; (8005254 <dcd_edpt_open+0x22c>)
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800517c:	4413      	add	r3, r2
 800517e:	461a      	mov	r2, r3
 8005180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	4413      	add	r3, r2
 8005186:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800518a:	d90a      	bls.n	80051a2 <dcd_edpt_open+0x17a>
 800518c:	4b2f      	ldr	r3, [pc, #188]	; (800524c <dcd_edpt_open+0x224>)
 800518e:	623b      	str	r3, [r7, #32]
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d000      	beq.n	800519e <dcd_edpt_open+0x176>
 800519c:	be00      	bkpt	0x0000
 800519e:	2300      	movs	r3, #0
 80051a0:	e04a      	b.n	8005238 <dcd_edpt_open+0x210>

    _allocated_fifo_words_tx += fifo_size;
 80051a2:	4b2c      	ldr	r3, [pc, #176]	; (8005254 <dcd_edpt_open+0x22c>)
 80051a4:	881a      	ldrh	r2, [r3, #0]
 80051a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051a8:	4413      	add	r3, r2
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	4b29      	ldr	r3, [pc, #164]	; (8005254 <dcd_edpt_open+0x22c>)
 80051ae:	801a      	strh	r2, [r3, #0]

    TU_LOG(2, "    Allocated %u bytes at offset %u", fifo_size*4, EP_FIFO_SIZE-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 80051b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	4619      	mov	r1, r3
 80051b6:	4b27      	ldr	r3, [pc, #156]	; (8005254 <dcd_edpt_open+0x22c>)
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 80051be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051c2:	3b01      	subs	r3, #1
 80051c4:	430a      	orrs	r2, r1
 80051c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051c8:	3340      	adds	r3, #64	; 0x40
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	605a      	str	r2, [r3, #4]

    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80051d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051d4:	015b      	lsls	r3, r3, #5
 80051d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d8:	4413      	add	r3, r2
 80051da:	6819      	ldr	r1, [r3, #0]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 80051dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051e0:	059b      	lsls	r3, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80051e2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	78db      	ldrb	r3, [r3, #3]
 80051ea:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	049b      	lsls	r3, r3, #18
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 80051f2:	4313      	orrs	r3, r2
 80051f4:	461a      	mov	r2, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	78db      	ldrb	r3, [r3, #3]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d002      	beq.n	800520a <dcd_edpt_open+0x1e2>
 8005204:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005208:	e000      	b.n	800520c <dcd_edpt_open+0x1e4>
 800520a:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 800520c:	4313      	orrs	r3, r2
        (xfer->max_size << USB_OTG_DIEPCTL_MPSIZ_Pos);
 800520e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005210:	8952      	ldrh	r2, [r2, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8005212:	431a      	orrs	r2, r3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8005214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005218:	015b      	lsls	r3, r3, #5
 800521a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521c:	4403      	add	r3, r0
 800521e:	430a      	orrs	r2, r1
 8005220:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800522a:	2101      	movs	r1, #1
 800522c:	fa01 f202 	lsl.w	r2, r1, r2
 8005230:	431a      	orrs	r2, r3
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	61da      	str	r2, [r3, #28]
  }

  return true;
 8005236:	2301      	movs	r3, #1
}
 8005238:	4618      	mov	r0, r3
 800523a:	3740      	adds	r7, #64	; 0x40
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	50000800 	.word	0x50000800
 8005244:	50000b00 	.word	0x50000b00
 8005248:	50000900 	.word	0x50000900
 800524c:	e000edf0 	.word	0xe000edf0
 8005250:	200029a0 	.word	0x200029a0
 8005254:	20002a24 	.word	0x20002a24

08005258 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

//  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005262:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <dcd_edpt_close_all+0x78>)
 8005264:	613b      	str	r3, [r7, #16]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8005266:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <dcd_edpt_close_all+0x7c>)
 8005268:	60fb      	str	r3, [r7, #12]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <dcd_edpt_close_all+0x80>)
 800526c:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005274:	61da      	str	r2, [r3, #28]

  for(uint8_t n = 1; n < EP_MAX; n++)
 8005276:	2301      	movs	r3, #1
 8005278:	75fb      	strb	r3, [r7, #23]
 800527a:	e01c      	b.n	80052b6 <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    out_ep[n].DOEPCTL = 0;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	015b      	lsls	r3, r3, #5
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8005288:	7dfb      	ldrb	r3, [r7, #23]
 800528a:	4a14      	ldr	r2, [pc, #80]	; (80052dc <dcd_edpt_close_all+0x84>)
 800528c:	015b      	lsls	r3, r3, #5
 800528e:	4413      	add	r3, r2
 8005290:	330a      	adds	r3, #10
 8005292:	2200      	movs	r2, #0
 8005294:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    in_ep[n].DIEPCTL = 0;
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	015b      	lsls	r3, r3, #5
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4413      	add	r3, r2
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	4a0d      	ldr	r2, [pc, #52]	; (80052dc <dcd_edpt_close_all+0x84>)
 80052a6:	015b      	lsls	r3, r3, #5
 80052a8:	4413      	add	r3, r2
 80052aa:	331a      	adds	r3, #26
 80052ac:	2200      	movs	r2, #0
 80052ae:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < EP_MAX; n++)
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	3301      	adds	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d9df      	bls.n	800527c <dcd_edpt_close_all+0x24>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 80052bc:	4b08      	ldr	r3, [pc, #32]	; (80052e0 <dcd_edpt_close_all+0x88>)
 80052be:	2210      	movs	r2, #16
 80052c0:	801a      	strh	r2, [r3, #0]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	50000800 	.word	0x50000800
 80052d4:	50000b00 	.word	0x50000b00
 80052d8:	50000900 	.word	0x50000900
 80052dc:	200029a0 	.word	0x200029a0
 80052e0:	20002a24 	.word	0x20002a24

080052e4 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b089      	sub	sp, #36	; 0x24
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	603a      	str	r2, [r7, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
 80052f2:	460b      	mov	r3, r1
 80052f4:	71bb      	strb	r3, [r7, #6]
 80052f6:	4613      	mov	r3, r2
 80052f8:	80bb      	strh	r3, [r7, #4]
 80052fa:	79bb      	ldrb	r3, [r7, #6]
 80052fc:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80052fe:	7b3b      	ldrb	r3, [r7, #12]
 8005300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005304:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005306:	757b      	strb	r3, [r7, #21]
 8005308:	79bb      	ldrb	r3, [r7, #6]
 800530a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800530c:	7b7b      	ldrb	r3, [r7, #13]
 800530e:	09db      	lsrs	r3, r3, #7
 8005310:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8005312:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8005314:	7d7a      	ldrb	r2, [r7, #21]
 8005316:	7d3b      	ldrb	r3, [r7, #20]
 8005318:	0052      	lsls	r2, r2, #1
 800531a:	4413      	add	r3, r2
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	4a23      	ldr	r2, [pc, #140]	; (80053ac <dcd_edpt_xfer+0xc8>)
 8005320:	4413      	add	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2200      	movs	r2, #0
 800532e:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	88ba      	ldrh	r2, [r7, #4]
 8005334:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0) {
 8005336:	7d7b      	ldrb	r3, [r7, #21]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d111      	bne.n	8005360 <dcd_edpt_xfer+0x7c>
    ep0_pending[dir] = total_bytes;
 800533c:	7d3b      	ldrb	r3, [r7, #20]
 800533e:	491c      	ldr	r1, [pc, #112]	; (80053b0 <dcd_edpt_xfer+0xcc>)
 8005340:	88ba      	ldrh	r2, [r7, #4]
 8005342:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 8005346:	7d3b      	ldrb	r3, [r7, #20]
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <dcd_edpt_xfer+0xcc>)
 800534a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800534e:	7d3a      	ldrb	r2, [r7, #20]
 8005350:	7d79      	ldrb	r1, [r7, #21]
 8005352:	79f8      	ldrb	r0, [r7, #7]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	2301      	movs	r3, #1
 8005358:	f7ff fd46 	bl	8004de8 <edpt_schedule_packets>
    return true;
 800535c:	2301      	movs	r3, #1
 800535e:	e021      	b.n	80053a4 <dcd_edpt_xfer+0xc0>
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	895b      	ldrh	r3, [r3, #10]
 8005364:	88ba      	ldrh	r2, [r7, #4]
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	82fb      	strh	r3, [r7, #22]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	895a      	ldrh	r2, [r3, #10]
 8005370:	88bb      	ldrh	r3, [r7, #4]
 8005372:	fbb3 f1f2 	udiv	r1, r3, r2
 8005376:	fb01 f202 	mul.w	r2, r1, r2
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	81fb      	strh	r3, [r7, #14]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 800537e:	89fb      	ldrh	r3, [r7, #14]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <dcd_edpt_xfer+0xa6>
 8005384:	88bb      	ldrh	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <dcd_edpt_xfer+0xac>
    num_packets++;
 800538a:	8afb      	ldrh	r3, [r7, #22]
 800538c:	3301      	adds	r3, #1
 800538e:	82fb      	strh	r3, [r7, #22]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8005390:	8afc      	ldrh	r4, [r7, #22]
 8005392:	7d3a      	ldrb	r2, [r7, #20]
 8005394:	7d79      	ldrb	r1, [r7, #21]
 8005396:	79f8      	ldrb	r0, [r7, #7]
 8005398:	88bb      	ldrh	r3, [r7, #4]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	4623      	mov	r3, r4
 800539e:	f7ff fd23 	bl	8004de8 <edpt_schedule_packets>

  return true;
 80053a2:	2301      	movs	r3, #1
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd90      	pop	{r4, r7, pc}
 80053ac:	200029a0 	.word	0x200029a0
 80053b0:	20002a20 	.word	0x20002a20

080053b4 <dcd_edpt_disable>:

  return true;
}

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	; 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
 80053be:	460b      	mov	r3, r1
 80053c0:	71bb      	strb	r3, [r7, #6]
 80053c2:	4613      	mov	r3, r2
 80053c4:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80053c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80053ca:	61fb      	str	r3, [r7, #28]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80053cc:	4b6c      	ldr	r3, [pc, #432]	; (8005580 <dcd_edpt_disable+0x1cc>)
 80053ce:	61bb      	str	r3, [r7, #24]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80053d0:	4b6c      	ldr	r3, [pc, #432]	; (8005584 <dcd_edpt_disable+0x1d0>)
 80053d2:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80053d4:	4b6c      	ldr	r3, [pc, #432]	; (8005588 <dcd_edpt_disable+0x1d4>)
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	79bb      	ldrb	r3, [r7, #6]
 80053da:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80053dc:	7b3b      	ldrb	r3, [r7, #12]
 80053de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e2:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80053e4:	73fb      	strb	r3, [r7, #15]
 80053e6:	79bb      	ldrb	r3, [r7, #6]
 80053e8:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80053ea:	7b7b      	ldrb	r3, [r7, #13]
 80053ec:	09db      	lsrs	r3, r3, #7
 80053ee:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80053f0:	73bb      	strb	r3, [r7, #14]

  if(dir == TUSB_DIR_IN) {
 80053f2:	7bbb      	ldrb	r3, [r7, #14]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d16a      	bne.n	80054ce <dcd_edpt_disable+0x11a>
    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d006      	beq.n	800540c <dcd_edpt_disable+0x58>
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	015b      	lsls	r3, r3, #5
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	db13      	blt.n	8005434 <dcd_edpt_disable+0x80>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	015b      	lsls	r3, r3, #5
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	797b      	ldrb	r3, [r7, #5]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <dcd_edpt_disable+0x6e>
 800541c:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 8005420:	e001      	b.n	8005426 <dcd_edpt_disable+0x72>
 8005422:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	015b      	lsls	r3, r3, #5
 800542a:	6938      	ldr	r0, [r7, #16]
 800542c:	4403      	add	r3, r0
 800542e:	430a      	orrs	r2, r1
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e037      	b.n	80054a4 <dcd_edpt_disable+0xf0>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	015b      	lsls	r3, r3, #5
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	015b      	lsls	r3, r3, #5
 8005442:	6939      	ldr	r1, [r7, #16]
 8005444:	440b      	add	r3, r1
 8005446:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800544a:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 800544c:	bf00      	nop
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	015b      	lsls	r3, r3, #5
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4413      	add	r3, r2
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f6      	beq.n	800544e <dcd_edpt_disable+0x9a>

      // Disable the endpoint.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	015b      	lsls	r3, r3, #5
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4413      	add	r3, r2
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	797b      	ldrb	r3, [r7, #5]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <dcd_edpt_disable+0xc0>
 8005470:	4946      	ldr	r1, [pc, #280]	; (800558c <dcd_edpt_disable+0x1d8>)
 8005472:	e001      	b.n	8005478 <dcd_edpt_disable+0xc4>
 8005474:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	015b      	lsls	r3, r3, #5
 800547c:	6938      	ldr	r0, [r7, #16]
 800547e:	4403      	add	r3, r0
 8005480:	430a      	orrs	r2, r1
 8005482:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 8005484:	bf00      	nop
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	015b      	lsls	r3, r3, #5
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4413      	add	r3, r2
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f6      	beq.n	8005486 <dcd_edpt_disable+0xd2>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	015b      	lsls	r3, r3, #5
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4413      	add	r3, r2
 80054a0:	2202      	movs	r2, #2
 80054a2:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	7bfa      	ldrb	r2, [r7, #15]
 80054aa:	0192      	lsls	r2, r2, #6
 80054ac:	431a      	orrs	r2, r3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	611a      	str	r2, [r3, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f043 0220 	orr.w	r2, r3, #32
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	611a      	str	r2, [r3, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 80054be:	bf00      	nop
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f9      	bne.n	80054c0 <dcd_edpt_disable+0x10c>

      // Allow other OUT endpoints to keep receiving.
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
    }
  }
}
 80054cc:	e051      	b.n	8005572 <dcd_edpt_disable+0x1be>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <dcd_edpt_disable+0x12e>
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	015b      	lsls	r3, r3, #5
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4413      	add	r3, r2
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	db12      	blt.n	8005508 <dcd_edpt_disable+0x154>
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	015b      	lsls	r3, r3, #5
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	797b      	ldrb	r3, [r7, #5]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <dcd_edpt_disable+0x144>
 80054f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054f6:	e000      	b.n	80054fa <dcd_edpt_disable+0x146>
 80054f8:	2100      	movs	r1, #0
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	015b      	lsls	r3, r3, #5
 80054fe:	6978      	ldr	r0, [r7, #20]
 8005500:	4403      	add	r3, r0
 8005502:	430a      	orrs	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
}
 8005506:	e034      	b.n	8005572 <dcd_edpt_disable+0x1be>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	605a      	str	r2, [r3, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8005514:	bf00      	nop
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f9      	beq.n	8005516 <dcd_edpt_disable+0x162>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	015b      	lsls	r3, r3, #5
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4413      	add	r3, r2
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	797b      	ldrb	r3, [r7, #5]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <dcd_edpt_disable+0x182>
 8005532:	4916      	ldr	r1, [pc, #88]	; (800558c <dcd_edpt_disable+0x1d8>)
 8005534:	e001      	b.n	800553a <dcd_edpt_disable+0x186>
 8005536:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	015b      	lsls	r3, r3, #5
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	4403      	add	r3, r0
 8005542:	430a      	orrs	r2, r1
 8005544:	601a      	str	r2, [r3, #0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 8005546:	bf00      	nop
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	015b      	lsls	r3, r3, #5
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4413      	add	r3, r2
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f6      	beq.n	8005548 <dcd_edpt_disable+0x194>
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	015b      	lsls	r3, r3, #5
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4413      	add	r3, r2
 8005562:	2202      	movs	r2, #2
 8005564:	609a      	str	r2, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	605a      	str	r2, [r3, #4]
}
 8005572:	bf00      	nop
 8005574:	3724      	adds	r7, #36	; 0x24
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	50000800 	.word	0x50000800
 8005584:	50000b00 	.word	0x50000b00
 8005588:	50000900 	.word	0x50000900
 800558c:	40200000 	.word	0x40200000

08005590 <dcd_edpt_stall>:
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	4603      	mov	r3, r0
 8005598:	460a      	mov	r2, r1
 800559a:	71fb      	strb	r3, [r7, #7]
 800559c:	4613      	mov	r3, r2
 800559e:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 80055a0:	79b9      	ldrb	r1, [r7, #6]
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	2201      	movs	r2, #1
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff ff04 	bl	80053b4 <dcd_edpt_disable>
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	460a      	mov	r2, r1
 80055be:	71fb      	strb	r3, [r7, #7]
 80055c0:	4613      	mov	r3, r2
 80055c2:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80055c4:	4b25      	ldr	r3, [pc, #148]	; (800565c <dcd_edpt_clear_stall+0xa8>)
 80055c6:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80055c8:	4b25      	ldr	r3, [pc, #148]	; (8005660 <dcd_edpt_clear_stall+0xac>)
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	79bb      	ldrb	r3, [r7, #6]
 80055ce:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80055d0:	7b3b      	ldrb	r3, [r7, #12]
 80055d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d6:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	79bb      	ldrb	r3, [r7, #6]
 80055dc:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80055de:	7b7b      	ldrb	r3, [r7, #13]
 80055e0:	09db      	lsrs	r3, r3, #7
 80055e2:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80055e4:	73bb      	strb	r3, [r7, #14]

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 80055e6:	7bbb      	ldrb	r3, [r7, #14]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d118      	bne.n	800561e <dcd_edpt_clear_stall+0x6a>
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	015b      	lsls	r3, r3, #5
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4413      	add	r3, r2
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	015b      	lsls	r3, r3, #5
 80055fa:	6939      	ldr	r1, [r7, #16]
 80055fc:	440b      	add	r3, r1
 80055fe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005602:	601a      	str	r2, [r3, #0]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	015b      	lsls	r3, r3, #5
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4413      	add	r3, r2
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	015b      	lsls	r3, r3, #5
 8005612:	6939      	ldr	r1, [r7, #16]
 8005614:	440b      	add	r3, r1
 8005616:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800561a:	601a      	str	r2, [r3, #0]
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
  }
}
 800561c:	e017      	b.n	800564e <dcd_edpt_clear_stall+0x9a>
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	015b      	lsls	r3, r3, #5
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4413      	add	r3, r2
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	015b      	lsls	r3, r3, #5
 800562c:	6979      	ldr	r1, [r7, #20]
 800562e:	440b      	add	r3, r1
 8005630:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005634:	601a      	str	r2, [r3, #0]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	015b      	lsls	r3, r3, #5
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	015b      	lsls	r3, r3, #5
 8005644:	6979      	ldr	r1, [r7, #20]
 8005646:	440b      	add	r3, r1
 8005648:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800564c:	601a      	str	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	50000b00 	.word	0x50000b00
 8005660:	50000900 	.word	0x50000900

08005664 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	6039      	str	r1, [r7, #0]
 800566e:	71fb      	strb	r3, [r7, #7]
 8005670:	4613      	mov	r3, r2
 8005672:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8005674:	4b28      	ldr	r3, [pc, #160]	; (8005718 <read_fifo_packet+0xb4>)
 8005676:	61bb      	str	r3, [r7, #24]

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8005678:	88bb      	ldrh	r3, [r7, #4]
 800567a:	089b      	lsrs	r3, r3, #2
 800567c:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < full_words; i++) {
 800567e:	2300      	movs	r3, #0
 8005680:	83fb      	strh	r3, [r7, #30]
 8005682:	e01e      	b.n	80056c2 <read_fifo_packet+0x5e>
    uint32_t tmp = *rx_fifo;
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
    dst[0] = tmp & 0x000000FF;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	701a      	strb	r2, [r3, #0]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	0a1a      	lsrs	r2, r3, #8
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	0c1a      	lsrs	r2, r3, #16
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	3302      	adds	r3, #2
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
    dst[3] = (tmp & 0xFF000000) >> 24;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	0e1a      	lsrs	r2, r3, #24
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	3303      	adds	r3, #3
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
    dst += 4;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	3304      	adds	r3, #4
 80056ba:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++) {
 80056bc:	8bfb      	ldrh	r3, [r7, #30]
 80056be:	3301      	adds	r3, #1
 80056c0:	83fb      	strh	r3, [r7, #30]
 80056c2:	8bfa      	ldrh	r2, [r7, #30]
 80056c4:	8afb      	ldrh	r3, [r7, #22]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d3dc      	bcc.n	8005684 <read_fifo_packet+0x20>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t bytes_rem = len & 0x03;
 80056ca:	88bb      	ldrh	r3, [r7, #4]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	757b      	strb	r3, [r7, #21]
  if(bytes_rem != 0) {
 80056d4:	7d7b      	ldrb	r3, [r7, #21]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d018      	beq.n	800570c <read_fifo_packet+0xa8>
    uint32_t tmp = *rx_fifo;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	613b      	str	r3, [r7, #16]
    dst[0] = tmp & 0x000000FF;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	701a      	strb	r2, [r3, #0]
    if(bytes_rem > 1) {
 80056e8:	7d7b      	ldrb	r3, [r7, #21]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d905      	bls.n	80056fa <read_fifo_packet+0x96>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	0a1a      	lsrs	r2, r3, #8
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]
    }
    if(bytes_rem > 2) {
 80056fa:	7d7b      	ldrb	r3, [r7, #21]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d905      	bls.n	800570c <read_fifo_packet+0xa8>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	0c1a      	lsrs	r2, r3, #16
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	3302      	adds	r3, #2
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800570c:	bf00      	nop
 800570e:	3724      	adds	r7, #36	; 0x24
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	50001000 	.word	0x50001000

0800571c <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t * src, uint16_t len)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	603a      	str	r2, [r7, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
 800572a:	460b      	mov	r3, r1
 800572c:	71bb      	strb	r3, [r7, #6]
 800572e:	4613      	mov	r3, r2
 8005730:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t tx_fifo = FIFO_BASE(rhport, fifo_num);
 8005732:	79bb      	ldrb	r3, [r7, #6]
 8005734:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8005738:	3301      	adds	r3, #1
 800573a:	031b      	lsls	r3, r3, #12
 800573c:	60fb      	str	r3, [r7, #12]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 800573e:	88bb      	ldrh	r3, [r7, #4]
 8005740:	089b      	lsrs	r3, r3, #2
 8005742:	817b      	strh	r3, [r7, #10]
  for(uint16_t i = 0; i < full_words; i++){
 8005744:	2300      	movs	r3, #0
 8005746:	82fb      	strh	r3, [r7, #22]
 8005748:	e019      	b.n	800577e <write_fifo_packet+0x62>
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	3303      	adds	r3, #3
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	061a      	lsls	r2, r3, #24
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	3302      	adds	r3, #2
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	431a      	orrs	r2, r3
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	3301      	adds	r3, #1
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	4313      	orrs	r3, r2
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	4313      	orrs	r3, r2
 800576c:	461a      	mov	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	601a      	str	r2, [r3, #0]
    src += 4;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	3304      	adds	r3, #4
 8005776:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++){
 8005778:	8afb      	ldrh	r3, [r7, #22]
 800577a:	3301      	adds	r3, #1
 800577c:	82fb      	strh	r3, [r7, #22]
 800577e:	8afa      	ldrh	r2, [r7, #22]
 8005780:	897b      	ldrh	r3, [r7, #10]
 8005782:	429a      	cmp	r2, r3
 8005784:	d3e1      	bcc.n	800574a <write_fifo_packet+0x2e>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t bytes_rem = len & 0x03;
 8005786:	88bb      	ldrh	r3, [r7, #4]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	727b      	strb	r3, [r7, #9]
  if(bytes_rem){
 8005790:	7a7b      	ldrb	r3, [r7, #9]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d020      	beq.n	80057d8 <write_fifo_packet+0xbc>
    uint32_t tmp_word = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
    tmp_word |= src[0];
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
    if(bytes_rem > 1){
 80057a6:	7a7b      	ldrb	r3, [r7, #9]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d907      	bls.n	80057bc <write_fifo_packet+0xa0>
      tmp_word |= src[1] << 8;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	3301      	adds	r3, #1
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	461a      	mov	r2, r3
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
    }
    if(bytes_rem > 2){
 80057bc:	7a7b      	ldrb	r3, [r7, #9]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d907      	bls.n	80057d2 <write_fifo_packet+0xb6>
      tmp_word |= src[2] << 16;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	3302      	adds	r3, #2
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	041b      	lsls	r3, r3, #16
 80057ca:	461a      	mov	r2, r3
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
    }
    *tx_fifo = tmp_word;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	601a      	str	r2, [r3, #0]
  }
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <handle_rxflvl_ints>:

static void handle_rxflvl_ints(uint8_t rhport, USB_OTG_OUTEndpointTypeDef * out_ep) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	6039      	str	r1, [r7, #0]
 80057ee:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80057f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80057f4:	61fb      	str	r3, [r7, #28]
  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 80057f6:	4b49      	ldr	r3, [pc, #292]	; (800591c <handle_rxflvl_ints+0x138>)
 80057f8:	61bb      	str	r3, [r7, #24]

  // Pop control word off FIFO
  uint32_t ctl_word = usb_otg->GRXSTSP;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	617b      	str	r3, [r7, #20]
  uint8_t pktsts = (ctl_word & USB_OTG_GRXSTSP_PKTSTS_Msk) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	0c5b      	lsrs	r3, r3, #17
 8005804:	b2db      	uxtb	r3, r3
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	74fb      	strb	r3, [r7, #19]
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	74bb      	strb	r3, [r7, #18]
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	b29b      	uxth	r3, r3
 800581c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005820:	823b      	strh	r3, [r7, #16]

  switch(pktsts) {
 8005822:	7cfb      	ldrb	r3, [r7, #19]
 8005824:	3b01      	subs	r3, #1
 8005826:	2b05      	cmp	r3, #5
 8005828:	d864      	bhi.n	80058f4 <handle_rxflvl_ints+0x110>
 800582a:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <handle_rxflvl_ints+0x4c>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005909 	.word	0x08005909
 8005834:	08005849 	.word	0x08005849
 8005838:	08005909 	.word	0x08005909
 800583c:	080058c9 	.word	0x080058c9
 8005840:	080058f5 	.word	0x080058f5
 8005844:	080058e3 	.word	0x080058e3
    case 0x01: // Global OUT NAK (Interrupt)
      break;

    case 0x02: // Out packet recvd
    {
      xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8005848:	7cbb      	ldrb	r3, [r7, #18]
 800584a:	015b      	lsls	r3, r3, #5
 800584c:	4a34      	ldr	r2, [pc, #208]	; (8005920 <handle_rxflvl_ints+0x13c>)
 800584e:	4413      	add	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

      // Read packet off RxFIFO
      if (xfer->ff)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <handle_rxflvl_ints+0x86>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	8a3a      	ldrh	r2, [r7, #16]
 8005860:	69b9      	ldr	r1, [r7, #24]
 8005862:	4618      	mov	r0, r3
 8005864:	f7fd fc55 	bl	8003112 <tu_fifo_write_n_const_addr_full_words>
 8005868:	e00c      	b.n	8005884 <handle_rxflvl_ints+0xa0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6819      	ldr	r1, [r3, #0]
 800586e:	8a3a      	ldrh	r2, [r7, #16]
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff fef6 	bl	8005664 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	8a3b      	ldrh	r3, [r7, #16]
 800587e:	441a      	add	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if(bcnt < xfer->max_size) {
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	895b      	ldrh	r3, [r3, #10]
 8005888:	8a3a      	ldrh	r2, [r7, #16]
 800588a:	429a      	cmp	r2, r3
 800588c:	d23e      	bcs.n	800590c <handle_rxflvl_ints+0x128>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 800588e:	7cbb      	ldrb	r3, [r7, #18]
 8005890:	015b      	lsls	r3, r3, #5
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	4413      	add	r3, r2
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f3c3 0112 	ubfx	r1, r3, #0, #19
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	891a      	ldrh	r2, [r3, #8]
 80058a0:	b28b      	uxth	r3, r1
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 80058aa:	7cbb      	ldrb	r3, [r7, #18]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d12d      	bne.n	800590c <handle_rxflvl_ints+0x128>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	891a      	ldrh	r2, [r3, #8]
 80058b4:	4b1b      	ldr	r3, [pc, #108]	; (8005924 <handle_rxflvl_ints+0x140>)
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 80058c0:	4b18      	ldr	r3, [pc, #96]	; (8005924 <handle_rxflvl_ints+0x140>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 80058c6:	e021      	b.n	800590c <handle_rxflvl_ints+0x128>

    case 0x03: // Out packet done (Interrupt)
      break;

    case 0x04: // Setup packet done (Interrupt)
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 80058c8:	7cbb      	ldrb	r3, [r7, #18]
 80058ca:	015b      	lsls	r3, r3, #5
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	4413      	add	r3, r2
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	7cbb      	ldrb	r3, [r7, #18]
 80058d4:	015b      	lsls	r3, r3, #5
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	440b      	add	r3, r1
 80058da:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80058de:	611a      	str	r2, [r3, #16]
      break;
 80058e0:	e017      	b.n	8005912 <handle_rxflvl_ints+0x12e>

    case 0x06: // Setup packet recvd
      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (* rx_fifo);
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a10      	ldr	r2, [pc, #64]	; (8005928 <handle_rxflvl_ints+0x144>)
 80058e8:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (* rx_fifo);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <handle_rxflvl_ints+0x144>)
 80058f0:	6053      	str	r3, [r2, #4]
      break;
 80058f2:	e00e      	b.n	8005912 <handle_rxflvl_ints+0x12e>

    default: // Invalid
      TU_BREAKPOINT();
 80058f4:	4b0d      	ldr	r3, [pc, #52]	; (800592c <handle_rxflvl_ints+0x148>)
 80058f6:	60bb      	str	r3, [r7, #8]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <handle_rxflvl_ints+0x12c>
 8005904:	be00      	bkpt	0x0000
      break;
 8005906:	e003      	b.n	8005910 <handle_rxflvl_ints+0x12c>
      break;
 8005908:	bf00      	nop
 800590a:	e002      	b.n	8005912 <handle_rxflvl_ints+0x12e>
    break;
 800590c:	bf00      	nop
 800590e:	e000      	b.n	8005912 <handle_rxflvl_ints+0x12e>
      break;
 8005910:	bf00      	nop
  }
}
 8005912:	bf00      	nop
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	50001000 	.word	0x50001000
 8005920:	200029a0 	.word	0x200029a0
 8005924:	20002a20 	.word	0x20002a20
 8005928:	20002998 	.word	0x20002998
 800592c:	e000edf0 	.word	0xe000edf0

08005930 <handle_epout_ints>:

static void handle_epout_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b094      	sub	sp, #80	; 0x50
 8005934:	af02      	add	r7, sp, #8
 8005936:	4603      	mov	r3, r0
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for(uint8_t n = 0; n < EP_MAX; n++) {
 800593e:	2300      	movs	r3, #0
 8005940:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005944:	e09e      	b.n	8005a84 <handle_epout_ints+0x154>
    xfer_ctl_t * xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8005946:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800594a:	015b      	lsls	r3, r3, #5
 800594c:	4a52      	ldr	r2, [pc, #328]	; (8005a98 <handle_epout_ints+0x168>)
 800594e:	4413      	add	r3, r2
 8005950:	643b      	str	r3, [r7, #64]	; 0x40

    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800595a:	3210      	adds	r2, #16
 800595c:	2101      	movs	r1, #1
 800595e:	fa01 f202 	lsl.w	r2, r1, r2
 8005962:	4013      	ands	r3, r2
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8088 	beq.w	8005a7a <handle_epout_ints+0x14a>
      // SETUP packet Setup Phase done.
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 800596a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800596e:	015b      	lsls	r3, r3, #5
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	4413      	add	r3, r2
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d028      	beq.n	80059d0 <handle_epout_ints+0xa0>
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 800597e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005982:	015b      	lsls	r3, r3, #5
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	2208      	movs	r2, #8
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005992:	4b42      	ldr	r3, [pc, #264]	; (8005a9c <handle_epout_ints+0x16c>)
 8005994:	63bb      	str	r3, [r7, #56]	; 0x38
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 800599c:	f107 0314 	add.w	r3, r7, #20
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059ac:	753b      	strb	r3, [r7, #20]
 80059ae:	2306      	movs	r3, #6
 80059b0:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, 8);
 80059b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059b4:	f107 0318 	add.w	r3, r7, #24
 80059b8:	6810      	ldr	r0, [r2, #0]
 80059ba:	6851      	ldr	r1, [r2, #4]
 80059bc:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 80059be:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80059c2:	f107 0314 	add.w	r3, r7, #20
 80059c6:	4611      	mov	r1, r2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe fa7d 	bl	8003ec8 <dcd_event_handler>
}
 80059ce:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) &_setup_packet[0], true);
      }

      // OUT XFER complete
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 80059d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059d4:	015b      	lsls	r3, r3, #5
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d04a      	beq.n	8005a7a <handle_epout_ints+0x14a>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 80059e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059e8:	015b      	lsls	r3, r3, #5
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	2201      	movs	r2, #1
 80059f0:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 80059f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10e      	bne.n	8005a18 <handle_epout_ints+0xe8>
 80059fa:	4b29      	ldr	r3, [pc, #164]	; (8005aa0 <handle_epout_ints+0x170>)
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <handle_epout_ints+0xe8>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8005a02:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <handle_epout_ints+0x170>)
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8005a0a:	7bf8      	ldrb	r0, [r7, #15]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	2301      	movs	r3, #1
 8005a10:	2200      	movs	r2, #0
 8005a12:	f7ff f9e9 	bl	8004de8 <edpt_schedule_packets>
 8005a16:	e030      	b.n	8005a7a <handle_epout_ints+0x14a>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8005a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1a:	891b      	ldrh	r3, [r3, #8]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005a24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005a2c:	633a      	str	r2, [r7, #48]	; 0x30
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8005a3a:	f107 0320 	add.w	r3, r7, #32
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	605a      	str	r2, [r3, #4]
 8005a44:	609a      	str	r2, [r3, #8]
 8005a46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005a4a:	f887 3020 	strb.w	r3, [r7, #32]
 8005a4e:	2307      	movs	r3, #7
 8005a50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  event.xfer_complete.ep_addr = ep_addr;
 8005a54:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005a58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  event.xfer_complete.len     = xferred_bytes;
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  event.xfer_complete.result  = result;
 8005a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dcd_event_handler(&event, in_isr);
 8005a68:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005a6c:	f107 0320 	add.w	r3, r7, #32
 8005a70:	4611      	mov	r1, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe fa28 	bl	8003ec8 <dcd_event_handler>
}
 8005a78:	bf00      	nop
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8005a7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	f67f af5c 	bls.w	8005946 <handle_epout_ints+0x16>
        }
      }
    }
  }
}
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
 8005a92:	3748      	adds	r7, #72	; 0x48
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	200029a0 	.word	0x200029a0
 8005a9c:	20002998 	.word	0x20002998
 8005aa0:	20002a20 	.word	0x20002a20

08005aa4 <handle_epin_ints>:

static void handle_epin_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_INEndpointTypeDef * in_ep) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b092      	sub	sp, #72	; 0x48
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	4603      	mov	r3, r0
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005ab8:	e0ec      	b.n	8005c94 <handle_epin_ints+0x1f0>
  {
    xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 8005aba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005abe:	015b      	lsls	r3, r3, #5
 8005ac0:	3310      	adds	r3, #16
 8005ac2:	4a79      	ldr	r2, [pc, #484]	; (8005ca8 <handle_epin_ints+0x204>)
 8005ac4:	4413      	add	r3, r2
 8005ac6:	63bb      	str	r3, [r7, #56]	; 0x38

    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80d6 	beq.w	8005c8a <handle_epin_ints+0x1e6>
    {
      // IN XFER complete (entire xfer).
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 8005ade:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ae2:	015b      	lsls	r3, r3, #5
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d04a      	beq.n	8005b88 <handle_epin_ints+0xe4>
      {
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 8005af2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005af6:	015b      	lsls	r3, r3, #5
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	4413      	add	r3, r2
 8005afc:	2201      	movs	r2, #1
 8005afe:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8005b00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10e      	bne.n	8005b26 <handle_epin_ints+0x82>
 8005b08:	4b68      	ldr	r3, [pc, #416]	; (8005cac <handle_epin_ints+0x208>)
 8005b0a:	885b      	ldrh	r3, [r3, #2]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <handle_epin_ints+0x82>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8005b10:	4b66      	ldr	r3, [pc, #408]	; (8005cac <handle_epin_ints+0x208>)
 8005b12:	885b      	ldrh	r3, [r3, #2]
 8005b14:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005b18:	7bf8      	ldrb	r0, [r7, #15]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f7ff f962 	bl	8004de8 <edpt_schedule_packets>
 8005b24:	e030      	b.n	8005b88 <handle_epin_ints+0xe4>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8005b26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b2e:	b2d9      	uxtb	r1, r3
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	891b      	ldrh	r3, [r3, #8]
 8005b34:	461a      	mov	r2, r3
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b42:	627a      	str	r2, [r7, #36]	; 0x24
 8005b44:	2300      	movs	r3, #0
 8005b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8005b50:	f107 0310 	add.w	r3, r7, #16
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	605a      	str	r2, [r3, #4]
 8005b5a:	609a      	str	r2, [r3, #8]
 8005b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b60:	743b      	strb	r3, [r7, #16]
 8005b62:	2307      	movs	r3, #7
 8005b64:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8005b66:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b6a:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8005b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b74:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8005b76:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005b7a:	f107 0310 	add.w	r3, r7, #16
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe f9a1 	bl	8003ec8 <dcd_event_handler>
}
 8005b86:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 8005b88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b8c:	015b      	lsls	r3, r3, #5
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	4413      	add	r3, r2
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d076      	beq.n	8005c8a <handle_epin_ints+0x1e6>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d06c      	beq.n	8005c8a <handle_epin_ints+0x1e6>
        // DIEPINT's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8005bb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bb4:	015b      	lsls	r3, r3, #5
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	4413      	add	r3, r2
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	0cdb      	lsrs	r3, r3, #19
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc4:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Process every single packet (only whole packets can be written to fifo)
        for(uint16_t i = 0; i < remaining_packets; i++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005bca:	e043      	b.n	8005c54 <handle_epin_ints+0x1b0>
        {
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 8005bcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bd0:	015b      	lsls	r3, r3, #5
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	86bb      	strh	r3, [r7, #52]	; 0x34

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	895a      	ldrh	r2, [r3, #10]
 8005bde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005be0:	843b      	strh	r3, [r7, #32]
 8005be2:	4613      	mov	r3, r2
 8005be4:	83fb      	strh	r3, [r7, #30]
 8005be6:	8c3a      	ldrh	r2, [r7, #32]
 8005be8:	8bfb      	ldrh	r3, [r7, #30]
 8005bea:	4293      	cmp	r3, r2
 8005bec:	bf28      	it	cs
 8005bee:	4613      	movcs	r3, r2
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	867b      	strh	r3, [r7, #50]	; 0x32

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8005bf4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005bf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bfa:	015b      	lsls	r3, r3, #5
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	440b      	add	r3, r1
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	0099      	lsls	r1, r3, #2
 8005c04:	4b2a      	ldr	r3, [pc, #168]	; (8005cb0 <handle_epin_ints+0x20c>)
 8005c06:	400b      	ands	r3, r1
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d828      	bhi.n	8005c5e <handle_epin_ints+0x1ba>

          // Push packet to Tx-FIFO
          if (xfer->ff)
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00e      	beq.n	8005c32 <handle_epin_ints+0x18e>
          {
            usb_fifo_t tx_fifo = FIFO_BASE(rhport, n);
 8005c14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c18:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	031b      	lsls	r3, r3, #12
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fd fa12 	bl	8003054 <tu_fifo_read_n_const_addr_full_words>
 8005c30:	e00d      	b.n	8005c4e <handle_epin_ints+0x1aa>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c38:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005c3c:	7bf8      	ldrb	r0, [r7, #15]
 8005c3e:	f7ff fd6d 	bl	800571c <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c48:	441a      	add	r2, r3
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	601a      	str	r2, [r3, #0]
        for(uint16_t i = 0; i < remaining_packets; i++)
 8005c4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c50:	3301      	adds	r3, #1
 8005c52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c54:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005c56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d3b7      	bcc.n	8005bcc <handle_epin_ints+0x128>
 8005c5c:	e000      	b.n	8005c60 <handle_epin_ints+0x1bc>
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8005c5e:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 8005c60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c64:	015b      	lsls	r3, r3, #5
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4413      	add	r3, r2
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <handle_epin_ints+0x1e6>
        {
          dev->DIEPEMPMSK &= ~(1 << n);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c78:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c82:	43d2      	mvns	r2, r2
 8005c84:	401a      	ands	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	635a      	str	r2, [r3, #52]	; 0x34
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8005c8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c8e:	3301      	adds	r3, #1
 8005c90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005c94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	f67f af0e 	bls.w	8005aba <handle_epin_ints+0x16>
        }
      }
    }
  }
}
 8005c9e:	bf00      	nop
 8005ca0:	bf00      	nop
 8005ca2:	3740      	adds	r7, #64	; 0x40
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	200029a0 	.word	0x200029a0
 8005cac:	20002a20 	.word	0x20002a20
 8005cb0:	0003fffc 	.word	0x0003fffc

08005cb4 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b09c      	sub	sp, #112	; 0x70
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8005cbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005cc4:	4b9e      	ldr	r3, [pc, #632]	; (8005f40 <dcd_int_handler+0x28c>)
 8005cc6:	66bb      	str	r3, [r7, #104]	; 0x68
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8005cc8:	4b9e      	ldr	r3, [pc, #632]	; (8005f44 <dcd_int_handler+0x290>)
 8005cca:	667b      	str	r3, [r7, #100]	; 0x64
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8005ccc:	4b9e      	ldr	r3, [pc, #632]	; (8005f48 <dcd_int_handler+0x294>)
 8005cce:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8005cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(int_status & USB_OTG_GINTSTS_USBRST)
 8005cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <dcd_int_handler+0x42>
  {
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8005ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cec:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fe ff65 	bl	8004bc0 <bus_reset>
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8005cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d031      	beq.n	8005d64 <dcd_int_handler+0xb0>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8005d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d06:	615a      	str	r2, [r3, #20]

    tusb_speed_t const speed = get_speed(rhport);
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff f850 	bl	8004db0 <get_speed>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    set_turnaround(usb_otg, speed);
 8005d16:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d1e:	f7fe ffc5 	bl	8004cac <set_turnaround>
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8005d28:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005d2c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8005d36:	f107 0314 	add.w	r3, r7, #20
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	609a      	str	r2, [r3, #8]
 8005d42:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005d46:	753b      	strb	r3, [r7, #20]
 8005d48:	2301      	movs	r3, #1
 8005d4a:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 8005d4c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005d50:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 8005d52:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8005d56:	f107 0314 	add.w	r3, r7, #20
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe f8b3 	bl	8003ec8 <dcd_event_handler>
}
 8005d62:	bf00      	nop
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 8005d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d023      	beq.n	8005db6 <dcd_int_handler+0x102>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 8005d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d74:	615a      	str	r2, [r3, #20]
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8005d88:	f107 0320 	add.w	r3, r7, #32
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	605a      	str	r2, [r3, #4]
 8005d92:	609a      	str	r2, [r3, #8]
 8005d94:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005d98:	f887 3020 	strb.w	r3, [r7, #32]
 8005d9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005da0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 8005da4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8005da8:	f107 0320 	add.w	r3, r7, #32
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe f88a 	bl	8003ec8 <dcd_event_handler>
}
 8005db4:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8005db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	da23      	bge.n	8005e04 <dcd_int_handler+0x150>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 8005dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005dc2:	615a      	str	r2, [r3, #20]
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8005dca:	2305      	movs	r3, #5
 8005dcc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8005dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	605a      	str	r2, [r3, #4]
 8005de0:	609a      	str	r2, [r3, #8]
 8005de2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005de6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8005dea:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005dee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 8005df2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fe f863 	bl	8003ec8 <dcd_event_handler>
}
 8005e02:	bf00      	nop
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 8005e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d028      	beq.n	8005e60 <dcd_int_handler+0x1ac>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 8005e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	657b      	str	r3, [r7, #84]	; 0x54

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01d      	beq.n	8005e5a <dcd_int_handler+0x1a6>
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8005e24:	2302      	movs	r3, #2
 8005e26:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8005e30:	f107 0308 	add.w	r3, r7, #8
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	605a      	str	r2, [r3, #4]
 8005e3a:	609a      	str	r2, [r3, #8]
 8005e3c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005e40:	723b      	strb	r3, [r7, #8]
 8005e42:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005e46:	727b      	strb	r3, [r7, #9]
  dcd_event_handler(&event, in_isr);
 8005e48:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8005e4c:	f107 0308 	add.w	r3, r7, #8
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe f838 	bl	8003ec8 <dcd_event_handler>
}
 8005e58:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 8005e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 8005e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d028      	beq.n	8005ebc <dcd_int_handler+0x208>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 8005e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	615a      	str	r2, [r3, #20]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 8005e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	f023 0208 	bic.w	r2, r3, #8
 8005e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7a:	619a      	str	r2, [r3, #24]
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005e82:	2303      	movs	r3, #3
 8005e84:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8005e8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	605a      	str	r2, [r3, #4]
 8005e98:	609a      	str	r2, [r3, #8]
 8005e9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e9e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005ea2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005ea6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 8005eaa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005eae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe f807 	bl	8003ec8 <dcd_event_handler>
}
 8005eba:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 8005ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d021      	beq.n	8005f0a <dcd_int_handler+0x256>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8005ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f023 0210 	bic.w	r2, r3, #16
 8005ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed0:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fc84 	bl	80057e4 <handle_rxflvl_ints>
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8005edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1f4      	bne.n	8005ed2 <dcd_int_handler+0x21e>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8005ee8:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <dcd_int_handler+0x298>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d006      	beq.n	8005efe <dcd_int_handler+0x24a>
    {
      update_grxfsiz(rhport);
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe fe32 	bl	8004b5c <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8005ef8:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <dcd_int_handler+0x298>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f043 0210 	orr.w	r2, r3, #16
 8005f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f08:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 8005f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <dcd_int_handler+0x26c>
  {
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fd08 	bl	8005930 <handle_epout_ints>
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 8005f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <dcd_int_handler+0x282>
  {
    // IEPINT bit read-only
    handle_epin_ints(rhport, dev, in_ep);
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fdb7 	bl	8005aa4 <handle_epin_ints>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 8005f36:	bf00      	nop
 8005f38:	3770      	adds	r7, #112	; 0x70
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	50000800 	.word	0x50000800
 8005f44:	50000b00 	.word	0x50000b00
 8005f48:	50000900 	.word	0x50000900
 8005f4c:	20002a26 	.word	0x20002a26

08005f50 <tusb_init>:
#if CFG_TUD_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
#if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
 8005f54:	2301      	movs	r3, #1
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <tusb_inited>:

bool tusb_inited(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
  bool ret = false;
 8005f66:	2300      	movs	r3, #0
 8005f68:	71fb      	strb	r3, [r7, #7]

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <tusb_inited+0x1a>
 8005f70:	f7fd f96e 	bl	8003250 <tud_inited>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <tusb_inited+0x1e>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <tusb_inited+0x20>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	71fb      	strb	r3, [r7, #7]
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	71fb      	strb	r3, [r7, #7]

#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Internal Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d108      	bne.n	8005fbe <tu_edpt_claim+0x2a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <tu_edpt_claim+0x2a>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <tu_edpt_claim+0x2c>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	73fb      	strb	r3, [r7, #15]
  if (available)
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d004      	beq.n	8005fda <tu_edpt_claim+0x46>
  {
    ep_state->claimed = 1;
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	7813      	ldrb	r3, [r2, #0]
 8005fd4:	f043 0304 	orr.w	r3, r3, #4
 8005fd8:	7013      	strb	r3, [r2, #0]

#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return available;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
#if TUSB_OPT_MUTEX
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d108      	bne.n	8006012 <tu_edpt_release+0x2a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <tu_edpt_release+0x2a>
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <tu_edpt_release+0x2c>
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
  if (ret)
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	7813      	ldrb	r3, [r2, #0]
 8006028:	f36f 0382 	bfc	r3, #2, #1
 800602c:	7013      	strb	r3, [r2, #0]

#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return ret;
 800602e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 800603c:	b480      	push	{r7}
 800603e:	b08b      	sub	sp, #44	; 0x2c
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	70fb      	strb	r3, [r7, #3]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	889b      	ldrh	r3, [r3, #4]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006056:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8006058:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	78db      	ldrb	r3, [r3, #3]
 800605e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b03      	cmp	r3, #3
 8006066:	d03e      	beq.n	80060e6 <tu_edpt_validate+0xaa>
 8006068:	2b03      	cmp	r3, #3
 800606a:	dc53      	bgt.n	8006114 <tu_edpt_validate+0xd8>
 800606c:	2b01      	cmp	r3, #1
 800606e:	d002      	beq.n	8006076 <tu_edpt_validate+0x3a>
 8006070:	2b02      	cmp	r3, #2
 8006072:	d018      	beq.n	80060a6 <tu_edpt_validate+0x6a>
 8006074:	e04e      	b.n	8006114 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	2b02      	cmp	r3, #2
 800607a:	d102      	bne.n	8006082 <tu_edpt_validate+0x46>
 800607c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006080:	e001      	b.n	8006086 <tu_edpt_validate+0x4a>
 8006082:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006086:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 8006088:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800608a:	8afb      	ldrh	r3, [r7, #22]
 800608c:	429a      	cmp	r2, r3
 800608e:	d943      	bls.n	8006118 <tu_edpt_validate+0xdc>
 8006090:	4b27      	ldr	r3, [pc, #156]	; (8006130 <tu_edpt_validate+0xf4>)
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d000      	beq.n	80060a2 <tu_edpt_validate+0x66>
 80060a0:	be00      	bkpt	0x0000
 80060a2:	2300      	movs	r3, #0
 80060a4:	e03e      	b.n	8006124 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d10e      	bne.n	80060ca <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 80060ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b2:	d033      	beq.n	800611c <tu_edpt_validate+0xe0>
 80060b4:	4b1e      	ldr	r3, [pc, #120]	; (8006130 <tu_edpt_validate+0xf4>)
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d000      	beq.n	80060c6 <tu_edpt_validate+0x8a>
 80060c4:	be00      	bkpt	0x0000
 80060c6:	2300      	movs	r3, #0
 80060c8:	e02c      	b.n	8006124 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 80060ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060cc:	2b40      	cmp	r3, #64	; 0x40
 80060ce:	d925      	bls.n	800611c <tu_edpt_validate+0xe0>
 80060d0:	4b17      	ldr	r3, [pc, #92]	; (8006130 <tu_edpt_validate+0xf4>)
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d000      	beq.n	80060e2 <tu_edpt_validate+0xa6>
 80060e0:	be00      	bkpt	0x0000
 80060e2:	2300      	movs	r3, #0
 80060e4:	e01e      	b.n	8006124 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d102      	bne.n	80060f2 <tu_edpt_validate+0xb6>
 80060ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f0:	e000      	b.n	80060f4 <tu_edpt_validate+0xb8>
 80060f2:	2340      	movs	r3, #64	; 0x40
 80060f4:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 80060f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d910      	bls.n	8006120 <tu_edpt_validate+0xe4>
 80060fe:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <tu_edpt_validate+0xf4>)
 8006100:	623b      	str	r3, [r7, #32]
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d000      	beq.n	8006110 <tu_edpt_validate+0xd4>
 800610e:	be00      	bkpt	0x0000
 8006110:	2300      	movs	r3, #0
 8006112:	e007      	b.n	8006124 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 8006114:	2300      	movs	r3, #0
 8006116:	e005      	b.n	8006124 <tu_edpt_validate+0xe8>
    break;
 8006118:	bf00      	nop
 800611a:	e002      	b.n	8006122 <tu_edpt_validate+0xe6>
    break;
 800611c:	bf00      	nop
 800611e:	e000      	b.n	8006122 <tu_edpt_validate+0xe6>
    break;
 8006120:	bf00      	nop
  }

  return true;
 8006122:	2301      	movs	r3, #1
}
 8006124:	4618      	mov	r0, r3
 8006126:	372c      	adds	r7, #44	; 0x2c
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	e000edf0 	.word	0xe000edf0

08006134 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8006134:	b480      	push	{r7}
 8006136:	b08d      	sub	sp, #52	; 0x34
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	4611      	mov	r1, r2
 8006140:	461a      	mov	r2, r3
 8006142:	460b      	mov	r3, r1
 8006144:	80fb      	strh	r3, [r7, #6]
 8006146:	4613      	mov	r3, r2
 8006148:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006152:	4413      	add	r3, r2
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 8006156:	e027      	b.n	80061a8 <tu_edpt_bind_driver+0x74>
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	3301      	adds	r3, #1
 8006160:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8006162:	2b05      	cmp	r3, #5
 8006164:	d116      	bne.n	8006194 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	789b      	ldrb	r3, [r3, #2]
 800616a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800616e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006172:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006174:	7fbb      	ldrb	r3, [r7, #30]
 8006176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800617a:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006186:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006188:	7ffa      	ldrb	r2, [r7, #31]
 800618a:	09d2      	lsrs	r2, r2, #7
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	4611      	mov	r1, r2
 8006190:	797a      	ldrb	r2, [r7, #5]
 8006192:	545a      	strb	r2, [r3, r1]
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 80061a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d3d3      	bcc.n	8006158 <tu_edpt_bind_driver+0x24>
  }
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	3734      	adds	r7, #52	; 0x34
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
	...

080061c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <HAL_Init+0x40>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a0d      	ldr	r2, [pc, #52]	; (8006200 <HAL_Init+0x40>)
 80061ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <HAL_Init+0x40>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <HAL_Init+0x40>)
 80061d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061dc:	4b08      	ldr	r3, [pc, #32]	; (8006200 <HAL_Init+0x40>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a07      	ldr	r2, [pc, #28]	; (8006200 <HAL_Init+0x40>)
 80061e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061e8:	2003      	movs	r0, #3
 80061ea:	f000 f94f 	bl	800648c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061ee:	200f      	movs	r0, #15
 80061f0:	f000 f808 	bl	8006204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061f4:	f7fa fb64 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40023c00 	.word	0x40023c00

08006204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800620c:	4b12      	ldr	r3, [pc, #72]	; (8006258 <HAL_InitTick+0x54>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	4b12      	ldr	r3, [pc, #72]	; (800625c <HAL_InitTick+0x58>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	4619      	mov	r1, r3
 8006216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800621a:	fbb3 f3f1 	udiv	r3, r3, r1
 800621e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f967 	bl	80064f6 <HAL_SYSTICK_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e00e      	b.n	8006250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b0f      	cmp	r3, #15
 8006236:	d80a      	bhi.n	800624e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006238:	2200      	movs	r2, #0
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	f000 f92f 	bl	80064a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006244:	4a06      	ldr	r2, [pc, #24]	; (8006260 <HAL_InitTick+0x5c>)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	e000      	b.n	8006250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20002000 	.word	0x20002000
 800625c:	20002024 	.word	0x20002024
 8006260:	20002020 	.word	0x20002020

08006264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006268:	4b06      	ldr	r3, [pc, #24]	; (8006284 <HAL_IncTick+0x20>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	4b06      	ldr	r3, [pc, #24]	; (8006288 <HAL_IncTick+0x24>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4413      	add	r3, r2
 8006274:	4a04      	ldr	r2, [pc, #16]	; (8006288 <HAL_IncTick+0x24>)
 8006276:	6013      	str	r3, [r2, #0]
}
 8006278:	bf00      	nop
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20002024 	.word	0x20002024
 8006288:	20002a28 	.word	0x20002a28

0800628c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return uwTick;
 8006290:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <HAL_GetTick+0x14>)
 8006292:	681b      	ldr	r3, [r3, #0]
}
 8006294:	4618      	mov	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20002a28 	.word	0x20002a28

080062a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062ac:	f7ff ffee 	bl	800628c <HAL_GetTick>
 80062b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d005      	beq.n	80062ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062be:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <HAL_Delay+0x44>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062ca:	bf00      	nop
 80062cc:	f7ff ffde 	bl	800628c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d8f7      	bhi.n	80062cc <HAL_Delay+0x28>
  {
  }
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20002024 	.word	0x20002024

080062ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062fc:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <__NVIC_SetPriorityGrouping+0x44>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006308:	4013      	ands	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800631e:	4a04      	ldr	r2, [pc, #16]	; (8006330 <__NVIC_SetPriorityGrouping+0x44>)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	60d3      	str	r3, [r2, #12]
}
 8006324:	bf00      	nop
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	e000ed00 	.word	0xe000ed00

08006334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006338:	4b04      	ldr	r3, [pc, #16]	; (800634c <__NVIC_GetPriorityGrouping+0x18>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	0a1b      	lsrs	r3, r3, #8
 800633e:	f003 0307 	and.w	r3, r3, #7
}
 8006342:	4618      	mov	r0, r3
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	e000ed00 	.word	0xe000ed00

08006350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800635a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635e:	2b00      	cmp	r3, #0
 8006360:	db0b      	blt.n	800637a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	f003 021f 	and.w	r2, r3, #31
 8006368:	4907      	ldr	r1, [pc, #28]	; (8006388 <__NVIC_EnableIRQ+0x38>)
 800636a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	2001      	movs	r0, #1
 8006372:	fa00 f202 	lsl.w	r2, r0, r2
 8006376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	e000e100 	.word	0xe000e100

0800638c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	6039      	str	r1, [r7, #0]
 8006396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639c:	2b00      	cmp	r3, #0
 800639e:	db0a      	blt.n	80063b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	490c      	ldr	r1, [pc, #48]	; (80063d8 <__NVIC_SetPriority+0x4c>)
 80063a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063aa:	0112      	lsls	r2, r2, #4
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	440b      	add	r3, r1
 80063b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063b4:	e00a      	b.n	80063cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4908      	ldr	r1, [pc, #32]	; (80063dc <__NVIC_SetPriority+0x50>)
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	3b04      	subs	r3, #4
 80063c4:	0112      	lsls	r2, r2, #4
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	440b      	add	r3, r1
 80063ca:	761a      	strb	r2, [r3, #24]
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	e000e100 	.word	0xe000e100
 80063dc:	e000ed00 	.word	0xe000ed00

080063e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b089      	sub	sp, #36	; 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f1c3 0307 	rsb	r3, r3, #7
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf28      	it	cs
 80063fe:	2304      	movcs	r3, #4
 8006400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	3304      	adds	r3, #4
 8006406:	2b06      	cmp	r3, #6
 8006408:	d902      	bls.n	8006410 <NVIC_EncodePriority+0x30>
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	3b03      	subs	r3, #3
 800640e:	e000      	b.n	8006412 <NVIC_EncodePriority+0x32>
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006414:	f04f 32ff 	mov.w	r2, #4294967295
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	43da      	mvns	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	401a      	ands	r2, r3
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006428:	f04f 31ff 	mov.w	r1, #4294967295
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	fa01 f303 	lsl.w	r3, r1, r3
 8006432:	43d9      	mvns	r1, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006438:	4313      	orrs	r3, r2
         );
}
 800643a:	4618      	mov	r0, r3
 800643c:	3724      	adds	r7, #36	; 0x24
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3b01      	subs	r3, #1
 8006454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006458:	d301      	bcc.n	800645e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800645a:	2301      	movs	r3, #1
 800645c:	e00f      	b.n	800647e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800645e:	4a0a      	ldr	r2, [pc, #40]	; (8006488 <SysTick_Config+0x40>)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3b01      	subs	r3, #1
 8006464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006466:	210f      	movs	r1, #15
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	f7ff ff8e 	bl	800638c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <SysTick_Config+0x40>)
 8006472:	2200      	movs	r2, #0
 8006474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006476:	4b04      	ldr	r3, [pc, #16]	; (8006488 <SysTick_Config+0x40>)
 8006478:	2207      	movs	r2, #7
 800647a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	e000e010 	.word	0xe000e010

0800648c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ff29 	bl	80062ec <__NVIC_SetPriorityGrouping>
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	4603      	mov	r3, r0
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064b4:	f7ff ff3e 	bl	8006334 <__NVIC_GetPriorityGrouping>
 80064b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f7ff ff8e 	bl	80063e0 <NVIC_EncodePriority>
 80064c4:	4602      	mov	r2, r0
 80064c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ca:	4611      	mov	r1, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff ff5d 	bl	800638c <__NVIC_SetPriority>
}
 80064d2:	bf00      	nop
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	4603      	mov	r3, r0
 80064e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff ff31 	bl	8006350 <__NVIC_EnableIRQ>
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff ffa2 	bl	8006448 <SysTick_Config>
 8006504:	4603      	mov	r3, r0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006510:	b480      	push	{r7}
 8006512:	b089      	sub	sp, #36	; 0x24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800651e:	2300      	movs	r3, #0
 8006520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006522:	2300      	movs	r3, #0
 8006524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	e159      	b.n	80067e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800652c:	2201      	movs	r2, #1
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4013      	ands	r3, r2
 800653e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	429a      	cmp	r2, r3
 8006546:	f040 8148 	bne.w	80067da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b01      	cmp	r3, #1
 8006554:	d005      	beq.n	8006562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800655e:	2b02      	cmp	r3, #2
 8006560:	d130      	bne.n	80065c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	2203      	movs	r2, #3
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	43db      	mvns	r3, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4013      	ands	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	4313      	orrs	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006598:	2201      	movs	r2, #1
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	43db      	mvns	r3, r3
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	4013      	ands	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	091b      	lsrs	r3, r3, #4
 80065ae:	f003 0201 	and.w	r2, r3, #1
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d017      	beq.n	8006600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	2203      	movs	r2, #3
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	43db      	mvns	r3, r3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4013      	ands	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d123      	bne.n	8006654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	08da      	lsrs	r2, r3, #3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3208      	adds	r2, #8
 8006614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	220f      	movs	r2, #15
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	43db      	mvns	r3, r3
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	4013      	ands	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	4313      	orrs	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	08da      	lsrs	r2, r3, #3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3208      	adds	r2, #8
 800664e:	69b9      	ldr	r1, [r7, #24]
 8006650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	2203      	movs	r2, #3
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4013      	ands	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 0203 	and.w	r2, r3, #3
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4313      	orrs	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80a2 	beq.w	80067da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	4b57      	ldr	r3, [pc, #348]	; (80067f8 <HAL_GPIO_Init+0x2e8>)
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	4a56      	ldr	r2, [pc, #344]	; (80067f8 <HAL_GPIO_Init+0x2e8>)
 80066a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066a4:	6453      	str	r3, [r2, #68]	; 0x44
 80066a6:	4b54      	ldr	r3, [pc, #336]	; (80067f8 <HAL_GPIO_Init+0x2e8>)
 80066a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066b2:	4a52      	ldr	r2, [pc, #328]	; (80067fc <HAL_GPIO_Init+0x2ec>)
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	3302      	adds	r3, #2
 80066ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	220f      	movs	r2, #15
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	43db      	mvns	r3, r3
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	4013      	ands	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a49      	ldr	r2, [pc, #292]	; (8006800 <HAL_GPIO_Init+0x2f0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d019      	beq.n	8006712 <HAL_GPIO_Init+0x202>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a48      	ldr	r2, [pc, #288]	; (8006804 <HAL_GPIO_Init+0x2f4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <HAL_GPIO_Init+0x1fe>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a47      	ldr	r2, [pc, #284]	; (8006808 <HAL_GPIO_Init+0x2f8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00d      	beq.n	800670a <HAL_GPIO_Init+0x1fa>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a46      	ldr	r2, [pc, #280]	; (800680c <HAL_GPIO_Init+0x2fc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d007      	beq.n	8006706 <HAL_GPIO_Init+0x1f6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a45      	ldr	r2, [pc, #276]	; (8006810 <HAL_GPIO_Init+0x300>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d101      	bne.n	8006702 <HAL_GPIO_Init+0x1f2>
 80066fe:	2304      	movs	r3, #4
 8006700:	e008      	b.n	8006714 <HAL_GPIO_Init+0x204>
 8006702:	2307      	movs	r3, #7
 8006704:	e006      	b.n	8006714 <HAL_GPIO_Init+0x204>
 8006706:	2303      	movs	r3, #3
 8006708:	e004      	b.n	8006714 <HAL_GPIO_Init+0x204>
 800670a:	2302      	movs	r3, #2
 800670c:	e002      	b.n	8006714 <HAL_GPIO_Init+0x204>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <HAL_GPIO_Init+0x204>
 8006712:	2300      	movs	r3, #0
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	f002 0203 	and.w	r2, r2, #3
 800671a:	0092      	lsls	r2, r2, #2
 800671c:	4093      	lsls	r3, r2
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	4313      	orrs	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006724:	4935      	ldr	r1, [pc, #212]	; (80067fc <HAL_GPIO_Init+0x2ec>)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	089b      	lsrs	r3, r3, #2
 800672a:	3302      	adds	r3, #2
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006732:	4b38      	ldr	r3, [pc, #224]	; (8006814 <HAL_GPIO_Init+0x304>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	43db      	mvns	r3, r3
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	4013      	ands	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006756:	4a2f      	ldr	r2, [pc, #188]	; (8006814 <HAL_GPIO_Init+0x304>)
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800675c:	4b2d      	ldr	r3, [pc, #180]	; (8006814 <HAL_GPIO_Init+0x304>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	43db      	mvns	r3, r3
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	4013      	ands	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006780:	4a24      	ldr	r2, [pc, #144]	; (8006814 <HAL_GPIO_Init+0x304>)
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006786:	4b23      	ldr	r3, [pc, #140]	; (8006814 <HAL_GPIO_Init+0x304>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	43db      	mvns	r3, r3
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4013      	ands	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067aa:	4a1a      	ldr	r2, [pc, #104]	; (8006814 <HAL_GPIO_Init+0x304>)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067b0:	4b18      	ldr	r3, [pc, #96]	; (8006814 <HAL_GPIO_Init+0x304>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	43db      	mvns	r3, r3
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	4013      	ands	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067d4:	4a0f      	ldr	r2, [pc, #60]	; (8006814 <HAL_GPIO_Init+0x304>)
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	3301      	adds	r3, #1
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	f67f aea2 	bls.w	800652c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067e8:	bf00      	nop
 80067ea:	bf00      	nop
 80067ec:	3724      	adds	r7, #36	; 0x24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40013800 	.word	0x40013800
 8006800:	40020000 	.word	0x40020000
 8006804:	40020400 	.word	0x40020400
 8006808:	40020800 	.word	0x40020800
 800680c:	40020c00 	.word	0x40020c00
 8006810:	40021000 	.word	0x40021000
 8006814:	40013c00 	.word	0x40013c00

08006818 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681a:	b08f      	sub	sp, #60	; 0x3c
 800681c:	af0a      	add	r7, sp, #40	; 0x28
 800681e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e10f      	b.n	8006a4a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fa f93f 	bl	8000ac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2203      	movs	r2, #3
 800684e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d102      	bne.n	8006864 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fdb6 	bl	80073da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	687e      	ldr	r6, [r7, #4]
 8006876:	466d      	mov	r5, sp
 8006878:	f106 0410 	add.w	r4, r6, #16
 800687c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800687e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006884:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006888:	e885 0003 	stmia.w	r5, {r0, r1}
 800688c:	1d33      	adds	r3, r6, #4
 800688e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006890:	6838      	ldr	r0, [r7, #0]
 8006892:	f000 fd41 	bl	8007318 <USB_CoreInit>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0d0      	b.n	8006a4a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fda4 	bl	80073fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]
 80068b8:	e04a      	b.n	8006950 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80068ba:	7bfa      	ldrb	r2, [r7, #15]
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	333d      	adds	r3, #61	; 0x3d
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068ce:	7bfa      	ldrb	r2, [r7, #15]
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	333c      	adds	r3, #60	; 0x3c
 80068de:	7bfa      	ldrb	r2, [r7, #15]
 80068e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068e2:	7bfa      	ldrb	r2, [r7, #15]
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	b298      	uxth	r0, r3
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	3344      	adds	r3, #68	; 0x44
 80068f6:	4602      	mov	r2, r0
 80068f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068fa:	7bfa      	ldrb	r2, [r7, #15]
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	3340      	adds	r3, #64	; 0x40
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800690e:	7bfa      	ldrb	r2, [r7, #15]
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	3348      	adds	r3, #72	; 0x48
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006922:	7bfa      	ldrb	r2, [r7, #15]
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	334c      	adds	r3, #76	; 0x4c
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006936:	7bfa      	ldrb	r2, [r7, #15]
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	3354      	adds	r3, #84	; 0x54
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	3301      	adds	r3, #1
 800694e:	73fb      	strb	r3, [r7, #15]
 8006950:	7bfa      	ldrb	r2, [r7, #15]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	429a      	cmp	r2, r3
 8006958:	d3af      	bcc.n	80068ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
 800695e:	e044      	b.n	80069ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006960:	7bfa      	ldrb	r2, [r7, #15]
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	4613      	mov	r3, r2
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006976:	7bfa      	ldrb	r2, [r7, #15]
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006988:	7bfa      	ldrb	r2, [r7, #15]
 800698a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800698c:	7bfa      	ldrb	r2, [r7, #15]
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80069a2:	7bfa      	ldrb	r2, [r7, #15]
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80069b8:	7bfa      	ldrb	r2, [r7, #15]
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	4613      	mov	r3, r2
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	440b      	add	r3, r1
 80069c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069ce:	7bfa      	ldrb	r2, [r7, #15]
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	3301      	adds	r3, #1
 80069e8:	73fb      	strb	r3, [r7, #15]
 80069ea:	7bfa      	ldrb	r2, [r7, #15]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d3b5      	bcc.n	8006960 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	687e      	ldr	r6, [r7, #4]
 80069fc:	466d      	mov	r5, sp
 80069fe:	f106 0410 	add.w	r4, r6, #16
 8006a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a12:	1d33      	adds	r3, r6, #4
 8006a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a16:	6838      	ldr	r0, [r7, #0]
 8006a18:	f000 fd3c 	bl	8007494 <USB_DevInit>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e00d      	b.n	8006a4a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 ff07 	bl	8007856 <USB_DevDisconnect>

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e267      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d075      	beq.n	8006b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a72:	4b88      	ldr	r3, [pc, #544]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 030c 	and.w	r3, r3, #12
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d00c      	beq.n	8006a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a7e:	4b85      	ldr	r3, [pc, #532]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d112      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a8a:	4b82      	ldr	r3, [pc, #520]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a96:	d10b      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a98:	4b7e      	ldr	r3, [pc, #504]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d05b      	beq.n	8006b5c <HAL_RCC_OscConfig+0x108>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d157      	bne.n	8006b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e242      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab8:	d106      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x74>
 8006aba:	4b76      	ldr	r3, [pc, #472]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a75      	ldr	r2, [pc, #468]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	e01d      	b.n	8006b04 <HAL_RCC_OscConfig+0xb0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ad0:	d10c      	bne.n	8006aec <HAL_RCC_OscConfig+0x98>
 8006ad2:	4b70      	ldr	r3, [pc, #448]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a6f      	ldr	r2, [pc, #444]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	4b6d      	ldr	r3, [pc, #436]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a6c      	ldr	r2, [pc, #432]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	e00b      	b.n	8006b04 <HAL_RCC_OscConfig+0xb0>
 8006aec:	4b69      	ldr	r3, [pc, #420]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a68      	ldr	r2, [pc, #416]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	4b66      	ldr	r3, [pc, #408]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a65      	ldr	r2, [pc, #404]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d013      	beq.n	8006b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b0c:	f7ff fbbe 	bl	800628c <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b14:	f7ff fbba 	bl	800628c <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b64      	cmp	r3, #100	; 0x64
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e207      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b26:	4b5b      	ldr	r3, [pc, #364]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0xc0>
 8006b32:	e014      	b.n	8006b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7ff fbaa 	bl	800628c <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b3c:	f7ff fba6 	bl	800628c <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b64      	cmp	r3, #100	; 0x64
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e1f3      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4e:	4b51      	ldr	r3, [pc, #324]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0xe8>
 8006b5a:	e000      	b.n	8006b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d063      	beq.n	8006c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b6a:	4b4a      	ldr	r3, [pc, #296]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 030c 	and.w	r3, r3, #12
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b76:	4b47      	ldr	r3, [pc, #284]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d11c      	bne.n	8006bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b82:	4b44      	ldr	r3, [pc, #272]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d116      	bne.n	8006bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8e:	4b41      	ldr	r3, [pc, #260]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x152>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d001      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e1c7      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba6:	4b3b      	ldr	r3, [pc, #236]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	4937      	ldr	r1, [pc, #220]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bba:	e03a      	b.n	8006c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d020      	beq.n	8006c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc4:	4b34      	ldr	r3, [pc, #208]	; (8006c98 <HAL_RCC_OscConfig+0x244>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bca:	f7ff fb5f 	bl	800628c <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd0:	e008      	b.n	8006be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bd2:	f7ff fb5b 	bl	800628c <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e1a8      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be4:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f0      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf0:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	4925      	ldr	r1, [pc, #148]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	600b      	str	r3, [r1, #0]
 8006c04:	e015      	b.n	8006c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c06:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <HAL_RCC_OscConfig+0x244>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7ff fb3e 	bl	800628c <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c14:	f7ff fb3a 	bl	800628c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e187      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c26:	4b1b      	ldr	r3, [pc, #108]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d036      	beq.n	8006cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d016      	beq.n	8006c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <HAL_RCC_OscConfig+0x248>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c4c:	f7ff fb1e 	bl	800628c <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c54:	f7ff fb1a 	bl	800628c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e167      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f0      	beq.n	8006c54 <HAL_RCC_OscConfig+0x200>
 8006c72:	e01b      	b.n	8006cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <HAL_RCC_OscConfig+0x248>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c7a:	f7ff fb07 	bl	800628c <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c80:	e00e      	b.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c82:	f7ff fb03 	bl	800628c <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d907      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e150      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
 8006c94:	40023800 	.word	0x40023800
 8006c98:	42470000 	.word	0x42470000
 8006c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca0:	4b88      	ldr	r3, [pc, #544]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1ea      	bne.n	8006c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8097 	beq.w	8006de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cbe:	4b81      	ldr	r3, [pc, #516]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10f      	bne.n	8006cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60bb      	str	r3, [r7, #8]
 8006cce:	4b7d      	ldr	r3, [pc, #500]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	4a7c      	ldr	r2, [pc, #496]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cda:	4b7a      	ldr	r3, [pc, #488]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	60bb      	str	r3, [r7, #8]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cea:	4b77      	ldr	r3, [pc, #476]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d118      	bne.n	8006d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cf6:	4b74      	ldr	r3, [pc, #464]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a73      	ldr	r2, [pc, #460]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d02:	f7ff fac3 	bl	800628c <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0a:	f7ff fabf 	bl	800628c <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e10c      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1c:	4b6a      	ldr	r3, [pc, #424]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d106      	bne.n	8006d3e <HAL_RCC_OscConfig+0x2ea>
 8006d30:	4b64      	ldr	r3, [pc, #400]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d34:	4a63      	ldr	r2, [pc, #396]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3c:	e01c      	b.n	8006d78 <HAL_RCC_OscConfig+0x324>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b05      	cmp	r3, #5
 8006d44:	d10c      	bne.n	8006d60 <HAL_RCC_OscConfig+0x30c>
 8006d46:	4b5f      	ldr	r3, [pc, #380]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	4a5e      	ldr	r2, [pc, #376]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d4c:	f043 0304 	orr.w	r3, r3, #4
 8006d50:	6713      	str	r3, [r2, #112]	; 0x70
 8006d52:	4b5c      	ldr	r3, [pc, #368]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d56:	4a5b      	ldr	r2, [pc, #364]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5e:	e00b      	b.n	8006d78 <HAL_RCC_OscConfig+0x324>
 8006d60:	4b58      	ldr	r3, [pc, #352]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	4a57      	ldr	r2, [pc, #348]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d66:	f023 0301 	bic.w	r3, r3, #1
 8006d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6c:	4b55      	ldr	r3, [pc, #340]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	4a54      	ldr	r2, [pc, #336]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d72:	f023 0304 	bic.w	r3, r3, #4
 8006d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d015      	beq.n	8006dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7ff fa84 	bl	800628c <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d86:	e00a      	b.n	8006d9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d88:	f7ff fa80 	bl	800628c <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e0cb      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9e:	4b49      	ldr	r3, [pc, #292]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0ee      	beq.n	8006d88 <HAL_RCC_OscConfig+0x334>
 8006daa:	e014      	b.n	8006dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dac:	f7ff fa6e 	bl	800628c <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db2:	e00a      	b.n	8006dca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db4:	f7ff fa6a 	bl	800628c <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e0b5      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dca:	4b3e      	ldr	r3, [pc, #248]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1ee      	bne.n	8006db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d105      	bne.n	8006de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ddc:	4b39      	ldr	r3, [pc, #228]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	4a38      	ldr	r2, [pc, #224]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80a1 	beq.w	8006f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d05c      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d141      	bne.n	8006e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e06:	4b31      	ldr	r3, [pc, #196]	; (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0c:	f7ff fa3e 	bl	800628c <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e14:	f7ff fa3a 	bl	800628c <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e087      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e26:	4b27      	ldr	r3, [pc, #156]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	019b      	lsls	r3, r3, #6
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	061b      	lsls	r3, r3, #24
 8006e56:	491b      	ldr	r1, [pc, #108]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e62:	f7ff fa13 	bl	800628c <HAL_GetTick>
 8006e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e68:	e008      	b.n	8006e7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e6a:	f7ff fa0f 	bl	800628c <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e05c      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7c:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0f0      	beq.n	8006e6a <HAL_RCC_OscConfig+0x416>
 8006e88:	e054      	b.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e90:	f7ff f9fc 	bl	800628c <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e98:	f7ff f9f8 	bl	800628c <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e045      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f0      	bne.n	8006e98 <HAL_RCC_OscConfig+0x444>
 8006eb6:	e03d      	b.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d107      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e038      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40007000 	.word	0x40007000
 8006ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_RCC_OscConfig+0x4ec>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d028      	beq.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d121      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d11a      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f00:	4013      	ands	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d111      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d107      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	40023800 	.word	0x40023800

08006f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0cc      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f58:	4b68      	ldr	r3, [pc, #416]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d90c      	bls.n	8006f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f66:	4b65      	ldr	r3, [pc, #404]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6e:	4b63      	ldr	r3, [pc, #396]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d001      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0b8      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d020      	beq.n	8006fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f98:	4b59      	ldr	r3, [pc, #356]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	4a58      	ldr	r2, [pc, #352]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb0:	4b53      	ldr	r3, [pc, #332]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	4a52      	ldr	r2, [pc, #328]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fbc:	4b50      	ldr	r3, [pc, #320]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	494d      	ldr	r1, [pc, #308]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d044      	beq.n	8007064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe2:	4b47      	ldr	r3, [pc, #284]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d119      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e07f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d003      	beq.n	8007002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d107      	bne.n	8007012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007002:	4b3f      	ldr	r3, [pc, #252]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e06f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007012:	4b3b      	ldr	r3, [pc, #236]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e067      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007022:	4b37      	ldr	r3, [pc, #220]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f023 0203 	bic.w	r2, r3, #3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4934      	ldr	r1, [pc, #208]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	4313      	orrs	r3, r2
 8007032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007034:	f7ff f92a 	bl	800628c <HAL_GetTick>
 8007038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703a:	e00a      	b.n	8007052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800703c:	f7ff f926 	bl	800628c <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f241 3288 	movw	r2, #5000	; 0x1388
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e04f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007052:	4b2b      	ldr	r3, [pc, #172]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 020c 	and.w	r2, r3, #12
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	429a      	cmp	r2, r3
 8007062:	d1eb      	bne.n	800703c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007064:	4b25      	ldr	r3, [pc, #148]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d20c      	bcs.n	800708c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	4b22      	ldr	r3, [pc, #136]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800707a:	4b20      	ldr	r3, [pc, #128]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d001      	beq.n	800708c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e032      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007098:	4b19      	ldr	r3, [pc, #100]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	4916      	ldr	r1, [pc, #88]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070b6:	4b12      	ldr	r3, [pc, #72]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	490e      	ldr	r1, [pc, #56]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ca:	f000 f821 	bl	8007110 <HAL_RCC_GetSysClockFreq>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	091b      	lsrs	r3, r3, #4
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	490a      	ldr	r1, [pc, #40]	; (8007104 <HAL_RCC_ClockConfig+0x1c0>)
 80070dc:	5ccb      	ldrb	r3, [r1, r3]
 80070de:	fa22 f303 	lsr.w	r3, r2, r3
 80070e2:	4a09      	ldr	r2, [pc, #36]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 80070e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070e6:	4b09      	ldr	r3, [pc, #36]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff f88a 	bl	8006204 <HAL_InitTick>

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40023c00 	.word	0x40023c00
 8007100:	40023800 	.word	0x40023800
 8007104:	08007a34 	.word	0x08007a34
 8007108:	20002000 	.word	0x20002000
 800710c:	20002020 	.word	0x20002020

08007110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007114:	b094      	sub	sp, #80	; 0x50
 8007116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	647b      	str	r3, [r7, #68]	; 0x44
 800711c:	2300      	movs	r3, #0
 800711e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007120:	2300      	movs	r3, #0
 8007122:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007128:	4b79      	ldr	r3, [pc, #484]	; (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 030c 	and.w	r3, r3, #12
 8007130:	2b08      	cmp	r3, #8
 8007132:	d00d      	beq.n	8007150 <HAL_RCC_GetSysClockFreq+0x40>
 8007134:	2b08      	cmp	r3, #8
 8007136:	f200 80e1 	bhi.w	80072fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0x34>
 800713e:	2b04      	cmp	r3, #4
 8007140:	d003      	beq.n	800714a <HAL_RCC_GetSysClockFreq+0x3a>
 8007142:	e0db      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007144:	4b73      	ldr	r3, [pc, #460]	; (8007314 <HAL_RCC_GetSysClockFreq+0x204>)
 8007146:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007148:	e0db      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800714a:	4b72      	ldr	r3, [pc, #456]	; (8007314 <HAL_RCC_GetSysClockFreq+0x204>)
 800714c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800714e:	e0d8      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007150:	4b6f      	ldr	r3, [pc, #444]	; (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007158:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800715a:	4b6d      	ldr	r3, [pc, #436]	; (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d063      	beq.n	800722e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007166:	4b6a      	ldr	r3, [pc, #424]	; (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	099b      	lsrs	r3, r3, #6
 800716c:	2200      	movs	r2, #0
 800716e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007170:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007178:	633b      	str	r3, [r7, #48]	; 0x30
 800717a:	2300      	movs	r3, #0
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
 800717e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007182:	4622      	mov	r2, r4
 8007184:	462b      	mov	r3, r5
 8007186:	f04f 0000 	mov.w	r0, #0
 800718a:	f04f 0100 	mov.w	r1, #0
 800718e:	0159      	lsls	r1, r3, #5
 8007190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007194:	0150      	lsls	r0, r2, #5
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4621      	mov	r1, r4
 800719c:	1a51      	subs	r1, r2, r1
 800719e:	6139      	str	r1, [r7, #16]
 80071a0:	4629      	mov	r1, r5
 80071a2:	eb63 0301 	sbc.w	r3, r3, r1
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071b4:	4659      	mov	r1, fp
 80071b6:	018b      	lsls	r3, r1, #6
 80071b8:	4651      	mov	r1, sl
 80071ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071be:	4651      	mov	r1, sl
 80071c0:	018a      	lsls	r2, r1, #6
 80071c2:	4651      	mov	r1, sl
 80071c4:	ebb2 0801 	subs.w	r8, r2, r1
 80071c8:	4659      	mov	r1, fp
 80071ca:	eb63 0901 	sbc.w	r9, r3, r1
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071e2:	4690      	mov	r8, r2
 80071e4:	4699      	mov	r9, r3
 80071e6:	4623      	mov	r3, r4
 80071e8:	eb18 0303 	adds.w	r3, r8, r3
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	462b      	mov	r3, r5
 80071f0:	eb49 0303 	adc.w	r3, r9, r3
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007202:	4629      	mov	r1, r5
 8007204:	028b      	lsls	r3, r1, #10
 8007206:	4621      	mov	r1, r4
 8007208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800720c:	4621      	mov	r1, r4
 800720e:	028a      	lsls	r2, r1, #10
 8007210:	4610      	mov	r0, r2
 8007212:	4619      	mov	r1, r3
 8007214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007216:	2200      	movs	r2, #0
 8007218:	62bb      	str	r3, [r7, #40]	; 0x28
 800721a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800721c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007220:	f7f8 ffe2 	bl	80001e8 <__aeabi_uldivmod>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4613      	mov	r3, r2
 800722a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800722c:	e058      	b.n	80072e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800722e:	4b38      	ldr	r3, [pc, #224]	; (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	099b      	lsrs	r3, r3, #6
 8007234:	2200      	movs	r2, #0
 8007236:	4618      	mov	r0, r3
 8007238:	4611      	mov	r1, r2
 800723a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800723e:	623b      	str	r3, [r7, #32]
 8007240:	2300      	movs	r3, #0
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
 8007244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007248:	4642      	mov	r2, r8
 800724a:	464b      	mov	r3, r9
 800724c:	f04f 0000 	mov.w	r0, #0
 8007250:	f04f 0100 	mov.w	r1, #0
 8007254:	0159      	lsls	r1, r3, #5
 8007256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800725a:	0150      	lsls	r0, r2, #5
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4641      	mov	r1, r8
 8007262:	ebb2 0a01 	subs.w	sl, r2, r1
 8007266:	4649      	mov	r1, r9
 8007268:	eb63 0b01 	sbc.w	fp, r3, r1
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800727c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007280:	ebb2 040a 	subs.w	r4, r2, sl
 8007284:	eb63 050b 	sbc.w	r5, r3, fp
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	00eb      	lsls	r3, r5, #3
 8007292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007296:	00e2      	lsls	r2, r4, #3
 8007298:	4614      	mov	r4, r2
 800729a:	461d      	mov	r5, r3
 800729c:	4643      	mov	r3, r8
 800729e:	18e3      	adds	r3, r4, r3
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	464b      	mov	r3, r9
 80072a4:	eb45 0303 	adc.w	r3, r5, r3
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072b6:	4629      	mov	r1, r5
 80072b8:	028b      	lsls	r3, r1, #10
 80072ba:	4621      	mov	r1, r4
 80072bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c0:	4621      	mov	r1, r4
 80072c2:	028a      	lsls	r2, r1, #10
 80072c4:	4610      	mov	r0, r2
 80072c6:	4619      	mov	r1, r3
 80072c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ca:	2200      	movs	r2, #0
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	61fa      	str	r2, [r7, #28]
 80072d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072d4:	f7f8 ff88 	bl	80001e8 <__aeabi_uldivmod>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4613      	mov	r3, r2
 80072de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <HAL_RCC_GetSysClockFreq+0x200>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	3301      	adds	r3, #1
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80072f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072fa:	e002      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <HAL_RCC_GetSysClockFreq+0x204>)
 80072fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007304:	4618      	mov	r0, r3
 8007306:	3750      	adds	r7, #80	; 0x50
 8007308:	46bd      	mov	sp, r7
 800730a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800730e:	bf00      	nop
 8007310:	40023800 	.word	0x40023800
 8007314:	00f42400 	.word	0x00f42400

08007318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007318:	b084      	sub	sp, #16
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	f107 001c 	add.w	r0, r7, #28
 8007326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	2b01      	cmp	r3, #1
 800732e:	d122      	bne.n	8007376 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735a:	2b01      	cmp	r3, #1
 800735c:	d105      	bne.n	800736a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 faa2 	bl	80078b4 <USB_CoreReset>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
 8007374:	e01a      	b.n	80073ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa96 	bl	80078b4 <USB_CoreReset>
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800738c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	639a      	str	r2, [r3, #56]	; 0x38
 800739e:	e005      	b.n	80073ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d10b      	bne.n	80073ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f043 0206 	orr.w	r2, r3, #6
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f043 0220 	orr.w	r2, r3, #32
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073d6:	b004      	add	sp, #16
 80073d8:	4770      	bx	lr

080073da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f023 0201 	bic.w	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d115      	bne.n	800744a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800742a:	2001      	movs	r0, #1
 800742c:	f7fe ff3a 	bl	80062a4 <HAL_Delay>
      ms++;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3301      	adds	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa2e 	bl	8007898 <USB_GetMode>
 800743c:	4603      	mov	r3, r0
 800743e:	2b01      	cmp	r3, #1
 8007440:	d01e      	beq.n	8007480 <USB_SetCurrentMode+0x84>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b31      	cmp	r3, #49	; 0x31
 8007446:	d9f0      	bls.n	800742a <USB_SetCurrentMode+0x2e>
 8007448:	e01a      	b.n	8007480 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800744a:	78fb      	ldrb	r3, [r7, #3]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d115      	bne.n	800747c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800745c:	2001      	movs	r0, #1
 800745e:	f7fe ff21 	bl	80062a4 <HAL_Delay>
      ms++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fa15 	bl	8007898 <USB_GetMode>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <USB_SetCurrentMode+0x84>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b31      	cmp	r3, #49	; 0x31
 8007478:	d9f0      	bls.n	800745c <USB_SetCurrentMode+0x60>
 800747a:	e001      	b.n	8007480 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e005      	b.n	800748c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b32      	cmp	r3, #50	; 0x32
 8007484:	d101      	bne.n	800748a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e000      	b.n	800748c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007494:	b084      	sub	sp, #16
 8007496:	b580      	push	{r7, lr}
 8007498:	b086      	sub	sp, #24
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80074a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80074ae:	2300      	movs	r3, #0
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	e009      	b.n	80074c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	3340      	adds	r3, #64	; 0x40
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	3301      	adds	r3, #1
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	2b0e      	cmp	r3, #14
 80074cc:	d9f2      	bls.n	80074b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d11c      	bne.n	800750e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e2:	f043 0302 	orr.w	r3, r3, #2
 80074e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007504:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	639a      	str	r2, [r3, #56]	; 0x38
 800750c:	e00b      	b.n	8007526 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800752c:	461a      	mov	r2, r3
 800752e:	2300      	movs	r3, #0
 8007530:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007538:	4619      	mov	r1, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007540:	461a      	mov	r2, r3
 8007542:	680b      	ldr	r3, [r1, #0]
 8007544:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	2b01      	cmp	r3, #1
 800754a:	d10c      	bne.n	8007566 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d104      	bne.n	800755c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007552:	2100      	movs	r1, #0
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f965 	bl	8007824 <USB_SetDevSpeed>
 800755a:	e008      	b.n	800756e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800755c:	2101      	movs	r1, #1
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f960 	bl	8007824 <USB_SetDevSpeed>
 8007564:	e003      	b.n	800756e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007566:	2103      	movs	r1, #3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f95b 	bl	8007824 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800756e:	2110      	movs	r1, #16
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f8f3 	bl	800775c <USB_FlushTxFifo>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f91f 	bl	80077c4 <USB_FlushRxFifo>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007596:	461a      	mov	r2, r3
 8007598:	2300      	movs	r3, #0
 800759a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a2:	461a      	mov	r2, r3
 80075a4:	2300      	movs	r3, #0
 80075a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ae:	461a      	mov	r2, r3
 80075b0:	2300      	movs	r3, #0
 80075b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	e043      	b.n	8007642 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d0:	d118      	bne.n	8007604 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e4:	461a      	mov	r2, r3
 80075e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	e013      	b.n	8007616 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fa:	461a      	mov	r2, r3
 80075fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	e008      	b.n	8007616 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007610:	461a      	mov	r2, r3
 8007612:	2300      	movs	r3, #0
 8007614:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007622:	461a      	mov	r2, r3
 8007624:	2300      	movs	r3, #0
 8007626:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007634:	461a      	mov	r2, r3
 8007636:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800763a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3301      	adds	r3, #1
 8007640:	613b      	str	r3, [r7, #16]
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	429a      	cmp	r2, r3
 8007648:	d3b7      	bcc.n	80075ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	e043      	b.n	80076d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007666:	d118      	bne.n	800769a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	461a      	mov	r2, r3
 800767c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	e013      	b.n	80076ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007690:	461a      	mov	r2, r3
 8007692:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	e008      	b.n	80076ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	461a      	mov	r2, r3
 80076a8:	2300      	movs	r3, #0
 80076aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	461a      	mov	r2, r3
 80076ba:	2300      	movs	r3, #0
 80076bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ca:	461a      	mov	r2, r3
 80076cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	3301      	adds	r3, #1
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d3b7      	bcc.n	8007650 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007700:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	2b00      	cmp	r3, #0
 8007706:	d105      	bne.n	8007714 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	f043 0210 	orr.w	r2, r3, #16
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699a      	ldr	r2, [r3, #24]
 8007718:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <USB_DevInit+0x2c4>)
 800771a:	4313      	orrs	r3, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f043 0208 	orr.w	r2, r3, #8
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007734:	2b01      	cmp	r3, #1
 8007736:	d107      	bne.n	8007748 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007740:	f043 0304 	orr.w	r3, r3, #4
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007754:	b004      	add	sp, #16
 8007756:	4770      	bx	lr
 8007758:	803c3800 	.word	0x803c3800

0800775c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4a13      	ldr	r2, [pc, #76]	; (80077c0 <USB_FlushTxFifo+0x64>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d901      	bls.n	800777c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e01b      	b.n	80077b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	daf2      	bge.n	800776a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	019b      	lsls	r3, r3, #6
 800778c:	f043 0220 	orr.w	r2, r3, #32
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3301      	adds	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4a08      	ldr	r2, [pc, #32]	; (80077c0 <USB_FlushTxFifo+0x64>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d901      	bls.n	80077a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e006      	b.n	80077b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d0f0      	beq.n	8007794 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	00030d40 	.word	0x00030d40

080077c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a11      	ldr	r2, [pc, #68]	; (8007820 <USB_FlushRxFifo+0x5c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d901      	bls.n	80077e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e018      	b.n	8007814 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	daf2      	bge.n	80077d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2210      	movs	r2, #16
 80077f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4a08      	ldr	r2, [pc, #32]	; (8007820 <USB_FlushRxFifo+0x5c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d901      	bls.n	8007806 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e006      	b.n	8007814 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0310 	and.w	r3, r3, #16
 800780e:	2b10      	cmp	r3, #16
 8007810:	d0f0      	beq.n	80077f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	00030d40 	.word	0x00030d40

08007824 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	68f9      	ldr	r1, [r7, #12]
 8007840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007844:	4313      	orrs	r3, r2
 8007846:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007870:	f023 0303 	bic.w	r3, r3, #3
 8007874:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007884:	f043 0302 	orr.w	r3, r3, #2
 8007888:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	f003 0301 	and.w	r3, r3, #1
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3301      	adds	r3, #1
 80078c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4a13      	ldr	r2, [pc, #76]	; (8007918 <USB_CoreReset+0x64>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d901      	bls.n	80078d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e01b      	b.n	800790a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	daf2      	bge.n	80078c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f043 0201 	orr.w	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4a09      	ldr	r2, [pc, #36]	; (8007918 <USB_CoreReset+0x64>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d901      	bls.n	80078fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e006      	b.n	800790a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b01      	cmp	r3, #1
 8007906:	d0f0      	beq.n	80078ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	00030d40 	.word	0x00030d40

0800791c <__libc_init_array>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4d0d      	ldr	r5, [pc, #52]	; (8007954 <__libc_init_array+0x38>)
 8007920:	4c0d      	ldr	r4, [pc, #52]	; (8007958 <__libc_init_array+0x3c>)
 8007922:	1b64      	subs	r4, r4, r5
 8007924:	10a4      	asrs	r4, r4, #2
 8007926:	2600      	movs	r6, #0
 8007928:	42a6      	cmp	r6, r4
 800792a:	d109      	bne.n	8007940 <__libc_init_array+0x24>
 800792c:	4d0b      	ldr	r5, [pc, #44]	; (800795c <__libc_init_array+0x40>)
 800792e:	4c0c      	ldr	r4, [pc, #48]	; (8007960 <__libc_init_array+0x44>)
 8007930:	f000 f848 	bl	80079c4 <_init>
 8007934:	1b64      	subs	r4, r4, r5
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	2600      	movs	r6, #0
 800793a:	42a6      	cmp	r6, r4
 800793c:	d105      	bne.n	800794a <__libc_init_array+0x2e>
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	f855 3b04 	ldr.w	r3, [r5], #4
 8007944:	4798      	blx	r3
 8007946:	3601      	adds	r6, #1
 8007948:	e7ee      	b.n	8007928 <__libc_init_array+0xc>
 800794a:	f855 3b04 	ldr.w	r3, [r5], #4
 800794e:	4798      	blx	r3
 8007950:	3601      	adds	r6, #1
 8007952:	e7f2      	b.n	800793a <__libc_init_array+0x1e>
 8007954:	08007af8 	.word	0x08007af8
 8007958:	08007af8 	.word	0x08007af8
 800795c:	08007af8 	.word	0x08007af8
 8007960:	08007afc 	.word	0x08007afc

08007964 <memcpy>:
 8007964:	440a      	add	r2, r1
 8007966:	4291      	cmp	r1, r2
 8007968:	f100 33ff 	add.w	r3, r0, #4294967295
 800796c:	d100      	bne.n	8007970 <memcpy+0xc>
 800796e:	4770      	bx	lr
 8007970:	b510      	push	{r4, lr}
 8007972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800797a:	4291      	cmp	r1, r2
 800797c:	d1f9      	bne.n	8007972 <memcpy+0xe>
 800797e:	bd10      	pop	{r4, pc}

08007980 <memmove>:
 8007980:	4288      	cmp	r0, r1
 8007982:	b510      	push	{r4, lr}
 8007984:	eb01 0402 	add.w	r4, r1, r2
 8007988:	d902      	bls.n	8007990 <memmove+0x10>
 800798a:	4284      	cmp	r4, r0
 800798c:	4623      	mov	r3, r4
 800798e:	d807      	bhi.n	80079a0 <memmove+0x20>
 8007990:	1e43      	subs	r3, r0, #1
 8007992:	42a1      	cmp	r1, r4
 8007994:	d008      	beq.n	80079a8 <memmove+0x28>
 8007996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800799a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800799e:	e7f8      	b.n	8007992 <memmove+0x12>
 80079a0:	4402      	add	r2, r0
 80079a2:	4601      	mov	r1, r0
 80079a4:	428a      	cmp	r2, r1
 80079a6:	d100      	bne.n	80079aa <memmove+0x2a>
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079b2:	e7f7      	b.n	80079a4 <memmove+0x24>

080079b4 <memset>:
 80079b4:	4402      	add	r2, r0
 80079b6:	4603      	mov	r3, r0
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d100      	bne.n	80079be <memset+0xa>
 80079bc:	4770      	bx	lr
 80079be:	f803 1b01 	strb.w	r1, [r3], #1
 80079c2:	e7f9      	b.n	80079b8 <memset+0x4>

080079c4 <_init>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr

080079d0 <_fini>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr
